<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a10" title="OSS_SNMP">
  <file path="Cache/APC.php" hash="6143d6fa24afcaefadc5f238a90db64e" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\Cache" line="44" package="Default">
      <extends>\OSS_SNMP\Cache</extends>
      <name>APC</name>
      <full_name>\OSS_SNMP\Cache\APC</full_name>
      <docblock line="38">
        <description><![CDATA[APC cache implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="50" namespace="OSS_SNMP\Cache" package="Default">
        <name>$_ttl</name>
        <default><![CDATA[300]]></default>
        <docblock line="46">
          <description><![CDATA[Default time to live for cache variables in seconds]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="Default time to live for cache variables in seconds (defaults to 300s - 5 mins)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" namespace="OSS_SNMP\Cache" package="Default">
        <name>$_prefix</name>
        <default><![CDATA['OSS_SNMP_']]></default>
        <docblock line="52">
          <description><![CDATA[Prefix to use for caching items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="Prefix to use for caching items" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="67" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="58">
          <description><![CDATA[Cache constructor.]]></description>
          <long-description><![CDATA[<p>For basic cache, takes no parameters.</p>]]></long-description>
          <tag line="58" name="param" description="Set the default ttl" type="int" variable="$ttl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="param" description="Set the default prefix for caching variable names" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="return" description="An instance of the cache ($this) for  fluent interfaces" type="\OSS_SNMP\Cache\Basic">
            <type by_reference="false">\OSS_SNMP\Cache\Basic</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$ttl</name>
          <default><![CDATA[300]]></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$prefix</name>
          <default><![CDATA['OSS_SNMP_']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="87" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="81">
          <description><![CDATA[Load a named value from the cache (or null if not present)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="The name of the value to load" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="return" description="The value from the cache or null" type="mixed|null">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="107" package="Default">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="100">
          <description><![CDATA[Save a named value to the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="The name of the value to save" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="param" description="The value to save" type="mixed" variable="$val">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="100" name="return" description="The value (as passed)" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="107">
          <name>$val</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="120" package="Default">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="112">
          <description><![CDATA[Save a named value to the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="The name of the value to save" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="param" description="The value to save" type="mixed" variable="$val">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="112" name="param" description="The time to live of the variable if you want to override the default" type="int" variable="$ttl">
            <type by_reference="false">int</type>
          </tag>
          <tag line="112" name="return" description="The value (as passed)" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$val</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$ttl</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="136" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="131">
          <description><![CDATA[Clear a named value from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="param" description="The name of the value to clear" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="146" package="Default">
        <name>clearAll</name>
        <full_name>clearAll</full_name>
        <docblock line="142">
          <description><![CDATA[Clear all values from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Cache/APC.php</error>
    </parse_markers>
  </file>
  <file path="Cache/Basic.php" hash="3b60236d4e0734efe4a903314bc7fd4e" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\Cache" line="44" package="Default">
      <extends>\OSS_SNMP\Cache</extends>
      <name>Basic</name>
      <full_name>\OSS_SNMP\Cache\Basic</full_name>
      <docblock line="38">
        <description><![CDATA[basic (array) cache implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" namespace="OSS_SNMP\Cache" package="Default">
        <name>$_cache</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[An array to store results - a temporary cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="An array to store results - a temporary cache" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="61" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="54">
          <description><![CDATA[Cache constructor.]]></description>
          <long-description><![CDATA[<p>For basic cache, takes no parameters.</p>]]></long-description>
          <tag line="54" name="return" description="An instance of the cache ($this) for  fluent interfaces" type="\OSS_SNMP\Cache\Basic">
            <type by_reference="false">\OSS_SNMP\Cache\Basic</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="76" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="70">
          <description><![CDATA[Load a named value from the cache (or null if not present)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="The name of the value to load" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="return" description="The value from the cache or null" type="mixed|null">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="92" package="Default">
        <name>save</name>
        <full_name>save</full_name>
        <docblock line="85">
          <description><![CDATA[Save a named value to the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="The name of the value to save" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="param" description="The value to save" type="mixed" variable="$val">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="85" name="return" description="The value (as passed)" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$val</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="102" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="97">
          <description><![CDATA[Clear a named value from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="The name of the value to clear" type="string" variable="$var">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$var</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\Cache" line="113" package="Default">
        <name>clearAll</name>
        <full_name>clearAll</full_name>
        <docblock line="109">
          <description><![CDATA[Clear all values from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Cache/Basic.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Iface.php" hash="60454a81f0569069b1f841b3b770f14a" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Iface</name>
      <full_name>\OSS_SNMP\MIBS\Iface</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on generic devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="46" package="Default">
        <name>OID_IF_NUMBER</name>
        <full_name>OID_IF_NUMBER</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="48" package="Default">
        <name>OID_IF_INDEX</name>
        <full_name>OID_IF_INDEX</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="49" package="Default">
        <name>OID_IF_DESCRIPTION</name>
        <full_name>OID_IF_DESCRIPTION</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="50" package="Default">
        <name>OID_IF_TYPE</name>
        <full_name>OID_IF_TYPE</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="51" package="Default">
        <name>OID_IF_MTU</name>
        <full_name>OID_IF_MTU</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="52" package="Default">
        <name>OID_IF_SPEED</name>
        <full_name>OID_IF_SPEED</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="53" package="Default">
        <name>OID_IF_PHYS_ADDRESS</name>
        <full_name>OID_IF_PHYS_ADDRESS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="54" package="Default">
        <name>OID_IF_ADMIN_STATUS</name>
        <full_name>OID_IF_ADMIN_STATUS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.7']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="55" package="Default">
        <name>OID_IF_OPER_STATUS</name>
        <full_name>OID_IF_OPER_STATUS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.8']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="56" package="Default">
        <name>OID_IF_LAST_CHANGE</name>
        <full_name>OID_IF_LAST_CHANGE</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.9']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="58" package="Default">
        <name>OID_IF_IN_OCTETS</name>
        <full_name>OID_IF_IN_OCTETS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.10']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="59" package="Default">
        <name>OID_IF_IN_UNICAST_PACKETS</name>
        <full_name>OID_IF_IN_UNICAST_PACKETS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.11']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="60" package="Default">
        <name>OID_IF_IN_NON_UNICAST_PACKETS</name>
        <full_name>OID_IF_IN_NON_UNICAST_PACKETS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.12']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="61" package="Default">
        <name>OID_IF_IN_DISCARDS</name>
        <full_name>OID_IF_IN_DISCARDS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.13']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="62" package="Default">
        <name>OID_IF_IN_ERRORS</name>
        <full_name>OID_IF_IN_ERRORS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.14']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="63" package="Default">
        <name>OID_IF_IN_UNKNOWN_PROTOCOLS</name>
        <full_name>OID_IF_IN_UNKNOWN_PROTOCOLS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.15']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="65" package="Default">
        <name>OID_IF_OUT_OCTETS</name>
        <full_name>OID_IF_OUT_OCTETS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.16']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="66" package="Default">
        <name>OID_IF_OUT_UNICAST_PACKETS</name>
        <full_name>OID_IF_OUT_UNICAST_PACKETS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.17']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="67" package="Default">
        <name>OID_IF_OUT_NON_UNICAST_PACKETS</name>
        <full_name>OID_IF_OUT_NON_UNICAST_PACKETS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.18']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="68" package="Default">
        <name>OID_IF_OUT_DISCARDS</name>
        <full_name>OID_IF_OUT_DISCARDS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.19']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="69" package="Default">
        <name>OID_IF_OUT_ERRORS</name>
        <full_name>OID_IF_OUT_ERRORS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.20']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="70" package="Default">
        <name>OID_IF_OUT_QUEUE_LENGTH</name>
        <full_name>OID_IF_OUT_QUEUE_LENGTH</full_name>
        <value><![CDATA['.1.3.6.1.2.1.2.2.1.21']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="72" package="Default">
        <name>OID_IF_NAME</name>
        <full_name>OID_IF_NAME</full_name>
        <value><![CDATA['.1.3.6.1.2.1.31.1.1.1.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="73" package="Default">
        <name>OID_IF_HIGH_SPEED</name>
        <full_name>OID_IF_HIGH_SPEED</full_name>
        <value><![CDATA['.1.3.6.1.2.1.31.1.1.1.15']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="74" package="Default">
        <name>OID_IF_ALIAS</name>
        <full_name>OID_IF_ALIAS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.31.1.1.1.18']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="127" package="Default">
        <name>IF_ADMIN_STATUS_UP</name>
        <full_name>IF_ADMIN_STATUS_UP</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="123">
          <description><![CDATA[Constant for possible value of interface admin status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="see" description="\OSS_SNMP\MIBS\adminStates()" refers="\OSS_SNMP\MIBS\adminStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="133" package="Default">
        <name>IF_ADMIN_STATUS_DOWN</name>
        <full_name>IF_ADMIN_STATUS_DOWN</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="129">
          <description><![CDATA[Constant for possible value of interface admin status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="129" name="see" description="\OSS_SNMP\MIBS\adminStates()" refers="\OSS_SNMP\MIBS\adminStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="139" package="Default">
        <name>IF_ADMIN_STATUS_TESTING</name>
        <full_name>IF_ADMIN_STATUS_TESTING</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="135">
          <description><![CDATA[Constant for possible value of interface admin status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="see" description="\OSS_SNMP\MIBS\adminStates()" refers="\OSS_SNMP\MIBS\adminStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="534" package="Default">
        <name>IF_OPER_STATUS_UP</name>
        <full_name>IF_OPER_STATUS_UP</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="530">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="530" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="539" package="Default">
        <name>IF_OPER_STATUS_DOWN</name>
        <full_name>IF_OPER_STATUS_DOWN</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="535">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="535" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="544" package="Default">
        <name>IF_OPER_STATUS_TESTING</name>
        <full_name>IF_OPER_STATUS_TESTING</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="540">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="540" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="549" package="Default">
        <name>IF_OPER_STATUS_UNKNOWN</name>
        <full_name>IF_OPER_STATUS_UNKNOWN</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="545">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="545" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="554" package="Default">
        <name>IF_OPER_STATUS_DORMANT</name>
        <full_name>IF_OPER_STATUS_DORMANT</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="550">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="550" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="559" package="Default">
        <name>IF_OPER_STATUS_NOT_PRESENT</name>
        <full_name>IF_OPER_STATUS_NOT_PRESENT</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="555">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="555" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="565" package="Default">
        <name>IF_OPER_STATUS_LOWER_LAYER_DOWN</name>
        <full_name>IF_OPER_STATUS_LOWER_LAYER_DOWN</full_name>
        <value><![CDATA[7]]></value>
        <docblock line="561">
          <description><![CDATA[Constant for possible value of interface operation status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="561" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="614" package="Default">
        <name>IF_TYPE_OTHER</name>
        <full_name>IF_TYPE_OTHER</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="610">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="610" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="620" package="Default">
        <name>IF_TYPE_REGULAR1822</name>
        <full_name>IF_TYPE_REGULAR1822</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="616">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="616" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="626" package="Default">
        <name>IF_TYPE_HDH1822</name>
        <full_name>IF_TYPE_HDH1822</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="622">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="622" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="632" package="Default">
        <name>IF_TYPE_DDNX25</name>
        <full_name>IF_TYPE_DDNX25</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="628">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="628" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="638" package="Default">
        <name>IF_TYPE_RFC877X25</name>
        <full_name>IF_TYPE_RFC877X25</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="634">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="634" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="644" package="Default">
        <name>IF_TYPE_ETHERNETCSMACD</name>
        <full_name>IF_TYPE_ETHERNETCSMACD</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="640">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="640" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="650" package="Default">
        <name>IF_TYPE_ISO88023CSMACD</name>
        <full_name>IF_TYPE_ISO88023CSMACD</full_name>
        <value><![CDATA[7]]></value>
        <docblock line="646">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="646" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="656" package="Default">
        <name>IF_TYPE_ISO88024TOKENBUS</name>
        <full_name>IF_TYPE_ISO88024TOKENBUS</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="652">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="652" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="662" package="Default">
        <name>IF_TYPE_ISO88025TOKENRING</name>
        <full_name>IF_TYPE_ISO88025TOKENRING</full_name>
        <value><![CDATA[9]]></value>
        <docblock line="658">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="658" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="668" package="Default">
        <name>IF_TYPE_ISO88026MAN</name>
        <full_name>IF_TYPE_ISO88026MAN</full_name>
        <value><![CDATA[10]]></value>
        <docblock line="664">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="664" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="674" package="Default">
        <name>IF_TYPE_STARLAN</name>
        <full_name>IF_TYPE_STARLAN</full_name>
        <value><![CDATA[11]]></value>
        <docblock line="670">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="670" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="680" package="Default">
        <name>IF_TYPE_PROTEON10MBIT</name>
        <full_name>IF_TYPE_PROTEON10MBIT</full_name>
        <value><![CDATA[12]]></value>
        <docblock line="676">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="676" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="686" package="Default">
        <name>IF_TYPE_PROTEON80MBIT</name>
        <full_name>IF_TYPE_PROTEON80MBIT</full_name>
        <value><![CDATA[13]]></value>
        <docblock line="682">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="682" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="692" package="Default">
        <name>IF_TYPE_HYPERCHANNEL</name>
        <full_name>IF_TYPE_HYPERCHANNEL</full_name>
        <value><![CDATA[14]]></value>
        <docblock line="688">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="688" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="698" package="Default">
        <name>IF_TYPE_FDDI</name>
        <full_name>IF_TYPE_FDDI</full_name>
        <value><![CDATA[15]]></value>
        <docblock line="694">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="694" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="704" package="Default">
        <name>IF_TYPE_LAPB</name>
        <full_name>IF_TYPE_LAPB</full_name>
        <value><![CDATA[16]]></value>
        <docblock line="700">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="700" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="710" package="Default">
        <name>IF_TYPE_SDLC</name>
        <full_name>IF_TYPE_SDLC</full_name>
        <value><![CDATA[17]]></value>
        <docblock line="706">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="706" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="716" package="Default">
        <name>IF_TYPE_DS1</name>
        <full_name>IF_TYPE_DS1</full_name>
        <value><![CDATA[18]]></value>
        <docblock line="712">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="712" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="722" package="Default">
        <name>IF_TYPE_E1</name>
        <full_name>IF_TYPE_E1</full_name>
        <value><![CDATA[19]]></value>
        <docblock line="718">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="718" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="728" package="Default">
        <name>IF_TYPE_BASICISDN</name>
        <full_name>IF_TYPE_BASICISDN</full_name>
        <value><![CDATA[20]]></value>
        <docblock line="724">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="724" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="734" package="Default">
        <name>IF_TYPE_PRIMARYISDN</name>
        <full_name>IF_TYPE_PRIMARYISDN</full_name>
        <value><![CDATA[21]]></value>
        <docblock line="730">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="730" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="740" package="Default">
        <name>IF_TYPE_PROPPOINTTOPOINTSERIAL</name>
        <full_name>IF_TYPE_PROPPOINTTOPOINTSERIAL</full_name>
        <value><![CDATA[22]]></value>
        <docblock line="736">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="736" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="746" package="Default">
        <name>IF_TYPE_PPP</name>
        <full_name>IF_TYPE_PPP</full_name>
        <value><![CDATA[23]]></value>
        <docblock line="742">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="742" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="752" package="Default">
        <name>IF_TYPE_SOFTWARELOOPBACK</name>
        <full_name>IF_TYPE_SOFTWARELOOPBACK</full_name>
        <value><![CDATA[24]]></value>
        <docblock line="748">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="748" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="758" package="Default">
        <name>IF_TYPE_EON</name>
        <full_name>IF_TYPE_EON</full_name>
        <value><![CDATA[25]]></value>
        <docblock line="754">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="754" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="764" package="Default">
        <name>IF_TYPE_ETHERNET3MBIT</name>
        <full_name>IF_TYPE_ETHERNET3MBIT</full_name>
        <value><![CDATA[26]]></value>
        <docblock line="760">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="760" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="770" package="Default">
        <name>IF_TYPE_NSIP</name>
        <full_name>IF_TYPE_NSIP</full_name>
        <value><![CDATA[27]]></value>
        <docblock line="766">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="766" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="776" package="Default">
        <name>IF_TYPE_SLIP</name>
        <full_name>IF_TYPE_SLIP</full_name>
        <value><![CDATA[28]]></value>
        <docblock line="772">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="772" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="782" package="Default">
        <name>IF_TYPE_ULTRA</name>
        <full_name>IF_TYPE_ULTRA</full_name>
        <value><![CDATA[29]]></value>
        <docblock line="778">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="778" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="788" package="Default">
        <name>IF_TYPE_DS3</name>
        <full_name>IF_TYPE_DS3</full_name>
        <value><![CDATA[30]]></value>
        <docblock line="784">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="784" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="794" package="Default">
        <name>IF_TYPE_SIP</name>
        <full_name>IF_TYPE_SIP</full_name>
        <value><![CDATA[31]]></value>
        <docblock line="790">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="790" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="800" package="Default">
        <name>IF_TYPE_FRAMERELAY</name>
        <full_name>IF_TYPE_FRAMERELAY</full_name>
        <value><![CDATA[32]]></value>
        <docblock line="796">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="796" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="806" package="Default">
        <name>IF_TYPE_RS232</name>
        <full_name>IF_TYPE_RS232</full_name>
        <value><![CDATA[33]]></value>
        <docblock line="802">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="802" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="812" package="Default">
        <name>IF_TYPE_PARA</name>
        <full_name>IF_TYPE_PARA</full_name>
        <value><![CDATA[34]]></value>
        <docblock line="808">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="808" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="818" package="Default">
        <name>IF_TYPE_ARCNET</name>
        <full_name>IF_TYPE_ARCNET</full_name>
        <value><![CDATA[35]]></value>
        <docblock line="814">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="814" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="824" package="Default">
        <name>IF_TYPE_ARCNETPLUS</name>
        <full_name>IF_TYPE_ARCNETPLUS</full_name>
        <value><![CDATA[36]]></value>
        <docblock line="820">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="820" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="830" package="Default">
        <name>IF_TYPE_ATM</name>
        <full_name>IF_TYPE_ATM</full_name>
        <value><![CDATA[37]]></value>
        <docblock line="826">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="826" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="836" package="Default">
        <name>IF_TYPE_MIOX25</name>
        <full_name>IF_TYPE_MIOX25</full_name>
        <value><![CDATA[38]]></value>
        <docblock line="832">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="832" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="842" package="Default">
        <name>IF_TYPE_SONET</name>
        <full_name>IF_TYPE_SONET</full_name>
        <value><![CDATA[39]]></value>
        <docblock line="838">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="838" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="848" package="Default">
        <name>IF_TYPE_X25PLE</name>
        <full_name>IF_TYPE_X25PLE</full_name>
        <value><![CDATA[40]]></value>
        <docblock line="844">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="844" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="854" package="Default">
        <name>IF_TYPE_ISO88022LLC</name>
        <full_name>IF_TYPE_ISO88022LLC</full_name>
        <value><![CDATA[41]]></value>
        <docblock line="850">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="850" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="860" package="Default">
        <name>IF_TYPE_LOCALTALK</name>
        <full_name>IF_TYPE_LOCALTALK</full_name>
        <value><![CDATA[42]]></value>
        <docblock line="856">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="856" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="866" package="Default">
        <name>IF_TYPE_SMDSDXI</name>
        <full_name>IF_TYPE_SMDSDXI</full_name>
        <value><![CDATA[43]]></value>
        <docblock line="862">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="862" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="872" package="Default">
        <name>IF_TYPE_FRAMERELAYSERVICE</name>
        <full_name>IF_TYPE_FRAMERELAYSERVICE</full_name>
        <value><![CDATA[44]]></value>
        <docblock line="868">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="868" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="878" package="Default">
        <name>IF_TYPE_V35</name>
        <full_name>IF_TYPE_V35</full_name>
        <value><![CDATA[45]]></value>
        <docblock line="874">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="874" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="884" package="Default">
        <name>IF_TYPE_HSSI</name>
        <full_name>IF_TYPE_HSSI</full_name>
        <value><![CDATA[46]]></value>
        <docblock line="880">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="880" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="890" package="Default">
        <name>IF_TYPE_HIPPI</name>
        <full_name>IF_TYPE_HIPPI</full_name>
        <value><![CDATA[47]]></value>
        <docblock line="886">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="886" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="896" package="Default">
        <name>IF_TYPE_MODEM</name>
        <full_name>IF_TYPE_MODEM</full_name>
        <value><![CDATA[48]]></value>
        <docblock line="892">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="892" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="902" package="Default">
        <name>IF_TYPE_AAL5</name>
        <full_name>IF_TYPE_AAL5</full_name>
        <value><![CDATA[49]]></value>
        <docblock line="898">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="898" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="908" package="Default">
        <name>IF_TYPE_SONETPATH</name>
        <full_name>IF_TYPE_SONETPATH</full_name>
        <value><![CDATA[50]]></value>
        <docblock line="904">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="904" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="914" package="Default">
        <name>IF_TYPE_SONETVT</name>
        <full_name>IF_TYPE_SONETVT</full_name>
        <value><![CDATA[51]]></value>
        <docblock line="910">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="910" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="920" package="Default">
        <name>IF_TYPE_SMDSICIP</name>
        <full_name>IF_TYPE_SMDSICIP</full_name>
        <value><![CDATA[52]]></value>
        <docblock line="916">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="916" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="926" package="Default">
        <name>IF_TYPE_PROPVIRTUAL</name>
        <full_name>IF_TYPE_PROPVIRTUAL</full_name>
        <value><![CDATA[53]]></value>
        <docblock line="922">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="922" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="932" package="Default">
        <name>IF_TYPE_PROPMULTIPLEXOR</name>
        <full_name>IF_TYPE_PROPMULTIPLEXOR</full_name>
        <value><![CDATA[54]]></value>
        <docblock line="928">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="928" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="938" package="Default">
        <name>IF_TYPE_IEEE80212</name>
        <full_name>IF_TYPE_IEEE80212</full_name>
        <value><![CDATA[55]]></value>
        <docblock line="934">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="934" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="944" package="Default">
        <name>IF_TYPE_FIBRECHANNEL</name>
        <full_name>IF_TYPE_FIBRECHANNEL</full_name>
        <value><![CDATA[56]]></value>
        <docblock line="940">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="940" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="950" package="Default">
        <name>IF_TYPE_HIPPIINTERFACE</name>
        <full_name>IF_TYPE_HIPPIINTERFACE</full_name>
        <value><![CDATA[57]]></value>
        <docblock line="946">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="946" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="956" package="Default">
        <name>IF_TYPE_FRAMERELAYINTERCONNECT</name>
        <full_name>IF_TYPE_FRAMERELAYINTERCONNECT</full_name>
        <value><![CDATA[58]]></value>
        <docblock line="952">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="952" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="962" package="Default">
        <name>IF_TYPE_AFLANE8023</name>
        <full_name>IF_TYPE_AFLANE8023</full_name>
        <value><![CDATA[59]]></value>
        <docblock line="958">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="958" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="968" package="Default">
        <name>IF_TYPE_AFLANE8025</name>
        <full_name>IF_TYPE_AFLANE8025</full_name>
        <value><![CDATA[60]]></value>
        <docblock line="964">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="964" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="974" package="Default">
        <name>IF_TYPE_CCTEMUL</name>
        <full_name>IF_TYPE_CCTEMUL</full_name>
        <value><![CDATA[61]]></value>
        <docblock line="970">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="970" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="980" package="Default">
        <name>IF_TYPE_FASTETHER</name>
        <full_name>IF_TYPE_FASTETHER</full_name>
        <value><![CDATA[62]]></value>
        <docblock line="976">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="976" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="986" package="Default">
        <name>IF_TYPE_ISDN</name>
        <full_name>IF_TYPE_ISDN</full_name>
        <value><![CDATA[63]]></value>
        <docblock line="982">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="982" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="992" package="Default">
        <name>IF_TYPE_V11</name>
        <full_name>IF_TYPE_V11</full_name>
        <value><![CDATA[64]]></value>
        <docblock line="988">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="988" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="998" package="Default">
        <name>IF_TYPE_V36</name>
        <full_name>IF_TYPE_V36</full_name>
        <value><![CDATA[65]]></value>
        <docblock line="994">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="994" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1004" package="Default">
        <name>IF_TYPE_G703AT64K</name>
        <full_name>IF_TYPE_G703AT64K</full_name>
        <value><![CDATA[66]]></value>
        <docblock line="1000">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1000" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1010" package="Default">
        <name>IF_TYPE_G703AT2MB</name>
        <full_name>IF_TYPE_G703AT2MB</full_name>
        <value><![CDATA[67]]></value>
        <docblock line="1006">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1006" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1016" package="Default">
        <name>IF_TYPE_QLLC</name>
        <full_name>IF_TYPE_QLLC</full_name>
        <value><![CDATA[68]]></value>
        <docblock line="1012">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1012" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1022" package="Default">
        <name>IF_TYPE_FASTETHERFX</name>
        <full_name>IF_TYPE_FASTETHERFX</full_name>
        <value><![CDATA[69]]></value>
        <docblock line="1018">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1018" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1028" package="Default">
        <name>IF_TYPE_CHANNEL</name>
        <full_name>IF_TYPE_CHANNEL</full_name>
        <value><![CDATA[70]]></value>
        <docblock line="1024">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1024" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1034" package="Default">
        <name>IF_TYPE_IEEE80211</name>
        <full_name>IF_TYPE_IEEE80211</full_name>
        <value><![CDATA[71]]></value>
        <docblock line="1030">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1030" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1040" package="Default">
        <name>IF_TYPE_IBM370PARCHAN</name>
        <full_name>IF_TYPE_IBM370PARCHAN</full_name>
        <value><![CDATA[72]]></value>
        <docblock line="1036">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1036" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1046" package="Default">
        <name>IF_TYPE_ESCON</name>
        <full_name>IF_TYPE_ESCON</full_name>
        <value><![CDATA[73]]></value>
        <docblock line="1042">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1042" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1052" package="Default">
        <name>IF_TYPE_DLSW</name>
        <full_name>IF_TYPE_DLSW</full_name>
        <value><![CDATA[74]]></value>
        <docblock line="1048">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1048" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1058" package="Default">
        <name>IF_TYPE_ISDNS</name>
        <full_name>IF_TYPE_ISDNS</full_name>
        <value><![CDATA[75]]></value>
        <docblock line="1054">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1054" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1064" package="Default">
        <name>IF_TYPE_ISDNU</name>
        <full_name>IF_TYPE_ISDNU</full_name>
        <value><![CDATA[76]]></value>
        <docblock line="1060">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1060" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1070" package="Default">
        <name>IF_TYPE_LAPD</name>
        <full_name>IF_TYPE_LAPD</full_name>
        <value><![CDATA[77]]></value>
        <docblock line="1066">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1066" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1076" package="Default">
        <name>IF_TYPE_IPSWITCH</name>
        <full_name>IF_TYPE_IPSWITCH</full_name>
        <value><![CDATA[78]]></value>
        <docblock line="1072">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1072" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1082" package="Default">
        <name>IF_TYPE_RSRB</name>
        <full_name>IF_TYPE_RSRB</full_name>
        <value><![CDATA[79]]></value>
        <docblock line="1078">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1078" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1088" package="Default">
        <name>IF_TYPE_ATMLOGICAL</name>
        <full_name>IF_TYPE_ATMLOGICAL</full_name>
        <value><![CDATA[80]]></value>
        <docblock line="1084">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1084" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1094" package="Default">
        <name>IF_TYPE_DS0</name>
        <full_name>IF_TYPE_DS0</full_name>
        <value><![CDATA[81]]></value>
        <docblock line="1090">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1090" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1100" package="Default">
        <name>IF_TYPE_DS0BUNDLE</name>
        <full_name>IF_TYPE_DS0BUNDLE</full_name>
        <value><![CDATA[82]]></value>
        <docblock line="1096">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1096" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1106" package="Default">
        <name>IF_TYPE_BSC</name>
        <full_name>IF_TYPE_BSC</full_name>
        <value><![CDATA[83]]></value>
        <docblock line="1102">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1102" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1112" package="Default">
        <name>IF_TYPE_ASYNC</name>
        <full_name>IF_TYPE_ASYNC</full_name>
        <value><![CDATA[84]]></value>
        <docblock line="1108">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1108" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1118" package="Default">
        <name>IF_TYPE_CNR</name>
        <full_name>IF_TYPE_CNR</full_name>
        <value><![CDATA[85]]></value>
        <docblock line="1114">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1114" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1124" package="Default">
        <name>IF_TYPE_ISO88025DTR</name>
        <full_name>IF_TYPE_ISO88025DTR</full_name>
        <value><![CDATA[86]]></value>
        <docblock line="1120">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1120" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1130" package="Default">
        <name>IF_TYPE_EPLRS</name>
        <full_name>IF_TYPE_EPLRS</full_name>
        <value><![CDATA[87]]></value>
        <docblock line="1126">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1126" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1136" package="Default">
        <name>IF_TYPE_ARAP</name>
        <full_name>IF_TYPE_ARAP</full_name>
        <value><![CDATA[88]]></value>
        <docblock line="1132">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1132" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1142" package="Default">
        <name>IF_TYPE_PROPCNLS</name>
        <full_name>IF_TYPE_PROPCNLS</full_name>
        <value><![CDATA[89]]></value>
        <docblock line="1138">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1138" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1148" package="Default">
        <name>IF_TYPE_HOSTPAD</name>
        <full_name>IF_TYPE_HOSTPAD</full_name>
        <value><![CDATA[90]]></value>
        <docblock line="1144">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1144" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1154" package="Default">
        <name>IF_TYPE_TERMPAD</name>
        <full_name>IF_TYPE_TERMPAD</full_name>
        <value><![CDATA[91]]></value>
        <docblock line="1150">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1150" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1160" package="Default">
        <name>IF_TYPE_FRAMERELAYMPI</name>
        <full_name>IF_TYPE_FRAMERELAYMPI</full_name>
        <value><![CDATA[92]]></value>
        <docblock line="1156">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1156" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1166" package="Default">
        <name>IF_TYPE_X213</name>
        <full_name>IF_TYPE_X213</full_name>
        <value><![CDATA[93]]></value>
        <docblock line="1162">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1162" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1172" package="Default">
        <name>IF_TYPE_ADSL</name>
        <full_name>IF_TYPE_ADSL</full_name>
        <value><![CDATA[94]]></value>
        <docblock line="1168">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1168" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1178" package="Default">
        <name>IF_TYPE_RADSL</name>
        <full_name>IF_TYPE_RADSL</full_name>
        <value><![CDATA[95]]></value>
        <docblock line="1174">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1174" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1184" package="Default">
        <name>IF_TYPE_SDSL</name>
        <full_name>IF_TYPE_SDSL</full_name>
        <value><![CDATA[96]]></value>
        <docblock line="1180">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1180" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1190" package="Default">
        <name>IF_TYPE_VDSL</name>
        <full_name>IF_TYPE_VDSL</full_name>
        <value><![CDATA[97]]></value>
        <docblock line="1186">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1186" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1196" package="Default">
        <name>IF_TYPE_ISO88025CRFPINT</name>
        <full_name>IF_TYPE_ISO88025CRFPINT</full_name>
        <value><![CDATA[98]]></value>
        <docblock line="1192">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1192" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1202" package="Default">
        <name>IF_TYPE_MYRINET</name>
        <full_name>IF_TYPE_MYRINET</full_name>
        <value><![CDATA[99]]></value>
        <docblock line="1198">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1198" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1208" package="Default">
        <name>IF_TYPE_VOICEEM</name>
        <full_name>IF_TYPE_VOICEEM</full_name>
        <value><![CDATA[100]]></value>
        <docblock line="1204">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1204" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1214" package="Default">
        <name>IF_TYPE_VOICEFXO</name>
        <full_name>IF_TYPE_VOICEFXO</full_name>
        <value><![CDATA[101]]></value>
        <docblock line="1210">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1210" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1220" package="Default">
        <name>IF_TYPE_VOICEFXS</name>
        <full_name>IF_TYPE_VOICEFXS</full_name>
        <value><![CDATA[102]]></value>
        <docblock line="1216">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1216" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1226" package="Default">
        <name>IF_TYPE_VOICEENCAP</name>
        <full_name>IF_TYPE_VOICEENCAP</full_name>
        <value><![CDATA[103]]></value>
        <docblock line="1222">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1222" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1232" package="Default">
        <name>IF_TYPE_VOICEOVERIP</name>
        <full_name>IF_TYPE_VOICEOVERIP</full_name>
        <value><![CDATA[104]]></value>
        <docblock line="1228">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1228" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1238" package="Default">
        <name>IF_TYPE_ATMDXI</name>
        <full_name>IF_TYPE_ATMDXI</full_name>
        <value><![CDATA[105]]></value>
        <docblock line="1234">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1234" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1244" package="Default">
        <name>IF_TYPE_ATMFUNI</name>
        <full_name>IF_TYPE_ATMFUNI</full_name>
        <value><![CDATA[106]]></value>
        <docblock line="1240">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1240" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1250" package="Default">
        <name>IF_TYPE_ATMIMA</name>
        <full_name>IF_TYPE_ATMIMA</full_name>
        <value><![CDATA[107]]></value>
        <docblock line="1246">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1246" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1256" package="Default">
        <name>IF_TYPE_PPPMULTILINKBUNDLE</name>
        <full_name>IF_TYPE_PPPMULTILINKBUNDLE</full_name>
        <value><![CDATA[108]]></value>
        <docblock line="1252">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1252" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1262" package="Default">
        <name>IF_TYPE_IPOVERCDLC</name>
        <full_name>IF_TYPE_IPOVERCDLC</full_name>
        <value><![CDATA[109]]></value>
        <docblock line="1258">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1258" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1268" package="Default">
        <name>IF_TYPE_IPOVERCLAW</name>
        <full_name>IF_TYPE_IPOVERCLAW</full_name>
        <value><![CDATA[110]]></value>
        <docblock line="1264">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1264" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1274" package="Default">
        <name>IF_TYPE_STACKTOSTACK</name>
        <full_name>IF_TYPE_STACKTOSTACK</full_name>
        <value><![CDATA[111]]></value>
        <docblock line="1270">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1270" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1280" package="Default">
        <name>IF_TYPE_VIRTUALIPADDRESS</name>
        <full_name>IF_TYPE_VIRTUALIPADDRESS</full_name>
        <value><![CDATA[112]]></value>
        <docblock line="1276">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1276" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1286" package="Default">
        <name>IF_TYPE_MPC</name>
        <full_name>IF_TYPE_MPC</full_name>
        <value><![CDATA[113]]></value>
        <docblock line="1282">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1282" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1292" package="Default">
        <name>IF_TYPE_IPOVERATM</name>
        <full_name>IF_TYPE_IPOVERATM</full_name>
        <value><![CDATA[114]]></value>
        <docblock line="1288">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1288" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1298" package="Default">
        <name>IF_TYPE_ISO88025FIBER</name>
        <full_name>IF_TYPE_ISO88025FIBER</full_name>
        <value><![CDATA[115]]></value>
        <docblock line="1294">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1294" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1304" package="Default">
        <name>IF_TYPE_TDLC</name>
        <full_name>IF_TYPE_TDLC</full_name>
        <value><![CDATA[116]]></value>
        <docblock line="1300">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1300" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1310" package="Default">
        <name>IF_TYPE_GIGABITETHERNET</name>
        <full_name>IF_TYPE_GIGABITETHERNET</full_name>
        <value><![CDATA[117]]></value>
        <docblock line="1306">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1306" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1316" package="Default">
        <name>IF_TYPE_HDLC</name>
        <full_name>IF_TYPE_HDLC</full_name>
        <value><![CDATA[118]]></value>
        <docblock line="1312">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1312" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1322" package="Default">
        <name>IF_TYPE_LAPF</name>
        <full_name>IF_TYPE_LAPF</full_name>
        <value><![CDATA[119]]></value>
        <docblock line="1318">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1318" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1328" package="Default">
        <name>IF_TYPE_V37</name>
        <full_name>IF_TYPE_V37</full_name>
        <value><![CDATA[120]]></value>
        <docblock line="1324">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1324" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1334" package="Default">
        <name>IF_TYPE_X25MLP</name>
        <full_name>IF_TYPE_X25MLP</full_name>
        <value><![CDATA[121]]></value>
        <docblock line="1330">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1330" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1340" package="Default">
        <name>IF_TYPE_X25HUNTGROUP</name>
        <full_name>IF_TYPE_X25HUNTGROUP</full_name>
        <value><![CDATA[122]]></value>
        <docblock line="1336">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1336" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1346" package="Default">
        <name>IF_TYPE_TRASNPHDLC</name>
        <full_name>IF_TYPE_TRASNPHDLC</full_name>
        <value><![CDATA[123]]></value>
        <docblock line="1342">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1342" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1352" package="Default">
        <name>IF_TYPE_INTERLEAVE</name>
        <full_name>IF_TYPE_INTERLEAVE</full_name>
        <value><![CDATA[124]]></value>
        <docblock line="1348">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1348" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1358" package="Default">
        <name>IF_TYPE_FAST</name>
        <full_name>IF_TYPE_FAST</full_name>
        <value><![CDATA[125]]></value>
        <docblock line="1354">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1354" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1364" package="Default">
        <name>IF_TYPE_IP</name>
        <full_name>IF_TYPE_IP</full_name>
        <value><![CDATA[126]]></value>
        <docblock line="1360">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1360" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1370" package="Default">
        <name>IF_TYPE_DOCSCABLEMACLAYER</name>
        <full_name>IF_TYPE_DOCSCABLEMACLAYER</full_name>
        <value><![CDATA[127]]></value>
        <docblock line="1366">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1366" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1376" package="Default">
        <name>IF_TYPE_DOCSCABLEDOWNSTREAM</name>
        <full_name>IF_TYPE_DOCSCABLEDOWNSTREAM</full_name>
        <value><![CDATA[128]]></value>
        <docblock line="1372">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1372" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1382" package="Default">
        <name>IF_TYPE_DOCSCABLEUPSTREAM</name>
        <full_name>IF_TYPE_DOCSCABLEUPSTREAM</full_name>
        <value><![CDATA[129]]></value>
        <docblock line="1378">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1378" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1388" package="Default">
        <name>IF_TYPE_A12MPPSWITCH</name>
        <full_name>IF_TYPE_A12MPPSWITCH</full_name>
        <value><![CDATA[130]]></value>
        <docblock line="1384">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1384" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1394" package="Default">
        <name>IF_TYPE_TUNNEL</name>
        <full_name>IF_TYPE_TUNNEL</full_name>
        <value><![CDATA[131]]></value>
        <docblock line="1390">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1390" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1400" package="Default">
        <name>IF_TYPE_COFFEE</name>
        <full_name>IF_TYPE_COFFEE</full_name>
        <value><![CDATA[132]]></value>
        <docblock line="1396">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1396" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1406" package="Default">
        <name>IF_TYPE_CES</name>
        <full_name>IF_TYPE_CES</full_name>
        <value><![CDATA[133]]></value>
        <docblock line="1402">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1402" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1412" package="Default">
        <name>IF_TYPE_ATMSUBINTERFACE</name>
        <full_name>IF_TYPE_ATMSUBINTERFACE</full_name>
        <value><![CDATA[134]]></value>
        <docblock line="1408">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1408" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1418" package="Default">
        <name>IF_TYPE_L2VLAN</name>
        <full_name>IF_TYPE_L2VLAN</full_name>
        <value><![CDATA[135]]></value>
        <docblock line="1414">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1414" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1424" package="Default">
        <name>IF_TYPE_L3IPVLAN</name>
        <full_name>IF_TYPE_L3IPVLAN</full_name>
        <value><![CDATA[136]]></value>
        <docblock line="1420">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1420" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1430" package="Default">
        <name>IF_TYPE_L3IPXVLAN</name>
        <full_name>IF_TYPE_L3IPXVLAN</full_name>
        <value><![CDATA[137]]></value>
        <docblock line="1426">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1426" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1436" package="Default">
        <name>IF_TYPE_DIGITALPOWERLINE</name>
        <full_name>IF_TYPE_DIGITALPOWERLINE</full_name>
        <value><![CDATA[138]]></value>
        <docblock line="1432">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1432" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1442" package="Default">
        <name>IF_TYPE_MEDIAMAILOVERIP</name>
        <full_name>IF_TYPE_MEDIAMAILOVERIP</full_name>
        <value><![CDATA[139]]></value>
        <docblock line="1438">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1438" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1448" package="Default">
        <name>IF_TYPE_DTM</name>
        <full_name>IF_TYPE_DTM</full_name>
        <value><![CDATA[140]]></value>
        <docblock line="1444">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1444" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1454" package="Default">
        <name>IF_TYPE_DCN</name>
        <full_name>IF_TYPE_DCN</full_name>
        <value><![CDATA[141]]></value>
        <docblock line="1450">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1450" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1460" package="Default">
        <name>IF_TYPE_IPFORWARD</name>
        <full_name>IF_TYPE_IPFORWARD</full_name>
        <value><![CDATA[142]]></value>
        <docblock line="1456">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1456" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1466" package="Default">
        <name>IF_TYPE_MSDSL</name>
        <full_name>IF_TYPE_MSDSL</full_name>
        <value><![CDATA[143]]></value>
        <docblock line="1462">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1462" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1472" package="Default">
        <name>IF_TYPE_IEEE1394</name>
        <full_name>IF_TYPE_IEEE1394</full_name>
        <value><![CDATA[144]]></value>
        <docblock line="1468">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1468" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1478" package="Default">
        <name>IF_TYPE_IF_GSN</name>
        <full_name>IF_TYPE_IF_GSN</full_name>
        <value><![CDATA[145]]></value>
        <docblock line="1474">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1474" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1484" package="Default">
        <name>IF_TYPE_DVBRCCMACLAYER</name>
        <full_name>IF_TYPE_DVBRCCMACLAYER</full_name>
        <value><![CDATA[146]]></value>
        <docblock line="1480">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1480" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1490" package="Default">
        <name>IF_TYPE_DVBRCCDOWNSTREAM</name>
        <full_name>IF_TYPE_DVBRCCDOWNSTREAM</full_name>
        <value><![CDATA[147]]></value>
        <docblock line="1486">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1486" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1496" package="Default">
        <name>IF_TYPE_DVBRCCUPSTREAM</name>
        <full_name>IF_TYPE_DVBRCCUPSTREAM</full_name>
        <value><![CDATA[148]]></value>
        <docblock line="1492">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1492" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1502" package="Default">
        <name>IF_TYPE_ATMVIRTUAL</name>
        <full_name>IF_TYPE_ATMVIRTUAL</full_name>
        <value><![CDATA[149]]></value>
        <docblock line="1498">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1498" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1508" package="Default">
        <name>IF_TYPE_MPLSTUNNEL</name>
        <full_name>IF_TYPE_MPLSTUNNEL</full_name>
        <value><![CDATA[150]]></value>
        <docblock line="1504">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1504" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1514" package="Default">
        <name>IF_TYPE_SRP</name>
        <full_name>IF_TYPE_SRP</full_name>
        <value><![CDATA[151]]></value>
        <docblock line="1510">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1510" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1520" package="Default">
        <name>IF_TYPE_VOICEOVERATM</name>
        <full_name>IF_TYPE_VOICEOVERATM</full_name>
        <value><![CDATA[152]]></value>
        <docblock line="1516">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1516" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1526" package="Default">
        <name>IF_TYPE_VOICEOVERFRAMERELAY</name>
        <full_name>IF_TYPE_VOICEOVERFRAMERELAY</full_name>
        <value><![CDATA[153]]></value>
        <docblock line="1522">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1522" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1532" package="Default">
        <name>IF_TYPE_IDSL</name>
        <full_name>IF_TYPE_IDSL</full_name>
        <value><![CDATA[154]]></value>
        <docblock line="1528">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1528" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1538" package="Default">
        <name>IF_TYPE_COMPOSITELINK</name>
        <full_name>IF_TYPE_COMPOSITELINK</full_name>
        <value><![CDATA[155]]></value>
        <docblock line="1534">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1534" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1544" package="Default">
        <name>IF_TYPE_SS7SIGLINK</name>
        <full_name>IF_TYPE_SS7SIGLINK</full_name>
        <value><![CDATA[156]]></value>
        <docblock line="1540">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1540" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1550" package="Default">
        <name>IF_TYPE_PROPWIRELESSP2P</name>
        <full_name>IF_TYPE_PROPWIRELESSP2P</full_name>
        <value><![CDATA[157]]></value>
        <docblock line="1546">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1546" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1556" package="Default">
        <name>IF_TYPE_FRFORWARD</name>
        <full_name>IF_TYPE_FRFORWARD</full_name>
        <value><![CDATA[158]]></value>
        <docblock line="1552">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1552" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1562" package="Default">
        <name>IF_TYPE_RFC1483</name>
        <full_name>IF_TYPE_RFC1483</full_name>
        <value><![CDATA[159]]></value>
        <docblock line="1558">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1558" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1568" package="Default">
        <name>IF_TYPE_USB</name>
        <full_name>IF_TYPE_USB</full_name>
        <value><![CDATA[160]]></value>
        <docblock line="1564">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1564" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1574" package="Default">
        <name>IF_TYPE_IEEE8023ADLAG</name>
        <full_name>IF_TYPE_IEEE8023ADLAG</full_name>
        <value><![CDATA[161]]></value>
        <docblock line="1570">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1570" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1580" package="Default">
        <name>IF_TYPE_BGPPOLICYACCOUNTING</name>
        <full_name>IF_TYPE_BGPPOLICYACCOUNTING</full_name>
        <value><![CDATA[162]]></value>
        <docblock line="1576">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1576" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1586" package="Default">
        <name>IF_TYPE_FRF16MFRBUNDLE</name>
        <full_name>IF_TYPE_FRF16MFRBUNDLE</full_name>
        <value><![CDATA[163]]></value>
        <docblock line="1582">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1582" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1592" package="Default">
        <name>IF_TYPE_H323GATEKEEPER</name>
        <full_name>IF_TYPE_H323GATEKEEPER</full_name>
        <value><![CDATA[164]]></value>
        <docblock line="1588">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1588" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1598" package="Default">
        <name>IF_TYPE_H323PROXY</name>
        <full_name>IF_TYPE_H323PROXY</full_name>
        <value><![CDATA[165]]></value>
        <docblock line="1594">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1594" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1604" package="Default">
        <name>IF_TYPE_MPLS</name>
        <full_name>IF_TYPE_MPLS</full_name>
        <value><![CDATA[166]]></value>
        <docblock line="1600">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1600" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1610" package="Default">
        <name>IF_TYPE_MFSIGLINK</name>
        <full_name>IF_TYPE_MFSIGLINK</full_name>
        <value><![CDATA[167]]></value>
        <docblock line="1606">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1606" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1616" package="Default">
        <name>IF_TYPE_HDSL2</name>
        <full_name>IF_TYPE_HDSL2</full_name>
        <value><![CDATA[168]]></value>
        <docblock line="1612">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1612" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1622" package="Default">
        <name>IF_TYPE_SHDSL</name>
        <full_name>IF_TYPE_SHDSL</full_name>
        <value><![CDATA[169]]></value>
        <docblock line="1618">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1618" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1628" package="Default">
        <name>IF_TYPE_DS1FDL</name>
        <full_name>IF_TYPE_DS1FDL</full_name>
        <value><![CDATA[170]]></value>
        <docblock line="1624">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1624" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1634" package="Default">
        <name>IF_TYPE_POS</name>
        <full_name>IF_TYPE_POS</full_name>
        <value><![CDATA[171]]></value>
        <docblock line="1630">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1630" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1640" package="Default">
        <name>IF_TYPE_DVBASIIN</name>
        <full_name>IF_TYPE_DVBASIIN</full_name>
        <value><![CDATA[172]]></value>
        <docblock line="1636">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1636" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1646" package="Default">
        <name>IF_TYPE_DVBASIOUT</name>
        <full_name>IF_TYPE_DVBASIOUT</full_name>
        <value><![CDATA[173]]></value>
        <docblock line="1642">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1642" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1652" package="Default">
        <name>IF_TYPE_PLC</name>
        <full_name>IF_TYPE_PLC</full_name>
        <value><![CDATA[174]]></value>
        <docblock line="1648">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1648" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1658" package="Default">
        <name>IF_TYPE_NFAS</name>
        <full_name>IF_TYPE_NFAS</full_name>
        <value><![CDATA[175]]></value>
        <docblock line="1654">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1654" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1664" package="Default">
        <name>IF_TYPE_TR008</name>
        <full_name>IF_TYPE_TR008</full_name>
        <value><![CDATA[176]]></value>
        <docblock line="1660">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1660" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1670" package="Default">
        <name>IF_TYPE_GR303RDT</name>
        <full_name>IF_TYPE_GR303RDT</full_name>
        <value><![CDATA[177]]></value>
        <docblock line="1666">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1666" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1676" package="Default">
        <name>IF_TYPE_GR303IDT</name>
        <full_name>IF_TYPE_GR303IDT</full_name>
        <value><![CDATA[178]]></value>
        <docblock line="1672">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1672" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1682" package="Default">
        <name>IF_TYPE_ISUP</name>
        <full_name>IF_TYPE_ISUP</full_name>
        <value><![CDATA[179]]></value>
        <docblock line="1678">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1678" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1688" package="Default">
        <name>IF_TYPE_PROPDOCSWIRELESSMACLAYER</name>
        <full_name>IF_TYPE_PROPDOCSWIRELESSMACLAYER</full_name>
        <value><![CDATA[180]]></value>
        <docblock line="1684">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1684" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1694" package="Default">
        <name>IF_TYPE_PROPDOCSWIRELESSDOWNSTREAM</name>
        <full_name>IF_TYPE_PROPDOCSWIRELESSDOWNSTREAM</full_name>
        <value><![CDATA[181]]></value>
        <docblock line="1690">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1690" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1700" package="Default">
        <name>IF_TYPE_PROPDOCSWIRELESSUPSTREAM</name>
        <full_name>IF_TYPE_PROPDOCSWIRELESSUPSTREAM</full_name>
        <value><![CDATA[182]]></value>
        <docblock line="1696">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1696" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1706" package="Default">
        <name>IF_TYPE_HIPERLAN2</name>
        <full_name>IF_TYPE_HIPERLAN2</full_name>
        <value><![CDATA[183]]></value>
        <docblock line="1702">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1702" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1712" package="Default">
        <name>IF_TYPE_PROPBWAP2MP</name>
        <full_name>IF_TYPE_PROPBWAP2MP</full_name>
        <value><![CDATA[184]]></value>
        <docblock line="1708">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1708" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1718" package="Default">
        <name>IF_TYPE_SONETOVERHEADCHANNEL</name>
        <full_name>IF_TYPE_SONETOVERHEADCHANNEL</full_name>
        <value><![CDATA[185]]></value>
        <docblock line="1714">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1714" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1724" package="Default">
        <name>IF_TYPE_DIGITALWRAPPEROVERHEADCHANNEL</name>
        <full_name>IF_TYPE_DIGITALWRAPPEROVERHEADCHANNEL</full_name>
        <value><![CDATA[186]]></value>
        <docblock line="1720">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1720" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1730" package="Default">
        <name>IF_TYPE_AAL2</name>
        <full_name>IF_TYPE_AAL2</full_name>
        <value><![CDATA[187]]></value>
        <docblock line="1726">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1726" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1736" package="Default">
        <name>IF_TYPE_RADIOMAC</name>
        <full_name>IF_TYPE_RADIOMAC</full_name>
        <value><![CDATA[188]]></value>
        <docblock line="1732">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1732" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1742" package="Default">
        <name>IF_TYPE_ATMRADIO</name>
        <full_name>IF_TYPE_ATMRADIO</full_name>
        <value><![CDATA[189]]></value>
        <docblock line="1738">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1738" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1748" package="Default">
        <name>IF_TYPE_IMT</name>
        <full_name>IF_TYPE_IMT</full_name>
        <value><![CDATA[190]]></value>
        <docblock line="1744">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1744" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1754" package="Default">
        <name>IF_TYPE_MVL</name>
        <full_name>IF_TYPE_MVL</full_name>
        <value><![CDATA[191]]></value>
        <docblock line="1750">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1750" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1760" package="Default">
        <name>IF_TYPE_REACHDSL</name>
        <full_name>IF_TYPE_REACHDSL</full_name>
        <value><![CDATA[192]]></value>
        <docblock line="1756">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1756" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1766" package="Default">
        <name>IF_TYPE_FRDLCIENDPT</name>
        <full_name>IF_TYPE_FRDLCIENDPT</full_name>
        <value><![CDATA[193]]></value>
        <docblock line="1762">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1762" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1772" package="Default">
        <name>IF_TYPE_ATMVCIENDPT</name>
        <full_name>IF_TYPE_ATMVCIENDPT</full_name>
        <value><![CDATA[194]]></value>
        <docblock line="1768">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1768" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1778" package="Default">
        <name>IF_TYPE_OPTICALCHANNEL</name>
        <full_name>IF_TYPE_OPTICALCHANNEL</full_name>
        <value><![CDATA[195]]></value>
        <docblock line="1774">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1774" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1784" package="Default">
        <name>IF_TYPE_OPTICALTRANSPORT</name>
        <full_name>IF_TYPE_OPTICALTRANSPORT</full_name>
        <value><![CDATA[196]]></value>
        <docblock line="1780">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1780" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1790" package="Default">
        <name>IF_TYPE_PROPATM</name>
        <full_name>IF_TYPE_PROPATM</full_name>
        <value><![CDATA[197]]></value>
        <docblock line="1786">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1786" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1796" package="Default">
        <name>IF_TYPE_VOICEOVERCABLE</name>
        <full_name>IF_TYPE_VOICEOVERCABLE</full_name>
        <value><![CDATA[198]]></value>
        <docblock line="1792">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1792" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1802" package="Default">
        <name>IF_TYPE_INFINIBAND</name>
        <full_name>IF_TYPE_INFINIBAND</full_name>
        <value><![CDATA[199]]></value>
        <docblock line="1798">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1798" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1808" package="Default">
        <name>IF_TYPE_TELINK</name>
        <full_name>IF_TYPE_TELINK</full_name>
        <value><![CDATA[200]]></value>
        <docblock line="1804">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1804" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1814" package="Default">
        <name>IF_TYPE_Q2931</name>
        <full_name>IF_TYPE_Q2931</full_name>
        <value><![CDATA[201]]></value>
        <docblock line="1810">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1810" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1820" package="Default">
        <name>IF_TYPE_VIRTUALTG</name>
        <full_name>IF_TYPE_VIRTUALTG</full_name>
        <value><![CDATA[202]]></value>
        <docblock line="1816">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1816" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1826" package="Default">
        <name>IF_TYPE_SIPTG</name>
        <full_name>IF_TYPE_SIPTG</full_name>
        <value><![CDATA[203]]></value>
        <docblock line="1822">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1822" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1832" package="Default">
        <name>IF_TYPE_SIPSIG</name>
        <full_name>IF_TYPE_SIPSIG</full_name>
        <value><![CDATA[204]]></value>
        <docblock line="1828">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1828" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1838" package="Default">
        <name>IF_TYPE_DOCSCABLEUPSTREAMCHANNEL</name>
        <full_name>IF_TYPE_DOCSCABLEUPSTREAMCHANNEL</full_name>
        <value><![CDATA[205]]></value>
        <docblock line="1834">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1834" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1844" package="Default">
        <name>IF_TYPE_ECONET</name>
        <full_name>IF_TYPE_ECONET</full_name>
        <value><![CDATA[206]]></value>
        <docblock line="1840">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1840" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1850" package="Default">
        <name>IF_TYPE_PON155</name>
        <full_name>IF_TYPE_PON155</full_name>
        <value><![CDATA[207]]></value>
        <docblock line="1846">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1846" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1856" package="Default">
        <name>IF_TYPE_PON622</name>
        <full_name>IF_TYPE_PON622</full_name>
        <value><![CDATA[208]]></value>
        <docblock line="1852">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1852" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1862" package="Default">
        <name>IF_TYPE_BRIDGE</name>
        <full_name>IF_TYPE_BRIDGE</full_name>
        <value><![CDATA[209]]></value>
        <docblock line="1858">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1858" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1868" package="Default">
        <name>IF_TYPE_LINEGROUP</name>
        <full_name>IF_TYPE_LINEGROUP</full_name>
        <value><![CDATA[210]]></value>
        <docblock line="1864">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1864" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1874" package="Default">
        <name>IF_TYPE_VOICEEMFGD</name>
        <full_name>IF_TYPE_VOICEEMFGD</full_name>
        <value><![CDATA[211]]></value>
        <docblock line="1870">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1870" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1880" package="Default">
        <name>IF_TYPE_VOICEFGDEANA</name>
        <full_name>IF_TYPE_VOICEFGDEANA</full_name>
        <value><![CDATA[212]]></value>
        <docblock line="1876">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1876" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1886" package="Default">
        <name>IF_TYPE_VOICEDID</name>
        <full_name>IF_TYPE_VOICEDID</full_name>
        <value><![CDATA[213]]></value>
        <docblock line="1882">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1882" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1892" package="Default">
        <name>IF_TYPE_MPEGTRANSPORT</name>
        <full_name>IF_TYPE_MPEGTRANSPORT</full_name>
        <value><![CDATA[214]]></value>
        <docblock line="1888">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1888" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1898" package="Default">
        <name>IF_TYPE_SIXTOFOUR</name>
        <full_name>IF_TYPE_SIXTOFOUR</full_name>
        <value><![CDATA[215]]></value>
        <docblock line="1894">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1894" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1904" package="Default">
        <name>IF_TYPE_GTP</name>
        <full_name>IF_TYPE_GTP</full_name>
        <value><![CDATA[216]]></value>
        <docblock line="1900">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1900" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1910" package="Default">
        <name>IF_TYPE_PDNETHERLOOP1</name>
        <full_name>IF_TYPE_PDNETHERLOOP1</full_name>
        <value><![CDATA[217]]></value>
        <docblock line="1906">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1906" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1916" package="Default">
        <name>IF_TYPE_PDNETHERLOOP2</name>
        <full_name>IF_TYPE_PDNETHERLOOP2</full_name>
        <value><![CDATA[218]]></value>
        <docblock line="1912">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1912" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1922" package="Default">
        <name>IF_TYPE_OPTICALCHANNELGROUP</name>
        <full_name>IF_TYPE_OPTICALCHANNELGROUP</full_name>
        <value><![CDATA[219]]></value>
        <docblock line="1918">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1918" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1928" package="Default">
        <name>IF_TYPE_HOMEPNA</name>
        <full_name>IF_TYPE_HOMEPNA</full_name>
        <value><![CDATA[220]]></value>
        <docblock line="1924">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1924" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1934" package="Default">
        <name>IF_TYPE_GFP</name>
        <full_name>IF_TYPE_GFP</full_name>
        <value><![CDATA[221]]></value>
        <docblock line="1930">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1930" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1940" package="Default">
        <name>IF_TYPE_CISCOISLVLAN</name>
        <full_name>IF_TYPE_CISCOISLVLAN</full_name>
        <value><![CDATA[222]]></value>
        <docblock line="1936">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1936" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1946" package="Default">
        <name>IF_TYPE_ACTELISMETALOOP</name>
        <full_name>IF_TYPE_ACTELISMETALOOP</full_name>
        <value><![CDATA[223]]></value>
        <docblock line="1942">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1942" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1952" package="Default">
        <name>IF_TYPE_FCIPLINK</name>
        <full_name>IF_TYPE_FCIPLINK</full_name>
        <value><![CDATA[224]]></value>
        <docblock line="1948">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1948" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1958" package="Default">
        <name>IF_TYPE_RPR</name>
        <full_name>IF_TYPE_RPR</full_name>
        <value><![CDATA[225]]></value>
        <docblock line="1954">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1954" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1964" package="Default">
        <name>IF_TYPE_QAM</name>
        <full_name>IF_TYPE_QAM</full_name>
        <value><![CDATA[226]]></value>
        <docblock line="1960">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1960" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1970" package="Default">
        <name>IF_TYPE_LMP</name>
        <full_name>IF_TYPE_LMP</full_name>
        <value><![CDATA[227]]></value>
        <docblock line="1966">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1966" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1976" package="Default">
        <name>IF_TYPE_CBLVECTASTAR</name>
        <full_name>IF_TYPE_CBLVECTASTAR</full_name>
        <value><![CDATA[228]]></value>
        <docblock line="1972">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1972" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1982" package="Default">
        <name>IF_TYPE_DOCSCABLEMCMTSDOWNSTREAM</name>
        <full_name>IF_TYPE_DOCSCABLEMCMTSDOWNSTREAM</full_name>
        <value><![CDATA[229]]></value>
        <docblock line="1978">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1978" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1988" package="Default">
        <name>IF_TYPE_ADSL2</name>
        <full_name>IF_TYPE_ADSL2</full_name>
        <value><![CDATA[230]]></value>
        <docblock line="1984">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1984" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="1994" package="Default">
        <name>IF_TYPE_MACSECCONTROLLEDIF</name>
        <full_name>IF_TYPE_MACSECCONTROLLEDIF</full_name>
        <value><![CDATA[231]]></value>
        <docblock line="1990">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1990" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="2000" package="Default">
        <name>IF_TYPE_MACSECUNCONTROLLEDIF</name>
        <full_name>IF_TYPE_MACSECUNCONTROLLEDIF</full_name>
        <value><![CDATA[232]]></value>
        <docblock line="1996">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1996" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="2006" package="Default">
        <name>IF_TYPE_AVICIOPTICALETHER</name>
        <full_name>IF_TYPE_AVICIOPTICALETHER</full_name>
        <value><![CDATA[233]]></value>
        <docblock line="2002">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="2002" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="2012" package="Default">
        <name>IF_TYPE_ATMBOND</name>
        <full_name>IF_TYPE_ATMBOND</full_name>
        <value><![CDATA[234]]></value>
        <docblock line="2008">
          <description><![CDATA[Constant for possible type of an interface]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="2008" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="147" namespace="OSS_SNMP\MIBS" package="Default">
        <name>$IF_ADMIN_STATES</name>
        <default><![CDATA[array(self::IF_ADMIN_STATUS_UP => 'up', self::IF_ADMIN_STATUS_DOWN => 'down', self::IF_ADMIN_STATUS_TESTING => 'testing')]]></default>
        <docblock line="141">
          <description><![CDATA[Text representation of interface admin status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="see" description="\OSS_SNMP\MIBS\adminStates()" refers="\OSS_SNMP\MIBS\adminStates()"/>
          <tag line="141" name="var" description="Text representations of interface admin status." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="573" namespace="OSS_SNMP\MIBS" package="Default">
        <name>$IF_OPER_STATES</name>
        <default><![CDATA[array(self::IF_OPER_STATUS_UP => 'up', self::IF_OPER_STATUS_DOWN => 'down', self::IF_OPER_STATUS_TESTING => 'testing', self::IF_OPER_STATUS_UNKNOWN => 'unknown', self::IF_OPER_STATUS_DORMANT => 'dormant', self::IF_OPER_STATUS_NOT_PRESENT => 'notPresent', self::IF_OPER_STATUS_LOWER_LAYER_DOWN => 'lowerLayerDown')]]></default>
        <docblock line="567">
          <description><![CDATA[Text representation of interface operating status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="567" name="see" description="\OSS_SNMP\MIBS\operationStates()" refers="\OSS_SNMP\MIBS\operationStates()"/>
          <tag line="567" name="var" description="Text representations of interface operating status." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="2020" namespace="OSS_SNMP\MIBS" package="Default">
        <name>$IF_TYPES</name>
        <default><![CDATA[array(self::IF_TYPE_OTHER => 'other', self::IF_TYPE_REGULAR1822 => 'regular1822', self::IF_TYPE_HDH1822 => 'hdh1822', self::IF_TYPE_DDNX25 => 'ddnX25', self::IF_TYPE_RFC877X25 => 'rfc877x25', self::IF_TYPE_ETHERNETCSMACD => 'ethernetCsmacd', self::IF_TYPE_ISO88023CSMACD => 'iso88023Csmacd', self::IF_TYPE_ISO88024TOKENBUS => 'iso88024TokenBus', self::IF_TYPE_ISO88025TOKENRING => 'iso88025TokenRing', self::IF_TYPE_ISO88026MAN => 'iso88026Man', self::IF_TYPE_STARLAN => 'starLan', self::IF_TYPE_PROTEON10MBIT => 'proteon10Mbit', self::IF_TYPE_PROTEON80MBIT => 'proteon80Mbit', self::IF_TYPE_HYPERCHANNEL => 'hyperchannel', self::IF_TYPE_FDDI => 'fddi', self::IF_TYPE_LAPB => 'lapb', self::IF_TYPE_SDLC => 'sdlc', self::IF_TYPE_DS1 => 'ds1', self::IF_TYPE_E1 => 'e1', self::IF_TYPE_BASICISDN => 'basicISDN', self::IF_TYPE_PRIMARYISDN => 'primaryISDN', self::IF_TYPE_PROPPOINTTOPOINTSERIAL => 'propPointToPointSerial', self::IF_TYPE_PPP => 'ppp', self::IF_TYPE_SOFTWARELOOPBACK => 'softwareLoopback', self::IF_TYPE_EON => 'eon', self::IF_TYPE_ETHERNET3MBIT => 'ethernet3Mbit', self::IF_TYPE_NSIP => 'nsip', self::IF_TYPE_SLIP => 'slip', self::IF_TYPE_ULTRA => 'ultra', self::IF_TYPE_DS3 => 'ds3', self::IF_TYPE_SIP => 'sip', self::IF_TYPE_FRAMERELAY => 'frameRelay', self::IF_TYPE_RS232 => 'rs232', self::IF_TYPE_PARA => 'para', self::IF_TYPE_ARCNET => 'arcnet', self::IF_TYPE_ARCNETPLUS => 'arcnetPlus', self::IF_TYPE_ATM => 'atm', self::IF_TYPE_MIOX25 => 'miox25', self::IF_TYPE_SONET => 'sonet', self::IF_TYPE_X25PLE => 'x25ple', self::IF_TYPE_ISO88022LLC => 'iso88022llc', self::IF_TYPE_LOCALTALK => 'localTalk', self::IF_TYPE_SMDSDXI => 'smdsDxi', self::IF_TYPE_FRAMERELAYSERVICE => 'frameRelayService', self::IF_TYPE_V35 => 'v35', self::IF_TYPE_HSSI => 'hssi', self::IF_TYPE_HIPPI => 'hippi', self::IF_TYPE_MODEM => 'modem', self::IF_TYPE_AAL5 => 'aal5', self::IF_TYPE_SONETPATH => 'sonetPath', self::IF_TYPE_SONETVT => 'sonetVT', self::IF_TYPE_SMDSICIP => 'smdsIcip', self::IF_TYPE_PROPVIRTUAL => 'propVirtual', self::IF_TYPE_PROPMULTIPLEXOR => 'propMultiplexor', self::IF_TYPE_IEEE80212 => 'ieee80212', self::IF_TYPE_FIBRECHANNEL => 'fibreChannel', self::IF_TYPE_HIPPIINTERFACE => 'hippiInterface', self::IF_TYPE_FRAMERELAYINTERCONNECT => 'frameRelayInterconnect', self::IF_TYPE_AFLANE8023 => 'aflane8023', self::IF_TYPE_AFLANE8025 => 'aflane8025', self::IF_TYPE_CCTEMUL => 'cctEmul', self::IF_TYPE_FASTETHER => 'fastEther', self::IF_TYPE_ISDN => 'isdn', self::IF_TYPE_V11 => 'v11', self::IF_TYPE_V36 => 'v36', self::IF_TYPE_G703AT64K => 'g703at64k', self::IF_TYPE_G703AT2MB => 'g703at2mb', self::IF_TYPE_QLLC => 'qllc', self::IF_TYPE_FASTETHERFX => 'fastEtherFX', self::IF_TYPE_CHANNEL => 'channel', self::IF_TYPE_IEEE80211 => 'ieee80211', self::IF_TYPE_IBM370PARCHAN => 'ibm370parChan', self::IF_TYPE_ESCON => 'escon', self::IF_TYPE_DLSW => 'dlsw', self::IF_TYPE_ISDNS => 'isdns', self::IF_TYPE_ISDNU => 'isdnu', self::IF_TYPE_LAPD => 'lapd', self::IF_TYPE_IPSWITCH => 'ipSwitch', self::IF_TYPE_RSRB => 'rsrb', self::IF_TYPE_ATMLOGICAL => 'atmLogical', self::IF_TYPE_DS0 => 'ds0', self::IF_TYPE_DS0BUNDLE => 'ds0Bundle', self::IF_TYPE_BSC => 'bsc', self::IF_TYPE_ASYNC => 'async', self::IF_TYPE_CNR => 'cnr', self::IF_TYPE_ISO88025DTR => 'iso88025Dtr', self::IF_TYPE_EPLRS => 'eplrs', self::IF_TYPE_ARAP => 'arap', self::IF_TYPE_PROPCNLS => 'propCnls', self::IF_TYPE_HOSTPAD => 'hostPad', self::IF_TYPE_TERMPAD => 'termPad', self::IF_TYPE_FRAMERELAYMPI => 'frameRelayMPI', self::IF_TYPE_X213 => 'x213', self::IF_TYPE_ADSL => 'adsl', self::IF_TYPE_RADSL => 'radsl', self::IF_TYPE_SDSL => 'sdsl', self::IF_TYPE_VDSL => 'vdsl', self::IF_TYPE_ISO88025CRFPINT => 'iso88025CRFPInt', self::IF_TYPE_MYRINET => 'myrinet', self::IF_TYPE_VOICEEM => 'voiceEM', self::IF_TYPE_VOICEFXO => 'voiceFXO', self::IF_TYPE_VOICEFXS => 'voiceFXS', self::IF_TYPE_VOICEENCAP => 'voiceEncap', self::IF_TYPE_VOICEOVERIP => 'voiceOverIp', self::IF_TYPE_ATMDXI => 'atmDxi', self::IF_TYPE_ATMFUNI => 'atmFuni', self::IF_TYPE_ATMIMA => 'atmIma', self::IF_TYPE_PPPMULTILINKBUNDLE => 'pppMultilinkBundle', self::IF_TYPE_IPOVERCDLC => 'ipOverCdlc', self::IF_TYPE_IPOVERCLAW => 'ipOverClaw', self::IF_TYPE_STACKTOSTACK => 'stackToStack', self::IF_TYPE_VIRTUALIPADDRESS => 'virtualIpAddress', self::IF_TYPE_MPC => 'mpc', self::IF_TYPE_IPOVERATM => 'ipOverAtm', self::IF_TYPE_ISO88025FIBER => 'iso88025Fiber', self::IF_TYPE_TDLC => 'tdlc', self::IF_TYPE_GIGABITETHERNET => 'gigabitEthernet', self::IF_TYPE_HDLC => 'hdlc', self::IF_TYPE_LAPF => 'lapf', self::IF_TYPE_V37 => 'v37', self::IF_TYPE_X25MLP => 'x25mlp', self::IF_TYPE_X25HUNTGROUP => 'x25huntGroup', self::IF_TYPE_TRASNPHDLC => 'trasnpHdlc', self::IF_TYPE_INTERLEAVE => 'interleave', self::IF_TYPE_FAST => 'fast', self::IF_TYPE_IP => 'ip', self::IF_TYPE_DOCSCABLEMACLAYER => 'docsCableMaclayer', self::IF_TYPE_DOCSCABLEDOWNSTREAM => 'docsCableDownstream', self::IF_TYPE_DOCSCABLEUPSTREAM => 'docsCableUpstream', self::IF_TYPE_A12MPPSWITCH => 'a12MppSwitch', self::IF_TYPE_TUNNEL => 'tunnel', self::IF_TYPE_COFFEE => 'coffee', self::IF_TYPE_CES => 'ces', self::IF_TYPE_ATMSUBINTERFACE => 'atmSubInterface', self::IF_TYPE_L2VLAN => 'l2vlan', self::IF_TYPE_L3IPVLAN => 'l3ipvlan', self::IF_TYPE_L3IPXVLAN => 'l3ipxvlan', self::IF_TYPE_DIGITALPOWERLINE => 'digitalPowerline', self::IF_TYPE_MEDIAMAILOVERIP => 'mediaMailOverIp', self::IF_TYPE_DTM => 'dtm', self::IF_TYPE_DCN => 'dcn', self::IF_TYPE_IPFORWARD => 'ipForward', self::IF_TYPE_MSDSL => 'msdsl', self::IF_TYPE_IEEE1394 => 'ieee1394', self::IF_TYPE_IF_GSN => 'if-gsn', self::IF_TYPE_DVBRCCMACLAYER => 'dvbRccMacLayer', self::IF_TYPE_DVBRCCDOWNSTREAM => 'dvbRccDownstream', self::IF_TYPE_DVBRCCUPSTREAM => 'dvbRccUpstream', self::IF_TYPE_ATMVIRTUAL => 'atmVirtual', self::IF_TYPE_MPLSTUNNEL => 'mplsTunnel', self::IF_TYPE_SRP => 'srp', self::IF_TYPE_VOICEOVERATM => 'voiceOverAtm', self::IF_TYPE_VOICEOVERFRAMERELAY => 'voiceOverFrameRelay', self::IF_TYPE_IDSL => 'idsl', self::IF_TYPE_COMPOSITELINK => 'compositeLink', self::IF_TYPE_SS7SIGLINK => 'ss7SigLink', self::IF_TYPE_PROPWIRELESSP2P => 'propWirelessP2P', self::IF_TYPE_FRFORWARD => 'frForward', self::IF_TYPE_RFC1483 => 'rfc1483', self::IF_TYPE_USB => 'usb', self::IF_TYPE_IEEE8023ADLAG => 'ieee8023adLag', self::IF_TYPE_BGPPOLICYACCOUNTING => 'bgppolicyaccounting', self::IF_TYPE_FRF16MFRBUNDLE => 'frf16MfrBundle', self::IF_TYPE_H323GATEKEEPER => 'h323Gatekeeper', self::IF_TYPE_H323PROXY => 'h323Proxy', self::IF_TYPE_MPLS => 'mpls', self::IF_TYPE_MFSIGLINK => 'mfSigLink', self::IF_TYPE_HDSL2 => 'hdsl2', self::IF_TYPE_SHDSL => 'shdsl', self::IF_TYPE_DS1FDL => 'ds1FDL', self::IF_TYPE_POS => 'pos', self::IF_TYPE_DVBASIIN => 'dvbAsiIn', self::IF_TYPE_DVBASIOUT => 'dvbAsiOut', self::IF_TYPE_PLC => 'plc', self::IF_TYPE_NFAS => 'nfas', self::IF_TYPE_TR008 => 'tr008', self::IF_TYPE_GR303RDT => 'gr303RDT', self::IF_TYPE_GR303IDT => 'gr303IDT', self::IF_TYPE_ISUP => 'isup', self::IF_TYPE_PROPDOCSWIRELESSMACLAYER => 'propDocsWirelessMaclayer', self::IF_TYPE_PROPDOCSWIRELESSDOWNSTREAM => 'propDocsWirelessDownstream', self::IF_TYPE_PROPDOCSWIRELESSUPSTREAM => 'propDocsWirelessUpstream', self::IF_TYPE_HIPERLAN2 => 'hiperlan2', self::IF_TYPE_PROPBWAP2MP => 'propBWAp2Mp', self::IF_TYPE_SONETOVERHEADCHANNEL => 'sonetOverheadChannel', self::IF_TYPE_DIGITALWRAPPEROVERHEADCHANNEL => 'digitalWrapperOverheadChannel', self::IF_TYPE_AAL2 => 'aal2', self::IF_TYPE_RADIOMAC => 'radioMAC', self::IF_TYPE_ATMRADIO => 'atmRadio', self::IF_TYPE_IMT => 'imt', self::IF_TYPE_MVL => 'mvl', self::IF_TYPE_REACHDSL => 'reachDSL', self::IF_TYPE_FRDLCIENDPT => 'frDlciEndPt', self::IF_TYPE_ATMVCIENDPT => 'atmVciEndPt', self::IF_TYPE_OPTICALCHANNEL => 'opticalChannel', self::IF_TYPE_OPTICALTRANSPORT => 'opticalTransport', self::IF_TYPE_PROPATM => 'propAtm', self::IF_TYPE_VOICEOVERCABLE => 'voiceOverCable', self::IF_TYPE_INFINIBAND => 'infiniband', self::IF_TYPE_TELINK => 'teLink', self::IF_TYPE_Q2931 => 'q2931', self::IF_TYPE_VIRTUALTG => 'virtualTg', self::IF_TYPE_SIPTG => 'sipTg', self::IF_TYPE_SIPSIG => 'sipSig', self::IF_TYPE_DOCSCABLEUPSTREAMCHANNEL => 'docsCableUpstreamChannel', self::IF_TYPE_ECONET => 'econet', self::IF_TYPE_PON155 => 'pon155', self::IF_TYPE_PON622 => 'pon622', self::IF_TYPE_BRIDGE => 'bridge', self::IF_TYPE_LINEGROUP => 'linegroup', self::IF_TYPE_VOICEEMFGD => 'voiceEMFGD', self::IF_TYPE_VOICEFGDEANA => 'voiceFGDEANA', self::IF_TYPE_VOICEDID => 'voiceDID', self::IF_TYPE_MPEGTRANSPORT => 'mpegTransport', self::IF_TYPE_SIXTOFOUR => 'sixToFour', self::IF_TYPE_GTP => 'gtp', self::IF_TYPE_PDNETHERLOOP1 => 'pdnEtherLoop1', self::IF_TYPE_PDNETHERLOOP2 => 'pdnEtherLoop2', self::IF_TYPE_OPTICALCHANNELGROUP => 'opticalChannelGroup', self::IF_TYPE_HOMEPNA => 'homepna', self::IF_TYPE_GFP => 'gfp', self::IF_TYPE_CISCOISLVLAN => 'ciscoISLvlan', self::IF_TYPE_ACTELISMETALOOP => 'actelisMetaLOOP', self::IF_TYPE_FCIPLINK => 'fcipLink', self::IF_TYPE_RPR => 'rpr', self::IF_TYPE_QAM => 'qam', self::IF_TYPE_LMP => 'lmp', self::IF_TYPE_CBLVECTASTAR => 'cblVectaStar', self::IF_TYPE_DOCSCABLEMCMTSDOWNSTREAM => 'docsCableMCmtsDownstream', self::IF_TYPE_ADSL2 => 'adsl2', self::IF_TYPE_MACSECCONTROLLEDIF => 'macSecControlledIF', self::IF_TYPE_MACSECUNCONTROLLEDIF => 'macSecUncontrolledIF', self::IF_TYPE_AVICIOPTICALETHER => 'aviciOpticalEther', self::IF_TYPE_ATMBOND => 'atmbond')]]></default>
        <docblock line="2014">
          <description><![CDATA[Text representation of interface types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="2014" name="see" description="\OSS_SNMP\MIBS\types()" refers="\OSS_SNMP\MIBS\types()"/>
          <tag line="2014" name="var" description="Text representations of interface types." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="82" package="Default">
        <name>numberOfInterfaces</name>
        <full_name>numberOfInterfaces</full_name>
        <docblock line="76">
          <description><![CDATA[Get the number of network interfaces (regardless of
their current state) present on this system.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="return" description="The number of network interfaces on the system" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="93" package="Default">
        <name>mtus</name>
        <full_name>mtus</full_name>
        <docblock line="88">
          <description><![CDATA[Get an array of device MTUs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="return" description="An array of device MTUs" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="109" package="Default">
        <name>physAddresses</name>
        <full_name>physAddresses</full_name>
        <docblock line="98">
          <description><![CDATA[Get an array of the interfaces' physical addresses]]></description>
          <long-description><![CDATA[<p>"The interface's address at the protocol layer
immediately `below' the network layer in the
protocol stack.  For interfaces which do not have
such an address (e.g., a serial line), this object
should contain an octet string of zero length."</p>]]></long-description>
          <tag line="98" name="return" description="An array of device physical addresses" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="169" package="Default">
        <name>adminStates</name>
        <full_name>adminStates</full_name>
        <docblock line="153">
          <description><![CDATA[Get an array of device interface admin status (up / down)]]></description>
          <long-description><![CDATA[<p>E.g. the follow SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.2.2.1.7.10128 = INTEGER: up(1)
.1.3.6.1.2.1.2.2.1.7.10129 = INTEGER: down(2)
...</p>

<pre><code> [10128] =&gt; 1
 [10129] =&gt; 2
</code></pre>]]></long-description>
          <tag line="153" name="see" description="\OSS_SNMP\MIBS\IF_ADMIN_STATES" refers="\OSS_SNMP\MIBS\IF_ADMIN_STATES"/>
          <tag line="153" name="param" description="If true, return the string representation" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="153" name="return" description="An array of interface admin states" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="195" package="Default">
        <name>lastChanges</name>
        <full_name>lastChanges</full_name>
        <docblock line="179">
          <description><![CDATA[Get an array of device interface last change times]]></description>
          <long-description><![CDATA[<p>Value returned is timeticks (one hundreds of a second)</p>

<p>"The value of sysUpTime at the time the interface
entered its current operational state.  If the
current state was entered prior to the last re-
initialization of the local network management
subsystem, then this object contains a zero
value."</p>]]></long-description>
          <tag line="179" name="see" description="\OSS_SNMP\MIBS\System::uptime()" refers="\OSS_SNMP\MIBS\System::uptime()"/>
          <tag line="179" name="param" description="Poll sysUpTime and use this to return a timestamp of the last change" type="bool" variable="$asUnixTimestamp">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="179" name="return" description="Timeticks (or zero) since last change of the interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$asUnixTimestamp</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="219" package="Default">
        <name>inOctets</name>
        <full_name>inOctets</full_name>
        <docblock line="211">
          <description><![CDATA[Get an array of device interface in octets]]></description>
          <long-description><![CDATA[<p>"The total number of octets received on the
interface, including framing characters."</p>]]></long-description>
          <tag line="211" name="return" description="The total number of octets received on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="232" package="Default">
        <name>inUnicastPackets</name>
        <full_name>inUnicastPackets</full_name>
        <docblock line="224">
          <description><![CDATA[Get an array of device interface unicast packets in]]></description>
          <long-description><![CDATA[<p>"The number of subnetwork-unicast packets
delivered to a higher-layer protocol."</p>]]></long-description>
          <tag line="224" name="return" description="The total number of unicast packets received on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="246" package="Default">
        <name>inNonUnicastPackets</name>
        <full_name>inNonUnicastPackets</full_name>
        <docblock line="237">
          <description><![CDATA[Get an array of device interface non-unicast packets in]]></description>
          <long-description><![CDATA[<p>"The number of non-unicast (i.e., subnetwork-
broadcast or subnetwork-multicast) packets
delivered to a higher-layer protocol."</p>]]></long-description>
          <tag line="237" name="return" description="The total number of non-unicast packets received on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="263" package="Default">
        <name>inDiscards</name>
        <full_name>inDiscards</full_name>
        <docblock line="251">
          <description><![CDATA[Get an array of device interface inbound discarded packets]]></description>
          <long-description><![CDATA[<p>"The number of inbound packets which were chosen
to be discarded even though no errors had been
detected to prevent their being deliverable to a
higher-layer protocol.  One possible reason for
discarding such a packet could be to free up
buffer space."</p>]]></long-description>
          <tag line="251" name="return" description="The total number of discarded inbound packets received on interfaces" type="\OSS_SNMP\MIBS\arrary">
            <type by_reference="false">\OSS_SNMP\MIBS\arrary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="277" package="Default">
        <name>inErrors</name>
        <full_name>inErrors</full_name>
        <docblock line="268">
          <description><![CDATA[Get an array of device interface inbound error packets]]></description>
          <long-description><![CDATA[<p>"The number of inbound packets that contained
errors preventing them from being deliverable to a
higher-layer protocol."</p>]]></long-description>
          <tag line="268" name="return" description="The total number of error inbound packets received on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="296" package="Default">
        <name>outOctets</name>
        <full_name>outOctets</full_name>
        <docblock line="288">
          <description><![CDATA[Get an array of device interface out octets]]></description>
          <long-description><![CDATA[<p>"The total number of octets transmitted out of the
interface, including framing characters."</p>]]></long-description>
          <tag line="288" name="return" description="The total number of octets transmitted on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="311" package="Default">
        <name>outUnicastPackets</name>
        <full_name>outUnicastPackets</full_name>
        <docblock line="301">
          <description><![CDATA[Get an array of device interface unicast packets out]]></description>
          <long-description><![CDATA[<p>"The total number of packets that higher-level
protocols requested be transmitted to a
subnetwork-unicast address, including those that
were discarded or not sent."</p>]]></long-description>
          <tag line="301" name="return" description="The total number of unicast packets transmitted on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="327" package="Default">
        <name>outNonUnicastPackets</name>
        <full_name>outNonUnicastPackets</full_name>
        <docblock line="316">
          <description><![CDATA[Get an array of device interface non-unicast packets out]]></description>
          <long-description><![CDATA[<p>"The total number of packets that higher-level
protocols requested be transmitted to a non-
unicast (i.e., a subnetwork-broadcast or
subnetwork-multicast) address, including those
that were discarded or not sent."</p>]]></long-description>
          <tag line="316" name="return" description="The total number of non-unicast packets requested sent interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="343" package="Default">
        <name>outDiscards</name>
        <full_name>outDiscards</full_name>
        <docblock line="332">
          <description><![CDATA[Get an array of device interface outbound discarded packets]]></description>
          <long-description><![CDATA[<p>"The number of outbound packets which were chosen
to be discarded even though no errors had been
detected to prevent their being transmitted.  One
possible reason for discarding such a packet could
be to free up buffer space."</p>]]></long-description>
          <tag line="332" name="return" description="The total number of discarded outbound packets" type="\OSS_SNMP\MIBS\arrary">
            <type by_reference="false">\OSS_SNMP\MIBS\arrary</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="356" package="Default">
        <name>outErrors</name>
        <full_name>outErrors</full_name>
        <docblock line="348">
          <description><![CDATA[Get an array of device interface outbound error packets]]></description>
          <long-description><![CDATA[<p>"The number of outbound packets that could not be
transmitted because of errors."</p>]]></long-description>
          <tag line="348" name="return" description="The total number of error outbound packets received on interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="368" package="Default">
        <name>outQueueLength</name>
        <full_name>outQueueLength</full_name>
        <docblock line="361">
          <description><![CDATA[Get an array of interface outbound queue lengths]]></description>
          <long-description><![CDATA[<p>"The length of the output packet queue (in packets)"</p>]]></long-description>
          <tag line="361" name="return" description="The total number of packets in the outbound queues" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="386" package="Default">
        <name>inUnknownProtocols</name>
        <full_name>inUnknownProtocols</full_name>
        <docblock line="377">
          <description><![CDATA[Get an array of packets received on an interface of unknown protocol]]></description>
          <long-description><![CDATA[<p>"The number of packets received via the interface
which were discarded because of an unknown or
unsupported protocol."</p>]]></long-description>
          <tag line="377" name="return" description="The number of packets received on an interface of unknown protocol" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="405" package="Default">
        <name>indexes</name>
        <full_name>indexes</full_name>
        <docblock line="391">
          <description><![CDATA[Get an array of device interface indexes]]></description>
          <long-description><![CDATA[<p>E.g. the following SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.2.2.1.1 = INTEGER: 1
.1.3.6.1.2.1.2.2.1.2 = INTEGER: 2
...</p>

<pre><code> [1] =&gt; 1
 [2] =&gt; 2
</code></pre>]]></long-description>
          <tag line="391" name="return" description="An array of interface indexes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="424" package="Default">
        <name>names</name>
        <full_name>names</full_name>
        <docblock line="410">
          <description><![CDATA[Get an array of device interface names]]></description>
          <long-description><![CDATA[<p>E.g. the following SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.31.1.1.1.1.10128 = STRING: Gi1/0/28
.1.3.6.1.2.1.31.1.1.1.1.10129 = STRING: Gi1/0/29
...</p>

<pre><code> [10128] =&gt; "Gi1/0/28"
 [10129] =&gt; "Gi1/0/29"
</code></pre>]]></long-description>
          <tag line="410" name="return" description="An array of interface names" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="443" package="Default">
        <name>aliases</name>
        <full_name>aliases</full_name>
        <docblock line="429">
          <description><![CDATA[Get an array of device interface aliases (e.g.]]></description>
          <long-description><![CDATA[<p>as set by the interface description / port-name parameter)</p>

<p>E.g. the followig SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.2.2.1.2.18.10128 = STRING: Connection to switch2
.1.3.6.1.2.1.2.2.1.2.18.10129 = STRING: Connection to switch3
...</p>

<pre><code> [10128] =&gt; "Connection to switch2"
 [10129] =&gt; "Connection to switch3"
</code></pre>]]></long-description>
          <tag line="429" name="return" description="An array of interface aliases" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="462" package="Default">
        <name>descriptions</name>
        <full_name>descriptions</full_name>
        <docblock line="448">
          <description><![CDATA[Get an array of device interface descriptions]]></description>
          <long-description><![CDATA[<p>E.g. the following SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.31.1.1.1.1.10128 = STRING: GigabitEthernet1/0/28
.1.3.6.1.2.1.31.1.1.1.1.10129 = STRING: GigabitEthernet1/0/29
...</p>

<pre><code> [10128] =&gt; "GigabitEthernet1/0/28"
 [10129] =&gt; "GigabitEthernet1/0/29"
</code></pre>]]></long-description>
          <tag line="448" name="return" description="An array of interface descriptions" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="491" package="Default">
        <name>speeds</name>
        <full_name>speeds</full_name>
        <docblock line="467">
          <description><![CDATA[Get an array of device interface (operating) speeds]]></description>
          <long-description><![CDATA[<p>E.g. the following SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.2.2.1.5.10128 = Gauge32: 1000000000
.1.3.6.1.2.1.2.2.1.5.10129 = Gauge32: 100000000
...</p>

<pre><code> [10128] =&gt; 1000000000
 [10129] =&gt; 100000000
</code></pre>

<p>NB: operating speed as opposed to maximum speed</p>

<p><strong>WARNING:</strong> This is a 32 bit int so it cannot represent 10Gb
links. These would show up as:</p>

<pre><code> [10127] =&gt; 4294967295
</code></pre>

<p>Instead, use highSpeeds() which will represent the speed as Mbps</p>]]></long-description>
          <tag line="467" name="see" description="\OSS_SNMP\MIBS\highSpeeds()" refers="\OSS_SNMP\MIBS\highSpeeds()"/>
          <tag line="467" name="return" description="An array of interface operating speeds" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="523" package="Default">
        <name>highSpeeds</name>
        <full_name>highSpeeds</full_name>
        <docblock line="496">
          <description><![CDATA[Get an array of device interface (operating) speeds]]></description>
          <long-description><![CDATA[<p>From Cisco:</p>

<blockquote>
  <p>"An estimate of the interface's current bandwidth in units
  of 1,000,000 bits per second. If this object reports a
  value of <code>n' then the speed of the interface is somewhere in
  the range of</code>n-500,000' to `n+499,999'. For interfaces
  which do not vary in bandwidth or for those where no
  accurate estimation can be made, this object should contain
  the nominal bandwidth. For a sub-layer which has no concept
  of bandwidth, this object should be zero."</p>
</blockquote>

<p>E.g. the following SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.2.2.1.5.10127 = Gauge32: 10000
.1.3.6.1.2.1.2.2.1.5.10128 = Gauge32: 1000
.1.3.6.1.2.1.2.2.1.5.10129 = Gauge32: 100
...</p>

<pre><code> [10127] =&gt; 10000000000
 [10128] =&gt; 1000000000
 [10129] =&gt; 100000000
</code></pre>]]></long-description>
          <tag line="496" name="return" description="An array of interface operating speeds" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="599" package="Default">
        <name>operationStates</name>
        <full_name>operationStates</full_name>
        <docblock line="583">
          <description><![CDATA[Get an array of device interface operating status (up / down)]]></description>
          <long-description><![CDATA[<p>E.g. the follow SNMP output yields the shown array:</p>

<p>.1.3.6.1.2.1.2.2.1.8.10128 = INTEGER: up(1)
.1.3.6.1.2.1.2.2.1.8.10129 = INTEGER: down(2)
...</p>

<pre><code> [10128] =&gt; 1
 [10129] =&gt; 2
</code></pre>]]></long-description>
          <tag line="583" name="see" description="\OSS_SNMP\MIBS\IF_OPER_STATES" refers="\OSS_SNMP\MIBS\IF_OPER_STATES"/>
          <tag line="583" name="param" description="If true, return the string representation" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="583" name="return" description="An array of interface states" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="599">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="2264" package="Default">
        <name>types</name>
        <full_name>types</full_name>
        <docblock line="2257">
          <description><![CDATA[Get an array of device interface types]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="2257" name="see" description="\OSS_SNMP\MIBS\$IF_TYPES" refers="\OSS_SNMP\MIBS\$IF_TYPES"/>
          <tag line="2257" name="param" description="If true, return the string representation" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="2257" name="return" description="An array of interface types" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2264">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="2282" package="Default">
        <name>bridgeBasePortIfIndexes</name>
        <full_name>bridgeBasePortIfIndexes</full_name>
        <docblock line="2274">
          <description><![CDATA[Returns an associate array of STP port IDs (key) to interface IDs (value)]]></description>
          <long-description><![CDATA[<p>e.g.  [22] => 10122</p>]]></long-description>
          <tag line="2274" name="return" description="Associate array of STP port IDs (key) to interface IDs (value)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Iface.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Bridge.php" hash="fed345505e7f1d1577d84f78ae94d5be" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Bridge</name>
      <full_name>\OSS_SNMP\MIBS\Bridge</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on generic devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="46" package="Default">
        <name>OID_BRIDGE_BASE_PORT_IF_INDEX</name>
        <full_name>OID_BRIDGE_BASE_PORT_IF_INDEX</full_name>
        <value><![CDATA['.1.3.6.1.2.1.17.1.4.1.2']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="56" package="Default">
        <name>basePortIfIndexes</name>
        <full_name>basePortIfIndexes</full_name>
        <docblock line="48">
          <description><![CDATA[Returns an associate array of STP port IDs (key) to interface IDs (value)]]></description>
          <long-description><![CDATA[<p>e.g.  [22] => 10122</p>]]></long-description>
          <tag line="48" name="return" description="Associate array of STP port IDs (key) to interface IDs (value)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Bridge.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/LAG.php" hash="fe27ea2dd6252d40fa8ce00e0e943a4b" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>LAG</name>
      <full_name>\OSS_SNMP\MIBS\LAG</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on generic devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="50" package="Default">
        <name>OID_LAG_PORT_ATTACHED_ID</name>
        <full_name>OID_LAG_PORT_ATTACHED_ID</full_name>
        <value><![CDATA['.1.2.840.10006.300.43.1.2.1.1.13']]></value>
        <docblock line="46">
          <description><![CDATA[The identifier value (port ID) of the Aggregator that this Aggregation Port is currently attached
to.]]></description>
          <long-description><![CDATA[<p>Zero indicates that the Aggregation Port is not currently attached to an Aggregator.</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="55" package="Default">
        <name>OID_LAG_AGGREGATE_OR_INDIVIDUAL</name>
        <full_name>OID_LAG_AGGREGATE_OR_INDIVIDUAL</full_name>
        <value><![CDATA['.1.2.840.10006.300.43.1.2.1.1.24']]></value>
        <docblock line="52">
          <description><![CDATA[Boolean value indicating whether the Aggregator represents an Aggregate (`TRUE') or an Individual link (`FALSE')]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="63" package="Default">
        <name>isAggregatePorts</name>
        <full_name>isAggregatePorts</full_name>
        <docblock line="57">
          <description><![CDATA[Returns an associate array of port IDs with a boolean value to indicate if it's an aggregate port (true)
or an individual port (false).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="return" description="Associate array of port IDs with a boolean value to indicate if it's an aggregate port (true) or not" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="75" package="Default">
        <name>portAttachedIds</name>
        <full_name>portAttachedIds</full_name>
        <docblock line="68">
          <description><![CDATA[Returns an associate array of port IDs with the ID of the aggregate port that
they are a member of (else 0 if not a LAG port)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="return" description="Associate array of port IDs with the ID of the aggregate port that they are a member of" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="92" package="Default">
        <name>getLAGPorts</name>
        <full_name>getLAGPorts</full_name>
        <docblock line="80">
          <description><![CDATA[Gets an associate array of LAG ports with the [id] => name of it's constituent ports]]></description>
          <long-description><![CDATA[<p>E.g.:
   [5048] => Array
       (
           [10111] => GigabitEthernet1/0/11
           [10112] => GigabitEthernet1/0/12
       )</p>]]></long-description>
          <tag line="80" name="return" description="Associate array of LAG ports with the [id] =&gt; name of it's constituent ports" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="109" package="Default">
        <name>findFailedLAGPorts</name>
        <full_name>findFailedLAGPorts</full_name>
        <docblock line="104">
          <description><![CDATA[Utility function to identify configured but unattached LAG ports]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="return" description="Array of indexed port ids (array index, not value) of configured but unattached LAG ports" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/LAG.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Cisco.php" hash="f3a08ae95fcbbf3be1843b8c31e970fb" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Cisco</name>
      <full_name>\OSS_SNMP\MIBS\Cisco</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Cisco devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Cisco.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Extreme.php" hash="09237de29caea24eddb8d3ceb0d070f2" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Extreme</name>
      <full_name>\OSS_SNMP\MIBS\Extreme</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Extreme devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012 - 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Extreme.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Asterisk/Indications.php" hash="e1e9f54c04003dccb0675e92c0f813c0" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Asterisk" line="45" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Indications</name>
      <full_name>\OSS_SNMP\MIBS\Asterisk\Indications</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Asterisk]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\Asterisk\https://wiki.asterisk.org/wiki/display/AST/Asterisk+MIB+Definitions" refers="\OSS_SNMP\MIBS\Asterisk\https://wiki.asterisk.org/wiki/display/AST/Asterisk+MIB+Definitions"/>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="48" package="Default">
        <name>OID_ASTERISK_INDICATIONS_COUNT</name>
        <full_name>OID_ASTERISK_INDICATIONS_COUNT</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.4.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="50" package="Default">
        <name>OID_ASTERISK_DEFAULT_INDICATION</name>
        <full_name>OID_ASTERISK_DEFAULT_INDICATION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.4.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="52" package="Default">
        <name>OID_ASTERISK_INDICATIONS_COUNTRY</name>
        <full_name>OID_ASTERISK_INDICATIONS_COUNTRY</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.4.3.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="53" package="Default">
        <name>OID_ASTERISK_INDICATIONS_DESCRIPTION</name>
        <full_name>OID_ASTERISK_INDICATIONS_DESCRIPTION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.4.3.1.4']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="62" package="Default">
        <name>number</name>
        <full_name>number</full_name>
        <docblock line="55">
          <description><![CDATA[Returns the number of indications defined in Asterisk]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Number of indications currently defined in Asterisk.</p>
</blockquote>]]></long-description>
          <tag line="55" name="return" description="The number of indications defined in Asterisk" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="75" package="Default">
        <name>defaultZone</name>
        <full_name>defaultZone</full_name>
        <docblock line="68">
          <description><![CDATA[Returns the default indication zone to use.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Default indication zone to use.</p>
</blockquote>]]></long-description>
          <tag line="68" name="return" description="The default indication zone to use" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="88" package="Default">
        <name>countryCodes</name>
        <full_name>countryCodes</full_name>
        <docblock line="80">
          <description><![CDATA[Returns an array of ISO country codes for the defined indications zones (indexed by SNMP table entry)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Country for which the indication zone is valid,
  typically this is the ISO 2-letter code of the country.</p>
</blockquote>]]></long-description>
          <tag line="80" name="return" description="An array of ISO country codes for the defined indications zones (indexed by SNMP table entry)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="101" package="Default">
        <name>descriptions</name>
        <full_name>descriptions</full_name>
        <docblock line="93">
          <description><![CDATA[Returns an array of indications zone descriptions (indexed by SNMP table entry)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Description of the indication zone, usually the full
  name of the country it is valid for.</p>
</blockquote>]]></long-description>
          <tag line="93" name="return" description="An array of indications zone descriptions" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Asterisk/Indications.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Asterisk/Channels.php" hash="0be24d6d307b549a17268aa32316a0b7" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Asterisk" line="45" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Channels</name>
      <full_name>\OSS_SNMP\MIBS\Asterisk\Channels</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Asterisk]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\Asterisk\https://wiki.asterisk.org/wiki/display/AST/Asterisk+MIB+Definitions" refers="\OSS_SNMP\MIBS\Asterisk\https://wiki.asterisk.org/wiki/display/AST/Asterisk+MIB+Definitions"/>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="48" package="Default">
        <name>OID_ASTERISK_CHANNELS_ACTIVE</name>
        <full_name>OID_ASTERISK_CHANNELS_ACTIVE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="50" package="Default">
        <name>OID_ASTERISK_CHANNELS_SUPPORTED</name>
        <full_name>OID_ASTERISK_CHANNELS_SUPPORTED</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.3.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="52" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE_NAME</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE_NAME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.4.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="53" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE_DESCRIPTION</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE_DESCRIPTION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.4.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="54" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE_STATE</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE_STATE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.4.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="55" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE_INDICATION</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE_INDICATION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.4.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="56" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE_TRANSFER</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE_TRANSFER</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.4.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="57" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE_CHANNELS</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE_CHANNELS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.4.1.7']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="59" package="Default">
        <name>OID_ASTERISK_CHANNEL_NAME</name>
        <full_name>OID_ASTERISK_CHANNEL_NAME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="60" package="Default">
        <name>OID_ASTERISK_CHANNEL_LANGUAGE</name>
        <full_name>OID_ASTERISK_CHANNEL_LANGUAGE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="61" package="Default">
        <name>OID_ASTERISK_CHANNEL_TYPE</name>
        <full_name>OID_ASTERISK_CHANNEL_TYPE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="62" package="Default">
        <name>OID_ASTERISK_CHANNEL_MUSIC_CLASS</name>
        <full_name>OID_ASTERISK_CHANNEL_MUSIC_CLASS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="63" package="Default">
        <name>OID_ASTERISK_CHANNEL_BRIDGE</name>
        <full_name>OID_ASTERISK_CHANNEL_BRIDGE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="64" package="Default">
        <name>OID_ASTERISK_CHANNEL_MASQ</name>
        <full_name>OID_ASTERISK_CHANNEL_MASQ</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.7']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="65" package="Default">
        <name>OID_ASTERISK_CHANNEL_MASQR</name>
        <full_name>OID_ASTERISK_CHANNEL_MASQR</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.8']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="66" package="Default">
        <name>OID_ASTERISK_CHANNEL_WHEN_HANGUP</name>
        <full_name>OID_ASTERISK_CHANNEL_WHEN_HANGUP</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.9']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="67" package="Default">
        <name>OID_ASTERISK_CHANNEL_APP</name>
        <full_name>OID_ASTERISK_CHANNEL_APP</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.10']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="68" package="Default">
        <name>OID_ASTERISK_CHANNEL_DATA</name>
        <full_name>OID_ASTERISK_CHANNEL_DATA</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.11']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="69" package="Default">
        <name>OID_ASTERISK_CHANNEL_CONTEXT</name>
        <full_name>OID_ASTERISK_CHANNEL_CONTEXT</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.12']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="70" package="Default">
        <name>OID_ASTERISK_CHANNEL_MACRO_CONTEXT</name>
        <full_name>OID_ASTERISK_CHANNEL_MACRO_CONTEXT</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.13']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="71" package="Default">
        <name>OID_ASTERISK_CHANNEL_MACRO_EXTEN</name>
        <full_name>OID_ASTERISK_CHANNEL_MACRO_EXTEN</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.14']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="72" package="Default">
        <name>OID_ASTERISK_CHANNEL_MACRO_PRI</name>
        <full_name>OID_ASTERISK_CHANNEL_MACRO_PRI</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.15']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="73" package="Default">
        <name>OID_ASTERISK_CHANNEL_EXTEN</name>
        <full_name>OID_ASTERISK_CHANNEL_EXTEN</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.16']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="74" package="Default">
        <name>OID_ASTERISK_CHANNEL_PRI</name>
        <full_name>OID_ASTERISK_CHANNEL_PRI</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.17']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="75" package="Default">
        <name>OID_ASTERISK_CHANNEL_ACCOUNT_CODE</name>
        <full_name>OID_ASTERISK_CHANNEL_ACCOUNT_CODE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.18']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="76" package="Default">
        <name>OID_ASTERISK_CHANNEL_FORWARD_TO</name>
        <full_name>OID_ASTERISK_CHANNEL_FORWARD_TO</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.19']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="77" package="Default">
        <name>OID_ASTERISK_CHANNEL_UNQIUEID</name>
        <full_name>OID_ASTERISK_CHANNEL_UNQIUEID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.20']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="78" package="Default">
        <name>OID_ASTERISK_CHANNEL_CALL_GROUP</name>
        <full_name>OID_ASTERISK_CHANNEL_CALL_GROUP</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.21']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="79" package="Default">
        <name>OID_ASTERISK_CHANNEL_PICKUP_GROUP</name>
        <full_name>OID_ASTERISK_CHANNEL_PICKUP_GROUP</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.22']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="80" package="Default">
        <name>OID_ASTERISK_CHANNEL_STATE</name>
        <full_name>OID_ASTERISK_CHANNEL_STATE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.23']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="81" package="Default">
        <name>OID_ASTERISK_CHANNEL_MUTED</name>
        <full_name>OID_ASTERISK_CHANNEL_MUTED</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.24']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="82" package="Default">
        <name>OID_ASTERISK_CHANNEL_RINGS</name>
        <full_name>OID_ASTERISK_CHANNEL_RINGS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.25']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="83" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_DNID</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_DNID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.26']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="84" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_NUM</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_NUM</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.27']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="85" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_NAME</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_NAME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.28']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="86" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_ANI</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_ANI</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.29']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="87" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_RDNIS</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_RDNIS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.30']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="88" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_PRESENTATION</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_PRESENTATION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.31']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="89" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_ANI2</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_ANI2</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.32']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="90" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_TON</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_TON</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.33']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="91" package="Default">
        <name>OID_ASTERISK_CHANNEL_CID_TNS</name>
        <full_name>OID_ASTERISK_CHANNEL_CID_TNS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.34']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="92" package="Default">
        <name>OID_ASTERISK_CHANNEL_AMA_FLAGS</name>
        <full_name>OID_ASTERISK_CHANNEL_AMA_FLAGS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.35']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="93" package="Default">
        <name>OID_ASTERISK_CHANNEL_ADSI</name>
        <full_name>OID_ASTERISK_CHANNEL_ADSI</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.36']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="94" package="Default">
        <name>OID_ASTERISK_CHANNEL_TONE_ZONE</name>
        <full_name>OID_ASTERISK_CHANNEL_TONE_ZONE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.37']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="95" package="Default">
        <name>OID_ASTERISK_CHANNEL_HANGUP_CAUSE</name>
        <full_name>OID_ASTERISK_CHANNEL_HANGUP_CAUSE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.38']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="96" package="Default">
        <name>OID_ASTERISK_CHANNEL_VARIABLES</name>
        <full_name>OID_ASTERISK_CHANNEL_VARIABLES</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.39']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="97" package="Default">
        <name>OID_ASTERISK_CHANNEL_FLAGS</name>
        <full_name>OID_ASTERISK_CHANNEL_FLAGS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.40']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="98" package="Default">
        <name>OID_ASTERISK_CHANNEL_TRANSFER_CAP</name>
        <full_name>OID_ASTERISK_CHANNEL_TRANSFER_CAP</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.2.1.41']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="100" package="Default">
        <name>OID_ASTERISK_CHANNELS_BRIDGED</name>
        <full_name>OID_ASTERISK_CHANNELS_BRIDGED</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.5.5.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="741" package="Default">
        <name>CHANNEL_STATE_DOWN</name>
        <full_name>CHANNEL_STATE_DOWN</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="737">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="737" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="747" package="Default">
        <name>CHANNEL_STATE_RESERVED</name>
        <full_name>CHANNEL_STATE_RESERVED</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="743">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="743" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="753" package="Default">
        <name>CHANNEL_STATE_OFF_HOOK</name>
        <full_name>CHANNEL_STATE_OFF_HOOK</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="749">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="749" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="759" package="Default">
        <name>CHANNEL_STATE_DIALING</name>
        <full_name>CHANNEL_STATE_DIALING</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="755">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="755" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="765" package="Default">
        <name>CHANNEL_STATE_RING</name>
        <full_name>CHANNEL_STATE_RING</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="761">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="761" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="771" package="Default">
        <name>CHANNEL_STATE_RINGING</name>
        <full_name>CHANNEL_STATE_RINGING</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="767">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="767" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="777" package="Default">
        <name>CHANNEL_STATE_UP</name>
        <full_name>CHANNEL_STATE_UP</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="773">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="773" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="783" package="Default">
        <name>CHANNEL_STATE_BUSY</name>
        <full_name>CHANNEL_STATE_BUSY</full_name>
        <value><![CDATA[7]]></value>
        <docblock line="779">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="779" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="789" package="Default">
        <name>CHANNEL_STATE_DIALING_OFF_HOOK</name>
        <full_name>CHANNEL_STATE_DIALING_OFF_HOOK</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="785">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="785" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="795" package="Default">
        <name>CHANNEL_STATE_PRE_RING</name>
        <full_name>CHANNEL_STATE_PRE_RING</full_name>
        <value><![CDATA[9]]></value>
        <docblock line="791">
          <description><![CDATA[Possible state of an Asterisk channel as returned by `chanState()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="791" name="var" description="Possible state of an Asterisk channel as returned by `chanState()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1087" package="Default">
        <name>CHANNEL_AMA_FLAG_DEFAULT</name>
        <full_name>CHANNEL_AMA_FLAG_DEFAULT</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="1083">
          <description><![CDATA[Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1083" name="var" description="Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1093" package="Default">
        <name>CHANNEL_AMA_FLAG_OMIT</name>
        <full_name>CHANNEL_AMA_FLAG_OMIT</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="1089">
          <description><![CDATA[Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1089" name="var" description="Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1099" package="Default">
        <name>CHANNEL_AMA_FLAG_BILLING</name>
        <full_name>CHANNEL_AMA_FLAG_BILLING</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="1095">
          <description><![CDATA[Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1095" name="var" description="Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1105" package="Default">
        <name>CHANNEL_AMA_FLAG_DOCUMENTATION</name>
        <full_name>CHANNEL_AMA_FLAG_DOCUMENTATION</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="1101">
          <description><![CDATA[Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1101" name="var" description="Possible AMA flag of an Asterisk channel as returned by `chanAMAFlags()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1149" package="Default">
        <name>CHANNEL_ADSI_UNKNOWN</name>
        <full_name>CHANNEL_ADSI_UNKNOWN</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="1145">
          <description><![CDATA[Possible ADSI of an Asterisk channel as returned by `chanADSI()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1145" name="var" description="Possible ADSI of an Asterisk channel as returned by `chanADSI()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1155" package="Default">
        <name>CHANNEL_ADSI_AVAILABLE</name>
        <full_name>CHANNEL_ADSI_AVAILABLE</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="1151">
          <description><![CDATA[Possible ADSI of an Asterisk channel as returned by `chanADSI()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1151" name="var" description="Possible ADSI of an Asterisk channel as returned by `chanADSI()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1161" package="Default">
        <name>CHANNEL_ADSI_UNAVAILABLE</name>
        <full_name>CHANNEL_ADSI_UNAVAILABLE</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="1157">
          <description><![CDATA[Possible ADSI of an Asterisk channel as returned by `chanADSI()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1157" name="var" description="Possible ADSI of an Asterisk channel as returned by `chanADSI()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1167" package="Default">
        <name>CHANNEL_ADSI_OFF_HOOK_ONLY</name>
        <full_name>CHANNEL_ADSI_OFF_HOOK_ONLY</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="1163">
          <description><![CDATA[Possible ADSI of an Asterisk channel as returned by `chanADSI()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1163" name="var" description="Possible ADSI of an Asterisk channel as returned by `chanADSI()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1235" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_NOT_DEFINED</name>
        <full_name>CHANNEL_HANGUP_CAUSE_NOT_DEFINED</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="1231">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1231" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1241" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_UNREGISTERED</name>
        <full_name>CHANNEL_HANGUP_CAUSE_UNREGISTERED</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="1237">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1237" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1247" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_NORMAL</name>
        <full_name>CHANNEL_HANGUP_CAUSE_NORMAL</full_name>
        <value><![CDATA[16]]></value>
        <docblock line="1243">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1243" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1253" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_BUSY</name>
        <full_name>CHANNEL_HANGUP_CAUSE_BUSY</full_name>
        <value><![CDATA[17]]></value>
        <docblock line="1249">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1249" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1259" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_NO_ANSWER</name>
        <full_name>CHANNEL_HANGUP_CAUSE_NO_ANSWER</full_name>
        <value><![CDATA[19]]></value>
        <docblock line="1255">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1255" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1265" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_CONGESTION</name>
        <full_name>CHANNEL_HANGUP_CAUSE_CONGESTION</full_name>
        <value><![CDATA[34]]></value>
        <docblock line="1261">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1261" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1271" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_FAILURE</name>
        <full_name>CHANNEL_HANGUP_CAUSE_FAILURE</full_name>
        <value><![CDATA[38]]></value>
        <docblock line="1267">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1267" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1277" package="Default">
        <name>CHANNEL_HANGUP_CAUSE_NO_SUCH_DRIVER</name>
        <full_name>CHANNEL_HANGUP_CAUSE_NO_SUCH_DRIVER</full_name>
        <value><![CDATA[66]]></value>
        <docblock line="1273">
          <description><![CDATA[Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1273" name="var" description="Possible hangup cause of an Asterisk channel as returned by `chanHangupCause()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1411" package="Default">
        <name>CHANNEL_TRANSFER_CAPABILITY_SPEECH</name>
        <full_name>CHANNEL_TRANSFER_CAPABILITY_SPEECH</full_name>
        <value><![CDATA[0]]></value>
        <docblock line="1407">
          <description><![CDATA[Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1407" name="var" description="Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1417" package="Default">
        <name>CHANNEL_TRANSFER_CAPABILITY_DIGITAL</name>
        <full_name>CHANNEL_TRANSFER_CAPABILITY_DIGITAL</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="1413">
          <description><![CDATA[Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1413" name="var" description="Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1423" package="Default">
        <name>CHANNEL_TRANSFER_CAPABILITY_RESTRICTED_DIGITAL</name>
        <full_name>CHANNEL_TRANSFER_CAPABILITY_RESTRICTED_DIGITAL</full_name>
        <value><![CDATA[9]]></value>
        <docblock line="1419">
          <description><![CDATA[Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1419" name="var" description="Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1429" package="Default">
        <name>CHANNEL_TRANSFER_CAPABILITY_AUDIO_3K</name>
        <full_name>CHANNEL_TRANSFER_CAPABILITY_AUDIO_3K</full_name>
        <value><![CDATA[16]]></value>
        <docblock line="1425">
          <description><![CDATA[Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1425" name="var" description="Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1435" package="Default">
        <name>CHANNEL_TRANSFER_CAPABILITY_DIGITAL_WITH_TONES</name>
        <full_name>CHANNEL_TRANSFER_CAPABILITY_DIGITAL_WITH_TONES</full_name>
        <value><![CDATA[17]]></value>
        <docblock line="1431">
          <description><![CDATA[Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1431" name="var" description="Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Asterisk" line="1441" package="Default">
        <name>CHANNEL_TRANSFER_CAPABILITY_VIDEO</name>
        <full_name>CHANNEL_TRANSFER_CAPABILITY_VIDEO</full_name>
        <value><![CDATA[24]]></value>
        <docblock line="1437">
          <description><![CDATA[Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1437" name="var" description="Possible channel transfer capabilities of an Asterisk channel as returned by `chanTransferCap()`" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="798" namespace="OSS_SNMP\MIBS\Asterisk" package="Default">
        <name>$CHANNEL_STATES</name>
        <default><![CDATA[array(self::CHANNEL_STATE_DOWN => 'down', self::CHANNEL_STATE_RESERVED => 'reserved', self::CHANNEL_STATE_OFF_HOOK => 'offHook', self::CHANNEL_STATE_DIALING => 'dialing', self::CHANNEL_STATE_RING => 'ring', self::CHANNEL_STATE_RINGING => 'ringing', self::CHANNEL_STATE_UP => 'up', self::CHANNEL_STATE_BUSY => 'busy', self::CHANNEL_STATE_DIALING_OFF_HOOK => 'dialingOffHook', self::CHANNEL_STATE_PRE_RING => 'preRing')]]></default>
      </property>
      <property final="false" static="true" visibility="public" line="1108" namespace="OSS_SNMP\MIBS\Asterisk" package="Default">
        <name>$CHANNEL_AMA_FLAGS</name>
        <default><![CDATA[array(self::CHANNEL_AMA_FLAG_DEFAULT => 'default', self::CHANNEL_AMA_FLAG_OMIT => 'omit', self::CHANNEL_AMA_FLAG_BILLING => 'billing', self::CHANNEL_AMA_FLAG_DOCUMENTATION => 'documentation')]]></default>
      </property>
      <property final="false" static="true" visibility="public" line="1170" namespace="OSS_SNMP\MIBS\Asterisk" package="Default">
        <name>$CHANNEL_ADSIs</name>
        <default><![CDATA[array(self::CHANNEL_ADSI_UNKNOWN => 'unknown', self::CHANNEL_ADSI_AVAILABLE => 'available', self::CHANNEL_ADSI_UNAVAILABLE => 'unavailable', self::CHANNEL_ADSI_OFF_HOOK_ONLY => 'offHookOnly')]]></default>
      </property>
      <property final="false" static="true" visibility="public" line="1280" namespace="OSS_SNMP\MIBS\Asterisk" package="Default">
        <name>$CHANNEL_HANGUP_CAUSES</name>
        <default><![CDATA[array(self::CHANNEL_HANGUP_CAUSE_NOT_DEFINED => 'notDefined', self::CHANNEL_HANGUP_CAUSE_UNREGISTERED => 'unregistered', self::CHANNEL_HANGUP_CAUSE_NORMAL => 'normal', self::CHANNEL_HANGUP_CAUSE_BUSY => 'busy', self::CHANNEL_HANGUP_CAUSE_NO_ANSWER => 'noAnswer', self::CHANNEL_HANGUP_CAUSE_CONGESTION => 'congestion', self::CHANNEL_HANGUP_CAUSE_FAILURE => 'failure', self::CHANNEL_HANGUP_CAUSE_NO_SUCH_DRIVER => 'noSuchDriver')]]></default>
      </property>
      <property final="false" static="true" visibility="public" line="1444" namespace="OSS_SNMP\MIBS\Asterisk" package="Default">
        <name>$CHANNEL_TRANSFER_CAPABILITIES</name>
        <default><![CDATA[array(self::CHANNEL_TRANSFER_CAPABILITY_SPEECH => 'speech', self::CHANNEL_TRANSFER_CAPABILITY_DIGITAL => 'digital', self::CHANNEL_TRANSFER_CAPABILITY_RESTRICTED_DIGITAL => 'restrictedDigital', self::CHANNEL_TRANSFER_CAPABILITY_AUDIO_3K => 'audio3k', self::CHANNEL_TRANSFER_CAPABILITY_DIGITAL_WITH_TONES => 'digitalWithTones', self::CHANNEL_TRANSFER_CAPABILITY_VIDEO => 'video')]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="109" package="Default">
        <name>active</name>
        <full_name>active</full_name>
        <docblock line="102">
          <description><![CDATA[Returns the current number of active channels.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Current number of active channels.</p>
</blockquote>]]></long-description>
          <tag line="102" name="return" description="The current number of active channels." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="122" package="Default">
        <name>supported</name>
        <full_name>supported</full_name>
        <docblock line="115">
          <description><![CDATA[Returns the number of channel types (technologies) supported.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Number of channel types (technologies) supported.</p>
</blockquote>]]></long-description>
          <tag line="115" name="return" description="The number of channel types (technologies) supported." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="135" package="Default">
        <name>names</name>
        <full_name>names</full_name>
        <docblock line="128">
          <description><![CDATA[Array of supported channel type names]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Unique name of the technology we are describing.</p>
</blockquote>]]></long-description>
          <tag line="128" name="return" description="Supported channel type names" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="147" package="Default">
        <name>descriptions</name>
        <full_name>descriptions</full_name>
        <docblock line="140">
          <description><![CDATA[Array of supported channel type descriptions]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Description of the channel type (technology).</p>
</blockquote>]]></long-description>
          <tag line="140" name="return" description="Supported channel type descriptions" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="159" package="Default">
        <name>deviceStates</name>
        <full_name>deviceStates</full_name>
        <docblock line="152">
          <description><![CDATA[Array of supported channel type device state capability]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Whether the current technology can hold device states.</p>
</blockquote>]]></long-description>
          <tag line="152" name="return" description="Whether the current technology can hold device states." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="171" package="Default">
        <name>progressIndications</name>
        <full_name>progressIndications</full_name>
        <docblock line="164">
          <description><![CDATA[Array of supported channel type progress indication capability]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Whether the current technology supports progress indication.</p>
</blockquote>]]></long-description>
          <tag line="164" name="return" description="Whether the current technology supports progress indication." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="184" package="Default">
        <name>transfers</name>
        <full_name>transfers</full_name>
        <docblock line="176">
          <description><![CDATA[Array of supported channel type transfer capability]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Whether the current technology supports transfers, where
  Asterisk can get out from inbetween two bridged channels.</p>
</blockquote>]]></long-description>
          <tag line="176" name="return" description="Whether the current technology transfers" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="196" package="Default">
        <name>activeCalls</name>
        <full_name>activeCalls</full_name>
        <docblock line="189">
          <description><![CDATA[Array of active calls on supported channels]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Number of active channels using the current technology.</p>
</blockquote>]]></long-description>
          <tag line="189" name="return" description="Active calls on supported channels" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="208" package="Default">
        <name>bridged</name>
        <full_name>bridged</full_name>
        <docblock line="201">
          <description><![CDATA[Number of channels currently in a bridged state.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Number of channels currently in a bridged state.</p>
</blockquote>]]></long-description>
          <tag line="201" name="return" description="Array of active calls on supported channels" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="239" package="Default">
        <name>details</name>
        <full_name>details</full_name>
        <docblock line="213">
          <description><![CDATA[Utility function to gather channel details together in an associative array.]]></description>
          <long-description><![CDATA[<p>Returns an array of support channel types. For example:</p>

<pre><code>Array
(
    ....
    [SIP] =&gt; Array
        (
            [name] =&gt; SIP
            [index] =&gt; 5
            [description] =&gt; Session Initiation Protocol (SIP)
            [hasDeviceState] =&gt; 1
            [hasProgressIndications] =&gt; 1
            [canTransfer] =&gt; 1
            [activeCalls] =&gt; 0
        )
    ....
)
</code></pre>

<p>If you chose to index by SNMP table entries, the above element would be indexed with <code>5</code> rather than <code>SIP</code>.</p>]]></long-description>
          <tag line="213" name="param" description="If true, the array is indexed using the SNMP table index rather than the unique channel type name" type="bool" variable="$useIndex">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="213" name="return" description="Channel details as an associative array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$useIndex</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="284" package="Default">
        <name>chanName</name>
        <full_name>chanName</full_name>
        <docblock line="274">
          <description><![CDATA[Active Channel Information: Name of the current channel.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Name of the current channel.</p>
</blockquote>]]></long-description>
          <tag line="274" name="return" description="Name of the current channel." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="306" package="Default">
        <name>chanLanguage</name>
        <full_name>chanLanguage</full_name>
        <docblock line="296">
          <description><![CDATA[Active Channel Information: Which language the current channel is configured to use -- used mainly for prompts.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Which language the current channel is configured to use -- used mainly for prompts.</p>
</blockquote>]]></long-description>
          <tag line="296" name="return" description="Which language the current channel is configured to use -- used mainly for prompts." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="328" package="Default">
        <name>chanType</name>
        <full_name>chanType</full_name>
        <docblock line="318">
          <description><![CDATA[Active Channel Information: Underlying technology for the current channel.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Underlying technology for the current channel.</p>
</blockquote>]]></long-description>
          <tag line="318" name="return" description="Underlying technology for the current channel." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="350" package="Default">
        <name>chanMusicClass</name>
        <full_name>chanMusicClass</full_name>
        <docblock line="340">
          <description><![CDATA[Active Channel Information: Music class to be used for Music on Hold for this channel.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Music class to be used for Music on Hold for this channel.</p>
</blockquote>]]></long-description>
          <tag line="340" name="return" description="Music class to be used for Music on Hold for this channel." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="372" package="Default">
        <name>chanBridge</name>
        <full_name>chanBridge</full_name>
        <docblock line="362">
          <description><![CDATA[Active Channel Information: Which channel this channel is currently bridged (in a conversation) with.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Which channel this channel is currently bridged (in a conversation) with.</p>
</blockquote>]]></long-description>
          <tag line="362" name="return" description="Which channel this channel is currently bridged (in a conversation) with." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="394" package="Default">
        <name>chanMasq</name>
        <full_name>chanMasq</full_name>
        <docblock line="384">
          <description><![CDATA[Active Channel Information: Channel masquerading for us.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Channel masquerading for us.</p>
</blockquote>]]></long-description>
          <tag line="384" name="return" description="Channel masquerading for us." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="416" package="Default">
        <name>chanMasqr</name>
        <full_name>chanMasqr</full_name>
        <docblock line="406">
          <description><![CDATA[Active Channel Information: Channel we are masquerading for.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Channel we are masquerading for.</p>
</blockquote>]]></long-description>
          <tag line="406" name="return" description="Channel we are masquerading for." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="438" package="Default">
        <name>chanWhenHangup</name>
        <full_name>chanWhenHangup</full_name>
        <docblock line="428">
          <description><![CDATA[Active Channel Information: How long until this channel will be hung up.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>How long until this channel will be hung up.</p>
</blockquote>]]></long-description>
          <tag line="428" name="return" description="How long until this channel will be hung up." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="460" package="Default">
        <name>chanApp</name>
        <full_name>chanApp</full_name>
        <docblock line="450">
          <description><![CDATA[Active Channel Information: Current application for the channel.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current application for the channel.</p>
</blockquote>]]></long-description>
          <tag line="450" name="return" description="Current application for the channel." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="482" package="Default">
        <name>chanData</name>
        <full_name>chanData</full_name>
        <docblock line="472">
          <description><![CDATA[Active Channel Information: Arguments passed to the current application.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Arguments passed to the current application.</p>
</blockquote>]]></long-description>
          <tag line="472" name="return" description="Arguments passed to the current application." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="504" package="Default">
        <name>chanContext</name>
        <full_name>chanContext</full_name>
        <docblock line="494">
          <description><![CDATA[Active Channel Information: Current extension context.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current extension context.</p>
</blockquote>]]></long-description>
          <tag line="494" name="return" description="Current extension context." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="526" package="Default">
        <name>chanMacroContext</name>
        <full_name>chanMacroContext</full_name>
        <docblock line="516">
          <description><![CDATA[Active Channel Information: Current macro context.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current macro context.</p>
</blockquote>]]></long-description>
          <tag line="516" name="return" description="Current macro context." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="548" package="Default">
        <name>chanMacroExten</name>
        <full_name>chanMacroExten</full_name>
        <docblock line="538">
          <description><![CDATA[Active Channel Information: Current macro extension.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current macro extension.</p>
</blockquote>]]></long-description>
          <tag line="538" name="return" description="Current macro extension." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="570" package="Default">
        <name>chanMacroPri</name>
        <full_name>chanMacroPri</full_name>
        <docblock line="560">
          <description><![CDATA[Active Channel Information: Current macro priority.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current macro priority.</p>
</blockquote>]]></long-description>
          <tag line="560" name="return" description="Current macro priority." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="592" package="Default">
        <name>chanExten</name>
        <full_name>chanExten</full_name>
        <docblock line="582">
          <description><![CDATA[Active Channel Information: Current extension.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current extension.</p>
</blockquote>]]></long-description>
          <tag line="582" name="return" description="Current extension." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="614" package="Default">
        <name>chanPri</name>
        <full_name>chanPri</full_name>
        <docblock line="604">
          <description><![CDATA[Active Channel Information: Current priority.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Current priority.</p>
</blockquote>]]></long-description>
          <tag line="604" name="return" description="Current priority." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="636" package="Default">
        <name>chanAccountCode</name>
        <full_name>chanAccountCode</full_name>
        <docblock line="626">
          <description><![CDATA[Active Channel Information: Account Code for billing.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Account Code for billing.</p>
</blockquote>]]></long-description>
          <tag line="626" name="return" description="Account Code for billing." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="658" package="Default">
        <name>chanForwardTo</name>
        <full_name>chanForwardTo</full_name>
        <docblock line="648">
          <description><![CDATA[Active Channel Information: Where to forward to if asked to dial on this interface.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Where to forward to if asked to dial on this interface.</p>
</blockquote>]]></long-description>
          <tag line="648" name="return" description="Where to forward to if asked to dial on this interface." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="680" package="Default">
        <name>chanUniqueId</name>
        <full_name>chanUniqueId</full_name>
        <docblock line="670">
          <description><![CDATA[Active Channel Information: Unique Channel Identifier.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Unique Channel Identifier.</p>
</blockquote>]]></long-description>
          <tag line="670" name="return" description="Unique Channel Identifier." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="702" package="Default">
        <name>chanCallGroup</name>
        <full_name>chanCallGroup</full_name>
        <docblock line="692">
          <description><![CDATA[Active Channel Information: Call Group.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Call Group.</p>
</blockquote>]]></long-description>
          <tag line="692" name="return" description="Call Group." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="724" package="Default">
        <name>chanPickupGroup</name>
        <full_name>chanPickupGroup</full_name>
        <docblock line="714">
          <description><![CDATA[Active Channel Information: Pickup Group.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Pickup Group.</p>
</blockquote>]]></long-description>
          <tag line="714" name="return" description="Pickup Group." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="822" package="Default">
        <name>chanState</name>
        <full_name>chanState</full_name>
        <docblock line="811">
          <description><![CDATA[Active Channel Information: Channel state (see channel state constants).]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Channel state (see channel state constants).</p>
</blockquote>]]></long-description>
          <tag line="811" name="param" description="If true, use the `$CHANNEL_STATES` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="811" name="return" description="Channel state (see channel state constants)." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="822">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="849" package="Default">
        <name>chanMuted</name>
        <full_name>chanMuted</full_name>
        <docblock line="839">
          <description><![CDATA[Active Channel Information: Transmission of voice data has been muted.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Transmission of voice data has been muted.</p>
</blockquote>]]></long-description>
          <tag line="839" name="return" description="Transmission of voice data has been muted." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="871" package="Default">
        <name>chanRings</name>
        <full_name>chanRings</full_name>
        <docblock line="861">
          <description><![CDATA[Active Channel Information: Number of rings so far.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Number of rings so far.</p>
</blockquote>]]></long-description>
          <tag line="861" name="return" description="Number of rings so far." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="893" package="Default">
        <name>chanCidDNID</name>
        <full_name>chanCidDNID</full_name>
        <docblock line="883">
          <description><![CDATA[Active Channel Information: Dialled Number ID.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Dialled Number ID.</p>
</blockquote>]]></long-description>
          <tag line="883" name="return" description="Dialled Number ID." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="915" package="Default">
        <name>chanCidNum</name>
        <full_name>chanCidNum</full_name>
        <docblock line="905">
          <description><![CDATA[Active Channel Information: Caller Number.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Caller Number.</p>
</blockquote>]]></long-description>
          <tag line="905" name="return" description="Caller Number." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="937" package="Default">
        <name>chanCidName</name>
        <full_name>chanCidName</full_name>
        <docblock line="927">
          <description><![CDATA[Active Channel Information: Caller Name.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Caller Name.</p>
</blockquote>]]></long-description>
          <tag line="927" name="return" description="Caller Name." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="959" package="Default">
        <name>chanCidANI</name>
        <full_name>chanCidANI</full_name>
        <docblock line="949">
          <description><![CDATA[Active Channel Information: ANI]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>ANI</p>
</blockquote>]]></long-description>
          <tag line="949" name="return" description="ANI" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="981" package="Default">
        <name>chanCidRDNIS</name>
        <full_name>chanCidRDNIS</full_name>
        <docblock line="971">
          <description><![CDATA[Active Channel Information: Redirected Dialled Number Service.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Redirected Dialled Number Service.</p>
</blockquote>]]></long-description>
          <tag line="971" name="return" description="Redirected Dialled Number Service." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1003" package="Default">
        <name>chanCidPresentation</name>
        <full_name>chanCidPresentation</full_name>
        <docblock line="993">
          <description><![CDATA[Active Channel Information: Number Presentation/Screening.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Number Presentation/Screening.</p>
</blockquote>]]></long-description>
          <tag line="993" name="return" description="Number Presentation/Screening." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1025" package="Default">
        <name>chanCidANI2</name>
        <full_name>chanCidANI2</full_name>
        <docblock line="1015">
          <description><![CDATA[Active Channel Information: ANI 2 (info digit).]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>ANI 2 (info digit).</p>
</blockquote>]]></long-description>
          <tag line="1015" name="return" description="ANI 2 (info digit)." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1047" package="Default">
        <name>chanCidTON</name>
        <full_name>chanCidTON</full_name>
        <docblock line="1037">
          <description><![CDATA[Active Channel Information: Type of Number.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Type of Number.</p>
</blockquote>]]></long-description>
          <tag line="1037" name="return" description="Type of Number." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1069" package="Default">
        <name>chanCidTNS</name>
        <full_name>chanCidTNS</full_name>
        <docblock line="1059">
          <description><![CDATA[Active Channel Information: Transit Network Select.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Transit Network Select.</p>
</blockquote>]]></long-description>
          <tag line="1059" name="return" description="Transit Network Select." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1126" package="Default">
        <name>chanAMAFlags</name>
        <full_name>chanAMAFlags</full_name>
        <docblock line="1115">
          <description><![CDATA[Active Channel Information: AMA Flags.]]></description>
          <long-description><![CDATA[<p>(See constants)</p>

<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>AMA Flags. (See constants)</p>
</blockquote>]]></long-description>
          <tag line="1115" name="param" description="If true, use the `$CHANNEL_AMA_FLAGS` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1115" name="return" description="AMA Flags. (See constants)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1126">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1190" package="Default">
        <name>chanADSI</name>
        <full_name>chanADSI</full_name>
        <docblock line="1179">
          <description><![CDATA[Active Channel Information: Whether or not ADSI is detected on CPE.]]></description>
          <long-description><![CDATA[<p>(see constants)</p>

<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Whether or not ADSI is detected on CPE. (see constants)</p>
</blockquote>]]></long-description>
          <tag line="1179" name="param" description="If true, use the `$CHANNEL_ADSIs` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1179" name="return" description="Whether or not ADSI is detected on CPE. (see constants)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1190">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1217" package="Default">
        <name>chanToneZone</name>
        <full_name>chanToneZone</full_name>
        <docblock line="1207">
          <description><![CDATA[Active Channel Information: Indication zone to use for channel.]]></description>
          <long-description><![CDATA[<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Indication zone to use for channel.</p>
</blockquote>]]></long-description>
          <tag line="1207" name="return" description="Indication zone to use for channel." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1303" package="Default">
        <name>chanHangupCause</name>
        <full_name>chanHangupCause</full_name>
        <docblock line="1292">
          <description><![CDATA[Active Channel Information: Why is the channel hung up.]]></description>
          <long-description><![CDATA[<p>(see constants)</p>

<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Why is the channel hung up. (see constants)</p>
</blockquote>]]></long-description>
          <tag line="1292" name="param" description="If true, use the `$CHANNEL_HANGUP_CAUSES` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1292" name="return" description="Why is the channel hung up. (see constants)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1303">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1333" package="Default">
        <name>chanVariables</name>
        <full_name>chanVariables</full_name>
        <docblock line="1320">
          <description><![CDATA[Active Channel Information: Channel Variables defined for this channel.]]></description>
          <long-description><![CDATA[<p>Returns an array of arrays where the inner array is key/value pairs
of channel variables for that channel: <code>[varName] =&gt; [varValue]</code></p>

<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Channel Variables defined for this channel.</p>
</blockquote>]]></long-description>
          <tag line="1320" name="return" description="Channel Variables defined for this channel." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="OSS_SNMP\MIBS\Asterisk" line="1357" package="Default">
        <name>_chanVarsToArray</name>
        <full_name>_chanVarsToArray</full_name>
        <docblock line="1350">
          <description><![CDATA[Utility function for `chanVariables()` to break the string returned by
OID_ASTERISK_CHANNEL_VARIABLES into an array of key / value pairs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1350" name="param" description="String containing channel variables (from `chanVariables()`" type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1350" name="return" description="An array of `[varName] =&gt; [varValue]` pairs for the channel" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="1357">
          <name>$str</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1392" package="Default">
        <name>chanFlags</name>
        <full_name>chanFlags</full_name>
        <docblock line="1367">
          <description><![CDATA[Active Channel Information: Flags set on this channel.]]></description>
          <long-description><![CDATA[<p>Returns a HEX number - but I could not map it to the following from Asterisk docs:</p>

<blockquote>
  <p>BITS {
     wantsJitter(0),
     deferDTMF(1),
     writeInterrupt(2),
     blocking(3),
     zombie(4),
     exception(5),
     musicOnHold(6),
     spying(7),
     nativeBridge(8),
     autoIncrementingLoop(9)
  }</p>
</blockquote>

<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Flags set on this channel. (see constants)</p>
</blockquote>]]></long-description>
          <tag line="1367" name="return" description="Flags set on this channel. (see constants)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1464" package="Default">
        <name>chanTransferCap</name>
        <full_name>chanTransferCap</full_name>
        <docblock line="1453">
          <description><![CDATA[Active Channel Information: Transfer Capabilities for this channel.]]></description>
          <long-description><![CDATA[<p>(see constants)</p>

<p>NB: SNMP exceptions are caught and in such cases null is returned
as not all channels have all properties.</p>

<blockquote>
  <p>Transfer Capabilities for this channel. (see constants)</p>
</blockquote>]]></long-description>
          <tag line="1453" name="param" description="If true, use the `$CHANNEL_TRANSFER_CAPABILITIES` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1453" name="return" description="Transfer Capabilities for this channel. (see constants)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1464">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Asterisk" line="1517" package="Default">
        <name>channelDetails</name>
        <full_name>channelDetails</full_name>
        <docblock line="1481">
          <description><![CDATA[Utility function to gather together all the details of individual channels into an array.]]></description>
          <long-description><![CDATA[<p>Essentially, this function calls all <code>chanXXX()</code> functions to return the details for
individual channels gathered together. E.g.</p>

<pre><code>Array
(
    ....
    [SIP/foobar-654-00000372] =&gt; Array
    (
        [chanName] =&gt; SIP/foobar-654-00000372
        [chanLanguage] =&gt; en
        [chanType] =&gt; SIP
        [chanMusicClass] =&gt; (null)
        ...
        [chanVariables] =&gt; Array
        (
            [DIALEDPEERNUMBER] =&gt; foobar-654
            [SIPCALLID] =&gt; 1be189fa6281ffc1108db32935f05016@192.168.7.7:5060
        )
        [chanFlags] =&gt; 1020
        [chanTransferCap] =&gt; speech
    )
    ....
)
</code></pre>

<p>The function returns an array of all channels. Unknown parameters within the channel are
set to null.</p>

<p>An empty array is returned if there are no active channels.</p>]]></long-description>
          <tag line="1481" name="param" description="Translate parameters when possible" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1481" name="param" description="Rather than indexing the outer array with the unique channel name, index with the SNMP table position" type="bool" variable="$useIndexes">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1481" name="return" description="All the details of individual channels into an array." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1517">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="1517">
          <name>$useIndexes</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Asterisk/Channels.php</error>
      <error line="798" code="50018">No DocBlock was found for property $CHANNEL_STATES</error>
      <error line="1108" code="50018">No DocBlock was found for property $CHANNEL_AMA_FLAGS</error>
      <error line="1170" code="50018">No DocBlock was found for property $CHANNEL_ADSIs</error>
      <error line="1280" code="50018">No DocBlock was found for property $CHANNEL_HANGUP_CAUSES</error>
      <error line="1444" code="50018">No DocBlock was found for property $CHANNEL_TRANSFER_CAPABILITIES</error>
    </parse_markers>
  </file>
  <file path="MIBS/Entity.php" hash="4bdd168f90f57433ebe7840328be687e" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Entity</name>
      <full_name>\OSS_SNMP\MIBS\Entity</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on generic devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="46" package="Default">
        <name>OID_ENTITY_PHYSICAL_CLASS</name>
        <full_name>OID_ENTITY_PHYSICAL_CLASS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.47.1.1.1.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="47" package="Default">
        <name>OID_ENTITY_PHYSICAL_PARENT_REL_POS</name>
        <full_name>OID_ENTITY_PHYSICAL_PARENT_REL_POS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.47.1.1.1.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="48" package="Default">
        <name>OID_ENTITY_PHYSICAL_ALIAS</name>
        <full_name>OID_ENTITY_PHYSICAL_ALIAS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.47.1.1.1.1.14']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="57" package="Default">
        <name>PHYSICAL_CLASS_CHASSIS</name>
        <full_name>PHYSICAL_CLASS_CHASSIS</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="53">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="63" package="Default">
        <name>PHYSICAL_CLASS_CONTAINER</name>
        <full_name>PHYSICAL_CLASS_CONTAINER</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="59">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="69" package="Default">
        <name>PHYSICAL_CLASS_POWER_SUPPLY</name>
        <full_name>PHYSICAL_CLASS_POWER_SUPPLY</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="65">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="75" package="Default">
        <name>PHYSICAL_CLASS_FAN</name>
        <full_name>PHYSICAL_CLASS_FAN</full_name>
        <value><![CDATA[7]]></value>
        <docblock line="71">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="81" package="Default">
        <name>PHYSICAL_CLASS_SENSOR</name>
        <full_name>PHYSICAL_CLASS_SENSOR</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="77">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="87" package="Default">
        <name>PHYSICAL_CLASS_MODULE</name>
        <full_name>PHYSICAL_CLASS_MODULE</full_name>
        <value><![CDATA[9]]></value>
        <docblock line="83">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="93" package="Default">
        <name>PHYSICAL_CLASS_PORT</name>
        <full_name>PHYSICAL_CLASS_PORT</full_name>
        <value><![CDATA[10]]></value>
        <docblock line="89">
          <description><![CDATA[Physical entitly class type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="var" description="entitly class type" type="\OSS_SNMP\MIBS\Physical">
            <type by_reference="false">\OSS_SNMP\MIBS\Physical</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="100" namespace="OSS_SNMP\MIBS" package="Default">
        <name>$ENTITY_PHSYICAL_CLASS</name>
        <default><![CDATA[array(self::PHYSICAL_CLASS_CHASSIS => 'chassis', self::PHYSICAL_CLASS_CONTAINER => 'container', self::PHYSICAL_CLASS_POWER_SUPPLY => 'powerSupply', self::PHYSICAL_CLASS_FAN => 'fan', self::PHYSICAL_CLASS_SENSOR => 'sensor', self::PHYSICAL_CLASS_MODULE => 'module', self::PHYSICAL_CLASS_PORT => 'port')]]></default>
        <docblock line="96">
          <description><![CDATA[Translator array for physical class types]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="var" description="Translator array for physical class types" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="119" package="Default">
        <name>physicalClass</name>
        <full_name>physicalClass</full_name>
        <docblock line="110">
          <description><![CDATA[Returns an associate array of entPhysicalClass]]></description>
          <long-description><![CDATA[<p>e.g.  [1005] => 10 / port</p>]]></long-description>
          <tag line="110" name="param" description="If true, return the string representation via self::$ENTITY_PHSYICAL_CLASS" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="110" name="return" description="Associate array of entPhysicalClass" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="138" package="Default">
        <name>physicalParentRelPos</name>
        <full_name>physicalParentRelPos</full_name>
        <docblock line="130">
          <description><![CDATA[Returns an associate array of entPhysicalParentRelPos]]></description>
          <long-description><![CDATA[<p>e.g.  [1005] => 1</p>]]></long-description>
          <tag line="130" name="return" description="Associate array of entPhysicalParentRelPos" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="151" package="Default">
        <name>physicalAlias</name>
        <full_name>physicalAlias</full_name>
        <docblock line="143">
          <description><![CDATA[Returns an associate array of physical aliases]]></description>
          <long-description><![CDATA[<p>e.g.  [1005] => 10001</p>]]></long-description>
          <tag line="143" name="return" description="Associate array of physical aliases" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="166" package="Default">
        <name>relPosToAlias</name>
        <full_name>relPosToAlias</full_name>
        <docblock line="157">
          <description><![CDATA[Utility function for MIBS\Cisco\RSTP::rstpPortRole() to try and translate a port index
into a port ID]]></description>
          <long-description><![CDATA[<p>Makes a number of assumptions including that it has to be of type port, that the ID must be >10000,
etc.</p>]]></long-description>
          <tag line="157" name="return" description="of relative positions to port IDs" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Entity.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/MRV.php" hash="ac8d899ff24e228b42b2b13dacb3b47e" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>MRV</name>
      <full_name>\OSS_SNMP\MIBS\MRV</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on MRV devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/MRV.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/System.php" hash="144c79a2b7af19401a19d8e92330fa9c" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>System</name>
      <full_name>\OSS_SNMP\MIBS\System</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on generic devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="46" package="Default">
        <name>OID_SYSTEM_DESCRIPTION</name>
        <full_name>OID_SYSTEM_DESCRIPTION</full_name>
        <value><![CDATA['.1.3.6.1.2.1.1.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="47" package="Default">
        <name>OID_SYSTEM_UPTIME</name>
        <full_name>OID_SYSTEM_UPTIME</full_name>
        <value><![CDATA['.1.3.6.1.2.1.1.3.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="48" package="Default">
        <name>OID_SYSTEM_CONTACT</name>
        <full_name>OID_SYSTEM_CONTACT</full_name>
        <value><![CDATA['.1.3.6.1.2.1.1.4.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="49" package="Default">
        <name>OID_SYSTEM_NAME</name>
        <full_name>OID_SYSTEM_NAME</full_name>
        <value><![CDATA['.1.3.6.1.2.1.1.5.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="50" package="Default">
        <name>OID_SYSTEM_LOCATION</name>
        <full_name>OID_SYSTEM_LOCATION</full_name>
        <value><![CDATA['.1.3.6.1.2.1.1.6.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="51" package="Default">
        <name>OID_SYSTEM_SERVICES</name>
        <full_name>OID_SYSTEM_SERVICES</full_name>
        <value><![CDATA['.1.3.6.1.2.1.1.7.0']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="58" package="Default">
        <name>description</name>
        <full_name>description</full_name>
        <docblock line="53">
          <description><![CDATA[Returns the system description of the device]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="return" description="The system description of the device" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="72" package="Default">
        <name>uptime</name>
        <full_name>uptime</full_name>
        <docblock line="63">
          <description><![CDATA[Returns the system uptime of the device]]></description>
          <long-description><![CDATA[<p>"The time (in hundredths of a second) since the
network management portion of the system was last
re-initialized."</p>]]></long-description>
          <tag line="63" name="return" description="The system uptime of the device (in timeticks)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="82" package="Default">
        <name>contact</name>
        <full_name>contact</full_name>
        <docblock line="77">
          <description><![CDATA[Returns the system contact of the device]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="return" description="The system contact of the device" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="92" package="Default">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="87">
          <description><![CDATA[Returns the system name of the device]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="return" description="The system name of the device" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="102" package="Default">
        <name>location</name>
        <full_name>location</full_name>
        <docblock line="97">
          <description><![CDATA[Returns the system location of the device]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="return" description="The system location of the device" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="137" package="Default">
        <name>services</name>
        <full_name>services</full_name>
        <docblock line="107">
          <description><![CDATA[Returns the system services of the device]]></description>
          <long-description><![CDATA[<p>"A value which indicates the set of services that
this entity primarily offers.</p>

<p>The value is a sum.  This sum initially takes the
value zero, Then, for each layer, L, in the range
1 through 7, that this node performs transactions
for, 2 raised to (L - 1) is added to the sum.  For
example, a node which performs primarily routing
functions would have a value of 4 (2^(3-1)).  In
contrast, a node which is a host offering
application services would have a value of 72
(2^(4-1) + 2^(7-1)).  Note that in the context of
the Internet suite of protocols, values should be
calculated accordingly:</p>

<pre><code>layer  functionality
    1  physical (e.g., repeaters)
    2  datalink/subnetwork (e.g., bridges)
    3  internet (e.g., IP gateways)
    4  end-to-end  (e.g., IP hosts)
    7  applications (e.g., mail relays)
</code></pre>

<p>For systems including OSI protocols, layers 5 and
6 may also be counted."</p>]]></long-description>
          <tag line="107" name="return" description="The system services of the device" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="151" package="Default">
        <name>getAll</name>
        <full_name>getAll</full_name>
        <docblock line="143">
          <description><![CDATA[Gets all system values as an associate array]]></description>
          <long-description><![CDATA[<p>The keys of the array are contact, description, location,
    name, services, uptime</p>]]></long-description>
          <tag line="143" name="return" description="All system values as an associate array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/System.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/MRV/System.php" hash="3938ef92d7cd4406d673c87de8ddc48c" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\MRV" line="49" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>System</name>
      <full_name>\OSS_SNMP\MIBS\MRV\System</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on MRV devices]]></description>
        <long-description><![CDATA[<p>Specifically written for the LX-40xx series console servers</p>]]></long-description>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\MRV\http://service.mrv.com/downloads/mibs5.3.2.zip" refers="\OSS_SNMP\MIBS\MRV\http://service.mrv.com/downloads/mibs5.3.2.zip"/>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\MRV\http://service.mrv.com/support/tech_docs/36/974" refers="\OSS_SNMP\MIBS\MRV\http://service.mrv.com/support/tech_docs/36/974"/>
        <tag line="38" name="copyright" description="Copyright (c) 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\MRV" line="52" package="Default">
        <name>OID_MRV_OS_IMAGE</name>
        <full_name>OID_MRV_OS_IMAGE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.33.100.1.1.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\MRV" line="53" package="Default">
        <name>OID_MRV_MODEL</name>
        <full_name>OID_MRV_MODEL</full_name>
        <value><![CDATA['.1.3.6.1.4.1.33.100.1.1.12.0']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\MRV" line="60" package="Default">
        <name>osImage</name>
        <full_name>osImage</full_name>
        <docblock line="55">
          <description><![CDATA[Returns the operating system image name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="return" description="The operating system image name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\MRV" line="70" package="Default">
        <name>model</name>
        <full_name>model</full_name>
        <docblock line="65">
          <description><![CDATA[Returns the hardware model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="The hardware model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/MRV/System.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/BGP.php" hash="96b789075e3e4f5fc242ef52cc5f705b" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="45" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>BGP</name>
      <full_name>\OSS_SNMP\MIBS\BGP</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 BGP queries]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\http://tools.cisco.com/Support/SNMP/do/BrowseOID.do?local=en&amp;translate=Translate&amp;objectInput=1.3.6.1.2.1.15" refers="\OSS_SNMP\MIBS\http://tools.cisco.com/Support/SNMP/do/BrowseOID.do?local=en&amp;translate=Translate&amp;objectInput=1.3.6.1.2.1.15"/>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="48" package="Default">
        <name>OID_BGP_VERSION</name>
        <full_name>OID_BGP_VERSION</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="50" package="Default">
        <name>OID_BGP_LOCAL_ASN</name>
        <full_name>OID_BGP_LOCAL_ASN</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="52" package="Default">
        <name>OID_BGP_PEER_IDENTIFIER</name>
        <full_name>OID_BGP_PEER_IDENTIFIER</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="53" package="Default">
        <name>OID_BGP_PEER_CONNECTION_STATE</name>
        <full_name>OID_BGP_PEER_CONNECTION_STATE</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="54" package="Default">
        <name>OID_BGP_PEER_ADMIN_STATE</name>
        <full_name>OID_BGP_PEER_ADMIN_STATE</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="55" package="Default">
        <name>OID_BGP_PEER_NEGOTIATED_VERSION</name>
        <full_name>OID_BGP_PEER_NEGOTIATED_VERSION</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="56" package="Default">
        <name>OID_BGP_PEER_LOCAL_ADDRESS</name>
        <full_name>OID_BGP_PEER_LOCAL_ADDRESS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="57" package="Default">
        <name>OID_BGP_PEER_LOCAL_PORT</name>
        <full_name>OID_BGP_PEER_LOCAL_PORT</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="58" package="Default">
        <name>OID_BGP_PEER_REMOTE_ADDR</name>
        <full_name>OID_BGP_PEER_REMOTE_ADDR</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.7']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="59" package="Default">
        <name>OID_BGP_PEER_REMOTE_PORT</name>
        <full_name>OID_BGP_PEER_REMOTE_PORT</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.8']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="60" package="Default">
        <name>OID_BGP_PEER_REMOTE_ASN</name>
        <full_name>OID_BGP_PEER_REMOTE_ASN</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.9']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="61" package="Default">
        <name>OID_BGP_PEER_IN_UPDATES</name>
        <full_name>OID_BGP_PEER_IN_UPDATES</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.10']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="62" package="Default">
        <name>OID_BGP_PEER_OUT_UPDATES</name>
        <full_name>OID_BGP_PEER_OUT_UPDATES</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.11']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="63" package="Default">
        <name>OID_BGP_PEER_IN_TOTAL_MESSAGES</name>
        <full_name>OID_BGP_PEER_IN_TOTAL_MESSAGES</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.12']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="64" package="Default">
        <name>OID_BGP_PEER_OUT_TOTAL_MESSAGES</name>
        <full_name>OID_BGP_PEER_OUT_TOTAL_MESSAGES</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.13']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="65" package="Default">
        <name>OID_BGP_PEER_LAST_ERROR</name>
        <full_name>OID_BGP_PEER_LAST_ERROR</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.14']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="66" package="Default">
        <name>OID_BGP_PEER_FSM_ESTABLISHED_TRANSITIONS</name>
        <full_name>OID_BGP_PEER_FSM_ESTABLISHED_TRANSITIONS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.15']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="67" package="Default">
        <name>OID_BGP_PEER_FSM_ESTABLISHED_TIME</name>
        <full_name>OID_BGP_PEER_FSM_ESTABLISHED_TIME</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.16']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="68" package="Default">
        <name>OID_BGP_PEER_CONNECT_RETRY_INTERVAL</name>
        <full_name>OID_BGP_PEER_CONNECT_RETRY_INTERVAL</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.17']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="69" package="Default">
        <name>OID_BGP_PEER_HOLD_TIME</name>
        <full_name>OID_BGP_PEER_HOLD_TIME</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.18']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="70" package="Default">
        <name>OID_BGP_PEER_KEEP_ALIVE</name>
        <full_name>OID_BGP_PEER_KEEP_ALIVE</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.19']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="71" package="Default">
        <name>OID_BGP_PEER_HOLD_TIME_CONFIGURED</name>
        <full_name>OID_BGP_PEER_HOLD_TIME_CONFIGURED</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.20']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="72" package="Default">
        <name>OID_BGP_PEER_KEEP_ALIVE_CONFIGURED</name>
        <full_name>OID_BGP_PEER_KEEP_ALIVE_CONFIGURED</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.21']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="73" package="Default">
        <name>OID_BGP_PEER_MIN_AS_ORIGINATION_INTERVAL</name>
        <full_name>OID_BGP_PEER_MIN_AS_ORIGINATION_INTERVAL</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.22']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="74" package="Default">
        <name>OID_BGP_PEER_MIN_ROUTE_ADVERTISEMENT_INTERVAL</name>
        <full_name>OID_BGP_PEER_MIN_ROUTE_ADVERTISEMENT_INTERVAL</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.23']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="75" package="Default">
        <name>OID_BGP_PEER_IN_UPDATE_ELAPSED_TIME</name>
        <full_name>OID_BGP_PEER_IN_UPDATE_ELAPSED_TIME</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.3.1.24']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="77" package="Default">
        <name>OID_BGP_IDENTIFIER</name>
        <full_name>OID_BGP_IDENTIFIER</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.4.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="79" package="Default">
        <name>OID_BGP_PATH_ATTR_PEER</name>
        <full_name>OID_BGP_PATH_ATTR_PEER</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="80" package="Default">
        <name>OID_BGP_PATH_ATTR_ADDR_PREFIX_LENGTH</name>
        <full_name>OID_BGP_PATH_ATTR_ADDR_PREFIX_LENGTH</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="81" package="Default">
        <name>OID_BGP_PATH_ATTR_ADDR_PREFIX</name>
        <full_name>OID_BGP_PATH_ATTR_ADDR_PREFIX</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="82" package="Default">
        <name>OID_BGP_PATH_ATTR_ORIGIN</name>
        <full_name>OID_BGP_PATH_ATTR_ORIGIN</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="83" package="Default">
        <name>OID_BGP_PATH_ATTR_AS_PATH_SEGMENT</name>
        <full_name>OID_BGP_PATH_ATTR_AS_PATH_SEGMENT</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="84" package="Default">
        <name>OID_BGP_PATH_ATTR_NEXT_HOP</name>
        <full_name>OID_BGP_PATH_ATTR_NEXT_HOP</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="85" package="Default">
        <name>OID_BGP_PATH_ATTR_MED</name>
        <full_name>OID_BGP_PATH_ATTR_MED</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.7']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="86" package="Default">
        <name>OID_BGP_PATH_ATTR_LOCAL_PREF</name>
        <full_name>OID_BGP_PATH_ATTR_LOCAL_PREF</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.8']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="87" package="Default">
        <name>OID_BGP_PATH_ATTR_ATOMIC_AGGREGATE</name>
        <full_name>OID_BGP_PATH_ATTR_ATOMIC_AGGREGATE</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.9']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="88" package="Default">
        <name>OID_BGP_PATH_ATTR_AGGREGATOR_AS</name>
        <full_name>OID_BGP_PATH_ATTR_AGGREGATOR_AS</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.10']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="89" package="Default">
        <name>OID_BGP_PATH_ATTR_AGGREGATOR_ADDR</name>
        <full_name>OID_BGP_PATH_ATTR_AGGREGATOR_ADDR</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.11']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="90" package="Default">
        <name>OID_BGP_PATH_ATTR_CALC_LOCAL_PREF</name>
        <full_name>OID_BGP_PATH_ATTR_CALC_LOCAL_PREF</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.12']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="91" package="Default">
        <name>OID_BGP_PATH_ATTR_BEST</name>
        <full_name>OID_BGP_PATH_ATTR_BEST</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.13']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="92" package="Default">
        <name>OID_BGP_PATH_ATTR_UNKNOWN</name>
        <full_name>OID_BGP_PATH_ATTR_UNKNOWN</full_name>
        <value><![CDATA['.1.3.6.1.2.1.15.6.1.14']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="143" package="Default">
        <name>BGP_PEER_CONNECTION_STATE_IDLE</name>
        <full_name>BGP_PEER_CONNECTION_STATE_IDLE</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="139">
          <description><![CDATA[Possible value for peer connection state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="var" description="Possible value for peer connection state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="149" package="Default">
        <name>BGP_PEER_CONNECTION_STATE_CONNECT</name>
        <full_name>BGP_PEER_CONNECTION_STATE_CONNECT</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="145">
          <description><![CDATA[Possible value for peer connection state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="var" description="Possible value for peer connection state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="155" package="Default">
        <name>BGP_PEER_CONNECTION_STATE_ACTIVE</name>
        <full_name>BGP_PEER_CONNECTION_STATE_ACTIVE</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="151">
          <description><![CDATA[Possible value for peer connection state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="var" description="Possible value for peer connection state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="161" package="Default">
        <name>BGP_PEER_CONNECTION_STATE_OPENSENT</name>
        <full_name>BGP_PEER_CONNECTION_STATE_OPENSENT</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="157">
          <description><![CDATA[Possible value for peer connection state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="var" description="Possible value for peer connection state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="167" package="Default">
        <name>BGP_PEER_CONNECTION_STATE_OPENCONFIRM</name>
        <full_name>BGP_PEER_CONNECTION_STATE_OPENCONFIRM</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="163">
          <description><![CDATA[Possible value for peer connection state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="var" description="Possible value for peer connection state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="173" package="Default">
        <name>BGP_PEER_CONNECTION_STATE_ESTABLISHED</name>
        <full_name>BGP_PEER_CONNECTION_STATE_ESTABLISHED</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="169">
          <description><![CDATA[Possible value for peer connection state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="var" description="Possible value for peer connection state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="214" package="Default">
        <name>BGP_PEER_ADMIN_STATE_STOP</name>
        <full_name>BGP_PEER_ADMIN_STATE_STOP</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="210">
          <description><![CDATA[Possible value for peer admin state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="210" name="var" description="Possible value for peer admin state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="220" package="Default">
        <name>BGP_PEER_ADMIN_STATE_START</name>
        <full_name>BGP_PEER_ADMIN_STATE_START</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="216">
          <description><![CDATA[Possible value for peer admin state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="216" name="var" description="Possible value for peer admin state" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="179" namespace="OSS_SNMP\MIBS" package="Default">
        <name>$BGP_PEER_CONNECTION_STATES</name>
        <default><![CDATA[array(self::BGP_PEER_CONNECTION_STATE_IDLE => 'idle', self::BGP_PEER_CONNECTION_STATE_CONNECT => 'connect', self::BGP_PEER_CONNECTION_STATE_ACTIVE => 'active', self::BGP_PEER_CONNECTION_STATE_OPENSENT => 'opensent', self::BGP_PEER_CONNECTION_STATE_OPENCONFIRM => 'openconfirm', self::BGP_PEER_CONNECTION_STATE_ESTABLISHED => 'established')]]></default>
        <docblock line="175">
          <description><![CDATA[Look up for text representation of BGP peer connection states]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="175" name="var" description="Look up for text representation of BGP peer connection states" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="226" namespace="OSS_SNMP\MIBS" package="Default">
        <name>$BGP_PEER_ADMIN_STATES</name>
        <default><![CDATA[array(self::BGP_PEER_ADMIN_STATE_STOP => 'stop', self::BGP_PEER_ADMIN_STATE_START => 'start')]]></default>
        <docblock line="222">
          <description><![CDATA[Look up for text representation of BGP peer admin states]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="var" description="Look up for text representation of BGP peer admin states" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="107" package="Default">
        <name>version</name>
        <full_name>version</full_name>
        <docblock line="95">
          <description><![CDATA[Returns the BGP version]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Vector of supported BGP protocol version numbers. Each peer negotiates the version
  from this vector. Versions are identified via the string of bits contained within this
  object. The first octet contains bits 0 to 7, the second octet contains bits 8 to 15,
  and so on, with the most significant bit referring to the lowest bit number in the
  octet (e.g., the MSB of the first octet refers to bit 0). If a bit, i, is present
  and set, then the version (i+1) of the BGP is supported."</p>
</blockquote>]]></long-description>
          <tag line="95" name="return" description="Returns the BGP version" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="120" package="Default">
        <name>localASN</name>
        <full_name>localASN</full_name>
        <docblock line="113">
          <description><![CDATA[Returns the local BGP AS number]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The local autonomous system number."</p>
</blockquote>]]></long-description>
          <tag line="113" name="return" description="The local autonomous system number." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="133" package="Default">
        <name>peerIdentifiers</name>
        <full_name>peerIdentifiers</full_name>
        <docblock line="126">
          <description><![CDATA[Returns the BGP identifier of all peers indexed by neighbour IPv4 address]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The BGP Identifier of this entry's BGP peer."</p>
</blockquote>]]></long-description>
          <tag line="126" name="return" description="Returns the BGP identifier of all peers indexed by neighbour IPv4 address" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="196" package="Default">
        <name>peerConnectionStates</name>
        <full_name>peerConnectionStates</full_name>
        <docblock line="188">
          <description><![CDATA[Returns the BGP peer connection state (see `self::$BGP_PEER_CONNECTION_STATES`)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The BGP peer connection state."</p>
</blockquote>]]></long-description>
          <tag line="188" name="param" description="If true, use the `$BGP_PEER_CONNECTION_STATES` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="188" name="return" description="The BGP peer connection state (see `self::$BGP_PEER_CONNECTION_STATES`)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="243" package="Default">
        <name>peerAdminStates</name>
        <full_name>peerAdminStates</full_name>
        <docblock line="231">
          <description><![CDATA[Returns the BGP peer admin states (see `self::$BGP_PEER_ADMIN_STATES`)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The desired state of the BGP connection. A transition from 'stop' to 'start' will
  cause the BGP Start Event to be generated. A transition from 'start' to 'stop' will
  cause the BGP Stop Event to be generated. This parameter can be used to restart BGP
  peer connections. Care should be used in providing write access to this object
  without adequate authentication."</p>
</blockquote>]]></long-description>
          <tag line="231" name="param" description="If true, use the `$BGP_PEER_ADMIN_STATES` array to return textual representation" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="231" name="return" description="The BGP peer admin states (see `self::$BGP_PEER_ADMIN_STATES`)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="261" package="Default">
        <name>peerNegotiatedVersions</name>
        <full_name>peerNegotiatedVersions</full_name>
        <docblock line="254">
          <description><![CDATA[Returns the negotiated version of BGP running between the two peers]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The negotiated version of BGP running between the two peers"</p>
</blockquote>]]></long-description>
          <tag line="254" name="return" description="The negotiated version of BGP running between the two peers" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="273" package="Default">
        <name>peerLocalAddresses</name>
        <full_name>peerLocalAddresses</full_name>
        <docblock line="266">
          <description><![CDATA[Returns the local IP address of this entry's BGP connection.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The local IP address of this entry's BGP connection."</p>
</blockquote>]]></long-description>
          <tag line="266" name="return" description="The local IP address of this entry's BGP connection." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="285" package="Default">
        <name>peerLocalPorts</name>
        <full_name>peerLocalPorts</full_name>
        <docblock line="278">
          <description><![CDATA[Returns the local ports for the TCP connections between the BGP peers.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The local port for the TCP connection between the BGP peers."</p>
</blockquote>]]></long-description>
          <tag line="278" name="return" description="The local ports for the TCP connections between the BGP peers." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="297" package="Default">
        <name>peerRemoteAddresses</name>
        <full_name>peerRemoteAddresses</full_name>
        <docblock line="290">
          <description><![CDATA[Returns the local IP address of this entry's BGP peer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The remote IP address of this entry's BGP peer."</p>
</blockquote>]]></long-description>
          <tag line="290" name="return" description="The remote IP address of this entry's BGP peer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="309" package="Default">
        <name>peerRemotePorts</name>
        <full_name>peerRemotePorts</full_name>
        <docblock line="302">
          <description><![CDATA[Returns the remote ports for the TCP connections between the BGP peers.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The remote port for the TCP connection between the BGP peers."</p>
</blockquote>]]></long-description>
          <tag line="302" name="return" description="The remote ports for the TCP connections between the BGP peers." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="321" package="Default">
        <name>peerRemoteASNs</name>
        <full_name>peerRemoteASNs</full_name>
        <docblock line="314">
          <description><![CDATA[Returns The remote autonomous system number.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The remote autonomous system number."</p>
</blockquote>]]></long-description>
          <tag line="314" name="return" description="The remote autonomous system number." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="334" package="Default">
        <name>peerInUpdates</name>
        <full_name>peerInUpdates</full_name>
        <docblock line="326">
          <description><![CDATA[Returns The number of BGP UPDATE messages received on this connection.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The number of BGP UPDATE messages received on this connection. This object
  should be initialized to zero (0) when the connection is established."</p>
</blockquote>]]></long-description>
          <tag line="326" name="return" description="The number of BGP UPDATE messages received on this connection." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="347" package="Default">
        <name>peerOutUpdates</name>
        <full_name>peerOutUpdates</full_name>
        <docblock line="339">
          <description><![CDATA[Returns The number of BGP UPDATE messages transmitted on this connection.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The number of BGP UPDATE messages transmitted on this connection. This
  object should be initialized to zero (0) when the connection is established."</p>
</blockquote>]]></long-description>
          <tag line="339" name="return" description="The number of BGP UPDATE messages transmitted on this connection." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="360" package="Default">
        <name>peerInTotalMessages</name>
        <full_name>peerInTotalMessages</full_name>
        <docblock line="352">
          <description><![CDATA[Returns The total number of messages received from the remote peer on this connection.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The total number of messages received from the remote peer on this connection.
  This object should be initialized to zero when the connection is established."</p>
</blockquote>]]></long-description>
          <tag line="352" name="return" description="The total number of messages received from the remote peer on this connection." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="373" package="Default">
        <name>peerOutTotalMessages</name>
        <full_name>peerOutTotalMessages</full_name>
        <docblock line="365">
          <description><![CDATA[Returns The total number of messages transmitted to the remote peer on this connection.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The total number of messages transmitted to the remote peer on this connection. This
  object should be initialized to zero when the connection is established."</p>
</blockquote>]]></long-description>
          <tag line="365" name="return" description="The total number of messages transmitted to the remote peer on this connection." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="389" package="Default">
        <name>peerLastErrors</name>
        <full_name>peerLastErrors</full_name>
        <docblock line="380">
          <description><![CDATA[Returns The last error code and subcode seen by this peer on this connection.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The last error code and subcode seen by this peer on this connection. If no error has
  occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING
  contains the error code, and the second byte contains the subcode."</p>
</blockquote>]]></long-description>
          <tag line="380" name="return" description="The last error code and subcode seen by this peer on this connection." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="401" package="Default">
        <name>peerEstabledTransitions</name>
        <full_name>peerEstabledTransitions</full_name>
        <docblock line="394">
          <description><![CDATA[Returns The total number of times the BGP FSM transitioned into the established state.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The total number of times the BGP FSM transitioned into the established state."</p>
</blockquote>]]></long-description>
          <tag line="394" name="return" description="The total number of times the BGP FSM transitioned into the established state." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="417" package="Default">
        <name>peerEstablishedTimes</name>
        <full_name>peerEstablishedTimes</full_name>
        <docblock line="406">
          <description><![CDATA[Returns how long (in seconds) this peer has been in the Established state or
how long since this peer was last in the Established state]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"This timer indicates how long (in seconds) this peer has been in the
  Established state or how long since this peer was last in the
  Established state. It is set to zero when a new peer is configured or the router is
  booted"</p>
</blockquote>]]></long-description>
          <tag line="406" name="return" description="How long (secs) this peer has been in (or since it was last in) the Established state" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="430" package="Default">
        <name>peerConnectRetryIntervals</name>
        <full_name>peerConnectRetryIntervals</full_name>
        <docblock line="422">
          <description><![CDATA[Returns Time interval in seconds for the ConnectRetry timer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the ConnectRetry timer. The suggested value
  for this timer is 120 seconds."</p>
</blockquote>]]></long-description>
          <tag line="422" name="return" description="Time interval in seconds for the ConnectRetry timer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="447" package="Default">
        <name>peerHoldTimes</name>
        <full_name>peerHoldTimes</full_name>
        <docblock line="435">
          <description><![CDATA[Returns Time interval in seconds for the Hold Timer established with the peer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the Hold Timer established with the peer. The
  value of this object is calculated by this BGP speaker by using the smaller of the
  value in bgpPeerHoldTimeConfigured and the Hold Time received in the OPEN message.
  This value must be at lease three seconds if it is not zero (0) in which case the
  Hold Timer has not been established with the peer, or, the value of
  bgpPeerHoldTimeConfigured is zero (0)."</p>
</blockquote>]]></long-description>
          <tag line="435" name="return" description="Time interval in seconds for the Hold Timer established with the peer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="464" package="Default">
        <name>peerKeepAlives</name>
        <full_name>peerKeepAlives</full_name>
        <docblock line="452">
          <description><![CDATA[Returns Time interval in seconds for the KeepAlive timer established with the peer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the KeepAlive timer established with the peer. The value
  of this object is calculated by this BGP speaker such that, when compared with
  bgpPeerHoldTime, it has the same proportion as what bgpPeerKeepAliveConfigured has when
  compared with bgpPeerHoldTimeConfigured. If the value of this object is zero (0),
  it indicates that the KeepAlive timer has not been established with the peer, or,
  the value of bgpPeerKeepAliveConfigured is zero (0)."</p>
</blockquote>]]></long-description>
          <tag line="452" name="return" description="Time interval in seconds for the KeepAlive timer established with the peer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="482" package="Default">
        <name>peerHoleTimesConfigured</name>
        <full_name>peerHoleTimesConfigured</full_name>
        <docblock line="469">
          <description><![CDATA[Returns Time interval in seconds for the Hold Time configured for this BGP speaker with this peer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the Hold Time configured for this BGP speaker with this
  peer. This value is placed in an OPEN message sent to this peer by this BGP
  speaker, and is compared with the Hold Time field in an OPEN message received
  from the peer when determining the Hold Time (bgpPeerHoldTime) with the peer.
  This value must not be less than three seconds if it is not zero (0) in which
  case the Hold Time is NOT to be established with the peer. The suggested
  value for this timer is 90 seconds."</p>
</blockquote>]]></long-description>
          <tag line="469" name="return" description="Time interval in seconds for the Hold Time configured for this BGP speaker with this peer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="502" package="Default">
        <name>peerKeepAlivesConfigured</name>
        <full_name>peerKeepAlivesConfigured</full_name>
        <docblock line="487">
          <description><![CDATA[Returns Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the KeepAlive timer configured for this BGP
  speaker with this peer. The value of this object will only determine the
  KEEPALIVE messages' frequency relative to the value specified in
  bgpPeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages
  is indicated by bgpPeerKeepAlive. A reasonable maximum value for this timer
  would be configured to be one third of that of bgpPeerHoldTimeConfigured.
  If the value of this object is zero (0), no periodical KEEPALIVE messages are sent
  to the peer after the BGP connection has been established. The suggested value for
  this timer is 30 seconds"</p>
</blockquote>]]></long-description>
          <tag line="487" name="return" description="Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="515" package="Default">
        <name>peerMinASOriginationIntervals</name>
        <full_name>peerMinASOriginationIntervals</full_name>
        <docblock line="507">
          <description><![CDATA[Returns Time interval in seconds for the MinASOriginationInterval timer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the MinASOriginationInterval timer.
  The suggested value for this timer is 15 seconds."</p>
</blockquote>]]></long-description>
          <tag line="507" name="return" description="Time interval in seconds for the MinASOriginationInterval timer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="528" package="Default">
        <name>peerMinRouteAdvertisementIntervals</name>
        <full_name>peerMinRouteAdvertisementIntervals</full_name>
        <docblock line="520">
          <description><![CDATA[Returns Time interval in seconds for the MinRouteAdvertisementInterval timer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Time interval in seconds for the MinRouteAdvertisementInterval timer.
  The suggested value for this timer is 30 seconds"</p>
</blockquote>]]></long-description>
          <tag line="520" name="return" description="Time interval in seconds for the MinRouteAdvertisementInterval timer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="541" package="Default">
        <name>peerInUpdateElapsedTimes</name>
        <full_name>peerInUpdateElapsedTimes</full_name>
        <docblock line="533">
          <description><![CDATA[Returns Elapsed time in seconds since the last BGP UPDATE message was received from the peer.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"Elapsed time in seconds since the last BGP UPDATE message was received from the peer.
  Each time bgpPeerInUpdates is incremented, the value of this object is set to zero (0)."</p>
</blockquote>]]></long-description>
          <tag line="533" name="return" description="Elapsed time in seconds since the last BGP UPDATE message was received from the peer." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="588" package="Default">
        <name>peerDetails</name>
        <full_name>peerDetails</full_name>
        <docblock line="547">
          <description><![CDATA[Utility function to gather all peer information into a single array.]]></description>
          <long-description><![CDATA[<p>For example, this would return something like:</p>

<pre><code>Array
(
    ....
    [192.0.2.126] =&gt; Array
    (
        [identity] =&gt; 192.0.2.45
        [connectionState] =&gt; established
        [adminState] =&gt; start
        [negotiatedVersion] =&gt; 4
        [localAddress] =&gt; 193.242.111.74
        [localPort] =&gt; 26789
        [remoteAddress] =&gt; 192.0.2.126
        [remotePort] =&gt; 179
        [remoteASN] =&gt; 65505
        [inUpdates] =&gt; 4
        [outUpdates] =&gt; 2
        [inTotalMessages] =&gt; 180988
        [outTotalMessages] =&gt; 181012
        [lastError] =&gt; 0000
        [establishedTransitions] =&gt; 1
        [establishedTime] =&gt; 9867469
        [connectRetryInterval] =&gt; 60
        [holdTime] =&gt; 180
        [keepAlive] =&gt; 60
        [holdTimeConfigured] =&gt; 180
        [keepAliveConfigured] =&gt; 60
        [minASOriginationInterval] =&gt; 30
        [minRouteAdvertisementInterval] =&gt; 30
        [inUpdateElapsedTime] =&gt; 0
    )
    ....
)
</code></pre>]]></long-description>
          <tag line="547" name="param" description="Where a called function supports translation, if true then translate" type="bool" variable="$translate">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="547" name="return" description="Array of peer details - see example above." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="588">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="645" package="Default">
        <name>identifier</name>
        <full_name>identifier</full_name>
        <docblock line="638">
          <description><![CDATA[Returns the local BGP identifier]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The BGP Identifier of local system."</p>
</blockquote>]]></long-description>
          <tag line="638" name="return" description="The BGP Identifier of local system." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/BGP.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Asterisk.php" hash="4db7d6148b7ab41c97b59fc3a3b33b3b" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="45" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Asterisk</name>
      <full_name>\OSS_SNMP\MIBS\Asterisk</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Asterisk]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\https://wiki.asterisk.org/wiki/display/AST/Asterisk+MIB+Definitions" refers="\OSS_SNMP\MIBS\https://wiki.asterisk.org/wiki/display/AST/Asterisk+MIB+Definitions"/>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS" line="48" package="Default">
        <name>OID_ASTERISK_VERSION_STRING</name>
        <full_name>OID_ASTERISK_VERSION_STRING</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.1.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="49" package="Default">
        <name>OID_ASTERISK_VERSION_TAG</name>
        <full_name>OID_ASTERISK_VERSION_TAG</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.1.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="51" package="Default">
        <name>OID_ASTERISK_UP_TIME</name>
        <full_name>OID_ASTERISK_UP_TIME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.2.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="52" package="Default">
        <name>OID_ASTERISK_RELOAD_TIME</name>
        <full_name>OID_ASTERISK_RELOAD_TIME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.2.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="53" package="Default">
        <name>OID_ASTERISK_PID</name>
        <full_name>OID_ASTERISK_PID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.2.3.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="54" package="Default">
        <name>OID_ASTERISK_CONTROL_SOCKET</name>
        <full_name>OID_ASTERISK_CONTROL_SOCKET</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.2.4.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="55" package="Default">
        <name>OID_ASTERISK_CALLS_ACTIVE</name>
        <full_name>OID_ASTERISK_CALLS_ACTIVE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.2.5.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="56" package="Default">
        <name>OID_ASTERISK_CALLS_PROCESSED</name>
        <full_name>OID_ASTERISK_CALLS_PROCESSED</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.2.6.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS" line="58" package="Default">
        <name>OID_ASTERISK_MODULES</name>
        <full_name>OID_ASTERISK_MODULES</full_name>
        <value><![CDATA['.1.3.6.1.4.1.22736.1.3.1.0']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="68" package="Default">
        <name>version</name>
        <full_name>version</full_name>
        <docblock line="60">
          <description><![CDATA[Returns the version of Asterisk]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Text version string of the version of Asterisk that
  the SNMP Agent was compiled to run against.</p>
</blockquote>]]></long-description>
          <tag line="60" name="return" description="The version of Asterisk" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="82" package="Default">
        <name>tag</name>
        <full_name>tag</full_name>
        <docblock line="73">
          <description><![CDATA[Returns the Subversion (SVN) revision of Asterisk]]></description>
          <long-description><![CDATA[<blockquote>
  <p>SubVersion revision of the version of Asterisk that
  the SNMP Agent was compiled to run against -- this is
  typically 0 for release-versions of Asterisk.</p>
</blockquote>]]></long-description>
          <tag line="73" name="return" description="The SVN revision of Asterisk" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="94" package="Default">
        <name>uptime</name>
        <full_name>uptime</full_name>
        <docblock line="87">
          <description><![CDATA[Returns the time ticks (100th sec) since Asterisk was started]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Time ticks since Asterisk was started.</p>
</blockquote>]]></long-description>
          <tag line="87" name="return" description="Time ticks since Asterisk was started" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="106" package="Default">
        <name>reloadTime</name>
        <full_name>reloadTime</full_name>
        <docblock line="99">
          <description><![CDATA[Returns the time ticks (100th sec) since the Asterisk config was reload]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Time ticks since Asterisk was last reloaded.</p>
</blockquote>]]></long-description>
          <tag line="99" name="return" description="Time ticks since the Asterisk config was reload" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="118" package="Default">
        <name>pid</name>
        <full_name>pid</full_name>
        <docblock line="111">
          <description><![CDATA[Returns the process ID of the Asterisk instance]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The process id of the running Asterisk process.</p>
</blockquote>]]></long-description>
          <tag line="111" name="return" description="The process ID of the Asterisk instance" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="130" package="Default">
        <name>controlSocket</name>
        <full_name>controlSocket</full_name>
        <docblock line="123">
          <description><![CDATA[Returns the path for the control socket for giving Asterisk commands]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The control socket for giving Asterisk commands.</p>
</blockquote>]]></long-description>
          <tag line="123" name="return" description="The control socket for giving Asterisk commands" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="142" package="Default">
        <name>callsActive</name>
        <full_name>callsActive</full_name>
        <docblock line="135">
          <description><![CDATA[Returns the number of calls currently active on the Asterisk PBX.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The number of calls currently active on the Asterisk PBX.</p>
</blockquote>]]></long-description>
          <tag line="135" name="return" description="The number of calls currently active on the Asterisk PBX." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="154" package="Default">
        <name>callsProcessed</name>
        <full_name>callsProcessed</full_name>
        <docblock line="147">
          <description><![CDATA[Returns the total number of calls processed through the Asterisk PBX since last restart.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The total number of calls processed through the Asterisk PBX since last restart.</p>
</blockquote>]]></long-description>
          <tag line="147" name="return" description="The total number of calls processed through the Asterisk PBX since last restart." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS" line="166" package="Default">
        <name>modules</name>
        <full_name>modules</full_name>
        <docblock line="159">
          <description><![CDATA[Returns the number of modules currently loaded into Asterisk.]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Number of modules currently loaded into Asterisk.</p>
</blockquote>]]></long-description>
          <tag line="159" name="return" description="The number of modules currently loaded into Asterisk" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Asterisk.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Host.php" hash="2d63e29887a3c58ee526dff4f50dba72" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS" line="44" package="Default">
      <extends>\OSS_SNMP\MIB</extends>
      <name>Host</name>
      <full_name>\OSS_SNMP\MIBS\Host</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on generic devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Host.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Extreme/Vlan.php" hash="32868594f8bea311002024f2b17374d7" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Extreme" line="45" package="Default">
      <extends>\OSS_SNMP\MIBS\Extreme</extends>
      <name>Vlan</name>
      <full_name>\OSS_SNMP\MIBS\Extreme\Vlan</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 VLAN queries on Extreme devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="see" description="\OSS_SNMP\MIBS\Extreme\http://www.extremenetworks.com/products/mibs.aspx" refers="\OSS_SNMP\MIBS\Extreme\http://www.extremenetworks.com/products/mibs.aspx"/>
        <tag line="38" name="copyright" description="Copyright (c) 2012 - 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="47" package="Default">
        <name>OID_VLAN_IF_INDEX</name>
        <full_name>OID_VLAN_IF_INDEX</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="48" package="Default">
        <name>OID_VLAN_IF_DESCRIPTION</name>
        <full_name>OID_VLAN_IF_DESCRIPTION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="49" package="Default">
        <name>OID_VLAN_IF_TYPE</name>
        <full_name>OID_VLAN_IF_TYPE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="50" package="Default">
        <name>OID_VLAN_IF_GLOBAL_IDENTIFIER</name>
        <full_name>OID_VLAN_IF_GLOBAL_IDENTIFIER</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="51" package="Default">
        <name>OID_VLAN_IF_STATUS</name>
        <full_name>OID_VLAN_IF_STATUS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="52" package="Default">
        <name>OID_VLAN_IF_LOOPBACK_MODE_FLAG</name>
        <full_name>OID_VLAN_IF_LOOPBACK_MODE_FLAG</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.9']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="53" package="Default">
        <name>OID_VLAN_IF_VLAN_ID</name>
        <full_name>OID_VLAN_IF_VLAN_ID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.1916.1.2.1.2.1.10']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="55" package="Default">
        <name>OID_VLAN_OPAQUE_TAGGED_PORTS</name>
        <full_name>OID_VLAN_OPAQUE_TAGGED_PORTS</full_name>
        <value><![CDATA[".1.3.6.1.4.1.1916.1.2.6.1.1.1"]]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="56" package="Default">
        <name>OID_VLAN_OPAQUE_UNTAGGED_PORTS</name>
        <full_name>OID_VLAN_OPAQUE_UNTAGGED_PORTS</full_name>
        <value><![CDATA[".1.3.6.1.4.1.1916.1.2.6.1.1.2"]]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="99" package="Default">
        <name>IF_VLAN_TYPE_LAYER2</name>
        <full_name>IF_VLAN_TYPE_LAYER2</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="95">
          <description><![CDATA[Constant for possible value of VLAN type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="see" description="\OSS_SNMP\MIBS\Extreme\ifTypes()" refers="\OSS_SNMP\MIBS\Extreme\ifTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="165" package="Default">
        <name>IF_VLAN_STATUS_ACTIVE</name>
        <full_name>IF_VLAN_STATUS_ACTIVE</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="161">
          <description><![CDATA[Constant for possible value of VLAN status]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="see" description="\OSS_SNMP\MIBS\Extreme\ifStates()" refers="\OSS_SNMP\MIBS\Extreme\ifStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="171" package="Default">
        <name>IF_VLAN_STATUS_NOTINSERVICE</name>
        <full_name>IF_VLAN_STATUS_NOTINSERVICE</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="167">
          <description><![CDATA[Constant for possible value of VLAN status]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="see" description="\OSS_SNMP\MIBS\Extreme\ifStates()" refers="\OSS_SNMP\MIBS\Extreme\ifStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="177" package="Default">
        <name>IF_VLAN_STATUS_NOTREADY</name>
        <full_name>IF_VLAN_STATUS_NOTREADY</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="173">
          <description><![CDATA[Constant for possible value of VLAN status]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="see" description="\OSS_SNMP\MIBS\Extreme\ifStates()" refers="\OSS_SNMP\MIBS\Extreme\ifStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="213" package="Default">
        <name>IF_VLAN_LOOPBACK_MODE_FLAG_TRUE</name>
        <full_name>IF_VLAN_LOOPBACK_MODE_FLAG_TRUE</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="209">
          <description><![CDATA[Constant for possible value of loopback mode flag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="209" name="see" description="\OSS_SNMP\MIBS\Extreme\ifLoopbackModeFlags()" refers="\OSS_SNMP\MIBS\Extreme\ifLoopbackModeFlags()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Extreme" line="219" package="Default">
        <name>IF_VLAN_LOOPBACK_MODE_FLAG_FALSE</name>
        <full_name>IF_VLAN_LOOPBACK_MODE_FLAG_FALSE</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="215">
          <description><![CDATA[Constant for possible value of loopback mode flag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="215" name="see" description="\OSS_SNMP\MIBS\Extreme\ifLoopbackModeFlags()" refers="\OSS_SNMP\MIBS\Extreme\ifLoopbackModeFlags()"/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="107" namespace="OSS_SNMP\MIBS\Extreme" package="Default">
        <name>$IF_VLAN_TYPES</name>
        <default><![CDATA[array(self::IF_VLAN_TYPE_LAYER2 => 'vlanLayer2(1)')]]></default>
        <docblock line="101">
          <description><![CDATA[Text representation of VLAN types]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="see" description="\OSS_SNMP\MIBS\Extreme\ifTypes()" refers="\OSS_SNMP\MIBS\Extreme\ifTypes()"/>
          <tag line="101" name="var" description="Text representations of VLAN types" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="185" namespace="OSS_SNMP\MIBS\Extreme" package="Default">
        <name>$IF_VLAN_STATES</name>
        <default><![CDATA[array(self::IF_VLAN_STATUS_ACTIVE => 'active', self::IF_VLAN_STATUS_NOTINSERVICE => 'notInService', self::IF_VLAN_STATUS_NOTREADY => 'notReady')]]></default>
        <docblock line="179">
          <description><![CDATA[Text representation of VLAN states]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="179" name="see" description="\OSS_SNMP\MIBS\Extreme\ifstates()" refers="\OSS_SNMP\MIBS\Extreme\ifstates()"/>
          <tag line="179" name="var" description="Text representations of VLAN states" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="227" namespace="OSS_SNMP\MIBS\Extreme" package="Default">
        <name>$IF_VLAN_LOOPBACK_MODE_FLAGS</name>
        <default><![CDATA[array(self::IF_VLAN_LOOPBACK_MODE_FLAG_TRUE => true, self::IF_VLAN_LOOPBACK_MODE_FLAG_FALSE => false)]]></default>
        <docblock line="221">
          <description><![CDATA[Text representation of loopback mode flags]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="see" description="\OSS_SNMP\MIBS\Extreme\ifLoopbackModeFlags()" refers="\OSS_SNMP\MIBS\Extreme\ifLoopbackModeFlags()"/>
          <tag line="221" name="var" description="Text representation of loopback mode flags" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="77" package="Default">
        <name>ifIndexes</name>
        <full_name>ifIndexes</full_name>
        <docblock line="59">
          <description><![CDATA[Get an array of VLAN interface indexes (ifIndex)]]></description>
          <long-description><![CDATA[<p>NB: VLAN indexes return only, not physical interfaces.</p>

<p>Queries: EXTREME-VLAN-MIB::extremeVlanIfIndex</p>

<p>Example of returned array:</p>

<pre><code>[
    [1000004] =&gt; 1000004
    [1000005] =&gt; 1000005
    ...
]
</code></pre>]]></long-description>
          <tag line="59" name="return" description="An array of VLAN interface indexes (ifIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="88" package="Default">
        <name>ifDescriptions</name>
        <full_name>ifDescriptions</full_name>
        <docblock line="83">
          <description><![CDATA[Get the device's VLAN descriptions (indexed by vlanIfIndex)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="return" description="The device's VLAN descriptions (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="124" package="Default">
        <name>ifTypes</name>
        <full_name>ifTypes</full_name>
        <docblock line="111">
          <description><![CDATA[Get the device's VLAN types (indexed by vlanIfIndex)]]></description>
          <long-description><![CDATA[<blockquote>
  <h2>-- Extreme Networks Vlan Type Textual Convention</h2>
  
  <p>--  vlanLayer2(1) = The globally identified VLAN interface is protocol
  --  independent and based on port grouping.  The configuration of
  --  port grouping is controlled through the ifStackTable.</p>
</blockquote>]]></long-description>
          <tag line="111" name="see" description="\OSS_SNMP\MIBS\Extreme\IF_VLAN_TYPES" refers="\OSS_SNMP\MIBS\Extreme\IF_VLAN_TYPES"/>
          <tag line="111" name="param" description="If true, return the string representation" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="111" name="return" description="The device's VLAN types (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="153" package="Default">
        <name>ifGlobalIdentifiers</name>
        <full_name>ifGlobalIdentifiers</full_name>
        <docblock line="136">
          <description><![CDATA[Get the device's VLAN global identifiers (indexed by vlanIfIndex)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>An administratively assigned global VLAN identifier.  For
  VLAN interfaces, on different network devices, which are
  part of the same globally identified VLAN, the value of this
  object will be the same.</p>
  
  <p>The binding between a global identifier and a VLAN
  interface can be created or removed.  To create a binding
  an NMS must write a non-zero value to this object.  To
  delete a binding, the NMS must write a zero to this
  object. The value 1 is reserved for the default VLAN and
  this cannot be deleted or re-assigned.</p>
</blockquote>]]></long-description>
          <tag line="136" name="return" description="The device's VLAN global identifiers (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="198" package="Default">
        <name>ifStates</name>
        <full_name>ifStates</full_name>
        <docblock line="191">
          <description><![CDATA[Get the device's VLAN states]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="see" description="\OSS_SNMP\MIBS\Extreme\IF_VLAN_STATES" refers="\OSS_SNMP\MIBS\Extreme\IF_VLAN_STATES"/>
          <tag line="191" name="param" description="If true, return the string representation" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="191" name="return" description="The device's VLAN states (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="239" package="Default">
        <name>ifLoopbackModeFlags</name>
        <full_name>ifLoopbackModeFlags</full_name>
        <docblock line="232">
          <description><![CDATA[Get the device's VLAN loopback mode flags]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="232" name="see" description="\OSS_SNMP\MIBS\Extreme\IF_VLAN_LOOPBACK_MODE_FLAGS" refers="\OSS_SNMP\MIBS\Extreme\IF_VLAN_LOOPBACK_MODE_FLAGS"/>
          <tag line="232" name="param" description="If true, return boolean values for flag" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="232" name="return" description="The device's VLAN loopback mode flags (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="255" package="Default">
        <name>ifVlanIds</name>
        <full_name>ifVlanIds</full_name>
        <docblock line="250">
          <description><![CDATA[Get the device's VLAN IDs / tags  (indexed by vlanIfIndex)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="250" name="return" description="The device's VLAN IDs / tags (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="265" package="Default">
        <name>ifVlanIdsToIfIndexes</name>
        <full_name>ifVlanIdsToIfIndexes</full_name>
        <docblock line="260">
          <description><![CDATA[Get the device's VLAN IDs / tags mapped to vlanIfIndex (indexed by tag)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="260" name="return" description="The device's VLAN IDs / tags mapped to vlanIfIndex (indexed by tag)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="286" package="Default">
        <name>idsToNames</name>
        <full_name>idsToNames</full_name>
        <docblock line="271">
          <description><![CDATA[Get the device's VLAN IDs mapped to names]]></description>
          <long-description><![CDATA[<p>Sample return:</p>

<pre><code>[
    [1] =&gt; Default
    [2] =&gt; Mgmt
    ...
    [200] =&gt; INTERNET
    ...
]
</code></pre>]]></long-description>
          <tag line="271" name="return" description="The device's VLAN IDs mapped to names" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="319" package="Default">
        <name>opaqueTaggedPorts</name>
        <full_name>opaqueTaggedPorts</full_name>
        <docblock line="298">
          <description><![CDATA[Get tagged ports by VLAN  (indexed by vlanIfIndex)]]></description>
          <long-description><![CDATA[<p>The result is an array of HEX strings indicating VLAN tagging of an interface
indexed by the vlanIfIndex such as:</p>

<pre><code>[
    [1000005] =&gt; 0000000000000000000000000000000000000000000000000000000000000000
    [1000007] =&gt; 0000000000008000000000000000000000000000000000000000000000000000
    [1000008] =&gt; 5000400000008000000000000000000000000000000000000000000000000000
    ...
]
</code></pre>

<p>So, for VLAN ifIndex 1000008 above, if you take the first octet of '50', you can
see that of the first eight ports, only the 2nd and 4th (50 = 01010000) are tagged.</p>]]></long-description>
          <tag line="298" name="see" description="\OSS_SNMP\SNMP::ppHexStringFlags()" refers="\OSS_SNMP\SNMP::ppHexStringFlags()"/>
          <tag line="298" name="see" description="\OSS_SNMP\MIBS\Extreme\getTaggedPortsForVlan()" refers="\OSS_SNMP\MIBS\Extreme\getTaggedPortsForVlan()"/>
          <tag line="298" name="return" description="The device's VLAN IDs / tags (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="345" package="Default">
        <name>opaqueUntaggedPorts</name>
        <full_name>opaqueUntaggedPorts</full_name>
        <docblock line="324">
          <description><![CDATA[Get untagged ports by VLAN  (indexed by vlanIfIndex)]]></description>
          <long-description><![CDATA[<p>The result is an array of HEX strings indicating VLAN (un)tagging of an interface
indexed by the vlanIfIndex such as:</p>

<pre><code>[
    [1000005] =&gt; 0000000000000000000000000000000000000000000000000000000000000000
    [1000007] =&gt; 0000000000008000000000000000000000000000000000000000000000000000
    [1000008] =&gt; 5000400000008000000000000000000000000000000000000000000000000000
    ...
]
</code></pre>

<p>So, for VLAN ifIndex 1000008 above, if you take the first octet of '50', you can
see that of the first eight ports, only the 2nd and 4th (50 = 01010000) are untagged.</p>]]></long-description>
          <tag line="324" name="see" description="\OSS_SNMP\SNMP::ppHexStringFlags()" refers="\OSS_SNMP\SNMP::ppHexStringFlags()"/>
          <tag line="324" name="see" description="\OSS_SNMP\MIBS\Extreme\getUntaggedPortsForVlan()" refers="\OSS_SNMP\MIBS\Extreme\getUntaggedPortsForVlan()"/>
          <tag line="324" name="return" description="The device's VLAN IDs / tags (indexed by vlanIfIndex)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="358" package="Default">
        <name>getTaggedPortsForVlan</name>
        <full_name>getTaggedPortsForVlan</full_name>
        <docblock line="350">
          <description><![CDATA[For a given VLAN vlanIfIndex, this function returns an array
of ports indicating whether the port is a tagged member of the VLAN.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="350" name="see" description="\OSS_SNMP\MIBS\Extreme\getPortsForVlan()" refers="\OSS_SNMP\MIBS\Extreme\getPortsForVlan()"/>
          <tag line="350" name="param" description="The vlanIfIndex of the VLAN to get the results for" type="int" variable="$vlanIfIndex">
            <type by_reference="false">int</type>
          </tag>
          <tag line="350" name="return" description="Array indexed by ifIndex indicating whether the port is a tagged member of the given vlan" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="358">
          <name>$vlanIfIndex</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="371" package="Default">
        <name>getUntaggedPortsForVlan</name>
        <full_name>getUntaggedPortsForVlan</full_name>
        <docblock line="363">
          <description><![CDATA[For a given VLAN vlanIfIndex, this function returns an array
of ports indicating whether the port is a untagged member of the VLAN.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="363" name="see" description="\OSS_SNMP\MIBS\Extreme\getPortsForVlan()" refers="\OSS_SNMP\MIBS\Extreme\getPortsForVlan()"/>
          <tag line="363" name="param" description="The vlanIfIndex of the VLAN to get the results for" type="int" variable="$vlanIfIndex">
            <type by_reference="false">int</type>
          </tag>
          <tag line="363" name="return" description="Array indexed by ifIndex indicating whether the port is an untagged member of the given vlan" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="371">
          <name>$vlanIfIndex</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Extreme" line="397" package="Default">
        <name>getPortsForVlan</name>
        <full_name>getPortsForVlan</full_name>
        <docblock line="376">
          <description><![CDATA[For a given VLAN vlanIfIndex, this function returns an array
of ports indicating whether the port is a member (tagged or untagged)
of the VLAN.]]></description>
          <long-description><![CDATA[<p>A sample result showing that ports with ifIndex 1002 to 1004 are a
member of a given VLAN while the others aren't is:</p>

<pre><code>[
    [1001] =&gt; bool(false)
    [1002] =&gt; bool(true)
    [1003] =&gt; bool(true)
    [1004] =&gt; bool(true)
    [1005] =&gt; bool(true)
    [1006] =&gt; bool(false)
]
</code></pre>]]></long-description>
          <tag line="376" name="param" description="The vlanIfIndex of the VLAN to get the results for" type="int" variable="$vlanIfIndex">
            <type by_reference="false">int</type>
          </tag>
          <tag line="376" name="param" description="If null, both tagged or untagged ports. Otherwise one of `opaqueTaggedPorts` or `opaqueUntaggedPorts`" type="string|null" variable="$fn">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="376" name="return" description="Array indexed by ifIndex indicating whether the port is a member of the given vlan" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$vlanIfIndex</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="397">
          <name>$fn</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Extreme/Vlan.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Cisco/CDP.php" hash="e341e4dd69c98ee4ed30f9a452ffa2c8" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Cisco" line="44" package="Default">
      <extends>\OSS_SNMP\MIBS\Cisco</extends>
      <name>CDP</name>
      <full_name>\OSS_SNMP\MIBS\Cisco\CDP</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Cisco devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="47" package="Default">
        <name>OID_CDP_INTERFACE_ENABLED</name>
        <full_name>OID_CDP_INTERFACE_ENABLED</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.1.1.1.2']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="48" package="Default">
        <name>OID_CDP_INTERFACE_NAME</name>
        <full_name>OID_CDP_INTERFACE_NAME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.1.1.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="50" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_ADDRESS_TYPE</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_ADDRESS_TYPE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="51" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_ADDRESS</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_ADDRESS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.4']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="52" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_VERSION</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_VERSION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.5']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="53" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_ID</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_ID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.6']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="54" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_PORT</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_PORT</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.7']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="55" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_PLATFORM</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_PLATFORM</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.8']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="56" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_CAPABILITY</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_CAPABILITY</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.9']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="57" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_VTP_MGMT_DOMAIN</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_VTP_MGMT_DOMAIN</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.10']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="58" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_NATIVE_VLAN</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_NATIVE_VLAN</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.11']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="59" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_DUPLEX</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_DUPLEX</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.12']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="60" package="Default">
        <name>OID_CDP_CACHE_NEIGHBOUR_LAST_CHANGE</name>
        <full_name>OID_CDP_CACHE_NEIGHBOUR_LAST_CHANGE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.2.1.1.24']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="62" package="Default">
        <name>OID_CDP_GLOBAL_RUN</name>
        <full_name>OID_CDP_GLOBAL_RUN</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.3.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="63" package="Default">
        <name>OID_CDP_GLOBAL_MESSAGE_INTERVAL</name>
        <full_name>OID_CDP_GLOBAL_MESSAGE_INTERVAL</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.3.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="64" package="Default">
        <name>OID_CDP_GLOBAL_HOLDTIME</name>
        <full_name>OID_CDP_GLOBAL_HOLDTIME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.3.3.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="65" package="Default">
        <name>OID_CDP_GLOBAL_DEVICE_ID</name>
        <full_name>OID_CDP_GLOBAL_DEVICE_ID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.3.4.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="66" package="Default">
        <name>OID_CDP_GLOBAL_LAST_CHANGE</name>
        <full_name>OID_CDP_GLOBAL_LAST_CHANGE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.23.1.3.5.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="167" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_ADDRESS_TYPE_IP</name>
        <full_name>CDP_CACHE_NEIGHBOUR_ADDRESS_TYPE_IP</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="163">
          <description><![CDATA[Constant for possible value of CDP neighbour address type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="see" description="\OSS_SNMP\MIBS\Cisco\CDP::neighbourAddressTypes()" refers="\OSS_SNMP\MIBS\Cisco\CDP::neighbourAddressTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="305" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_ROUTER</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_ROUTER</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="301">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="301" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="311" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_TRANSPARENT_BRIDGE</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_TRANSPARENT_BRIDGE</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="307">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="307" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="317" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_SOURCE_ROUTE_BRIDGE</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_SOURCE_ROUTE_BRIDGE</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="313">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="313" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="323" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_SWITCH</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_SWITCH</full_name>
        <value><![CDATA[8]]></value>
        <docblock line="319">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="319" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="329" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_HOST</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_HOST</full_name>
        <value><![CDATA[16]]></value>
        <docblock line="325">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="325" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="335" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_IGMP_CAPABLE</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_IGMP_CAPABLE</full_name>
        <value><![CDATA[32]]></value>
        <docblock line="331">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="331" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="341" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_CAPABILITY_REPEATER</name>
        <full_name>CDP_CACHE_NEIGHBOUR_CAPABILITY_REPEATER</full_name>
        <value><![CDATA[64]]></value>
        <docblock line="337">
          <description><![CDATA[Constant for possible value of CDP neighbour capability]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="337" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="484" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_DUPLEX_UNKNOWN</name>
        <full_name>CDP_CACHE_NEIGHBOUR_DUPLEX_UNKNOWN</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="480">
          <description><![CDATA[Constant for possible value of CDP neighbour duplex]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="480" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()" refers="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="490" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_DUPLEX_HALF</name>
        <full_name>CDP_CACHE_NEIGHBOUR_DUPLEX_HALF</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="486">
          <description><![CDATA[Constant for possible value of CDP neighbour duplex]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="486" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()" refers="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="496" package="Default">
        <name>CDP_CACHE_NEIGHBOUR_DUPLEX_FULL</name>
        <full_name>CDP_CACHE_NEIGHBOUR_DUPLEX_FULL</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="492">
          <description><![CDATA[Constant for possible value of CDP neighbour duplex]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="492" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()" refers="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()"/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="175" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$CDP_CACHE_NEIGHBOUR_ADDRESS_TYPES</name>
        <default><![CDATA[array(self::CDP_CACHE_NEIGHBOUR_ADDRESS_TYPE_IP => 'ip')]]></default>
        <docblock line="169">
          <description><![CDATA[Text representation of CDP neighbour address type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="see" description="\OSS_SNMP\SNMP\MIBS\Cisco\CDP::neighbourAddressTypes()" refers="\OSS_SNMP\SNMP\MIBS\Cisco\CDP::neighbourAddressTypes()"/>
          <tag line="169" name="var" description="Text representation of CDP neighbour address type" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="349" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$CDP_CACHE_NEIGHBOUR_CAPABILITIES</name>
        <default><![CDATA[array(self::CDP_CACHE_NEIGHBOUR_CAPABILITY_ROUTER => 'Router', self::CDP_CACHE_NEIGHBOUR_CAPABILITY_TRANSPARENT_BRIDGE => 'Transparent Bridge', self::CDP_CACHE_NEIGHBOUR_CAPABILITY_SOURCE_ROUTE_BRIDGE => 'Source Route Bridge', self::CDP_CACHE_NEIGHBOUR_CAPABILITY_SWITCH => 'Switch', self::CDP_CACHE_NEIGHBOUR_CAPABILITY_HOST => 'Host', self::CDP_CACHE_NEIGHBOUR_CAPABILITY_IGMP_CAPABLE => 'IGMP Capable', self::CDP_CACHE_NEIGHBOUR_CAPABILITY_REPEATER => 'Repeater')]]></default>
        <docblock line="343">
          <description><![CDATA[Text representation of CDP capabilities]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="343" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourCapability()" refers="\OSS_SNMP\MIBS\Cisco\neighbourCapability()"/>
          <tag line="343" name="var" description="Text representation of CDP neighbour capabilities" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="504" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$CDP_CACHE_NEIGHBOUR_DUPLEXES</name>
        <default><![CDATA[array(self::CDP_CACHE_NEIGHBOUR_DUPLEX_UNKNOWN => 'unknown', self::CDP_CACHE_NEIGHBOUR_DUPLEX_HALF => 'half-duplex', self::CDP_CACHE_NEIGHBOUR_DUPLEX_FULL => 'full-duplex')]]></default>
        <docblock line="498">
          <description><![CDATA[Text representation of CDP capabilities]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="498" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()" refers="\OSS_SNMP\MIBS\Cisco\neighbourDuplexMode()"/>
          <tag line="498" name="var" description="Text representation of CDP neighbour duplex modes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="78" package="Default">
        <name>globalRun</name>
        <full_name>globalRun</full_name>
        <docblock line="69">
          <description><![CDATA[Get the device's global CDP (Cisco Discovery Protocol) run status]]></description>
          <long-description><![CDATA[<blockquote>
  <p>An indication of whether the Cisco Discovery Protocol is currently
  running.  Entries in cdpCacheTable are deleted when CDP is disabled.</p>
</blockquote>]]></long-description>
          <tag line="69" name="return" description="True if enabled globally, else false" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="91" package="Default">
        <name>globalMessageInterval</name>
        <full_name>globalMessageInterval</full_name>
        <docblock line="83">
          <description><![CDATA[Get the interval at which CDP messages are to be generated]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The interval at which CDP messages are to be generated.
  The default value is 60 seconds.</p>
</blockquote>]]></long-description>
          <tag line="83" name="return" description="The interval at which CDP messages are to be generated" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="104" package="Default">
        <name>globalHoldTime</name>
        <full_name>globalHoldTime</full_name>
        <docblock line="96">
          <description><![CDATA[Get the time for the receiving device holds CDP message]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The time for the receiving device holds CDP message.
  The default value is 180 seconds."</p>
</blockquote>]]></long-description>
          <tag line="96" name="return" description="The time for the receiving device holds CDP message" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="118" package="Default">
        <name>globalLastChange</name>
        <full_name>globalLastChange</full_name>
        <docblock line="109">
          <description><![CDATA[The time when the cache table was last changed]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Indicates the time when the cache table was last changed. It
  is the most recent time at which any row was last created,
  modified or deleted.</p>
</blockquote>]]></long-description>
          <tag line="109" name="return" description="The time (timeticks) when the cache table was last changed" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="128" package="Default">
        <name>id</name>
        <full_name>id</full_name>
        <docblock line="123">
          <description><![CDATA[Get the device's CDP (Cisco Discovery Protocol) ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="return" description="The device's CDP (Cisco Discovery Protocol) ID" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="144" package="Default">
        <name>interfaceEnabled</name>
        <full_name>interfaceEnabled</full_name>
        <docblock line="134">
          <description><![CDATA[Get the device's interfaces CDP enabled status]]></description>
          <long-description><![CDATA[<p>Applies the TruthValue post processor to turn
SNMP values into true / false.</p>]]></long-description>
          <tag line="134" name="see" description="\OSS_SNMP\SNMP::ppTruthValue()" refers="\OSS_SNMP\SNMP::ppTruthValue()"/>
          <tag line="134" name="return" description="The device's interfaces CDP enabled status' (as boolean true / false)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="156" package="Default">
        <name>interfaceNames</name>
        <full_name>interfaceNames</full_name>
        <docblock line="149">
          <description><![CDATA[Get the device's interface names as seen in CDP]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The name of the local interface as advertised by CDP in the Port-ID TLV</p>
</blockquote>]]></long-description>
          <tag line="149" name="return" description="The device's interface names as seen in CDP" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="187" package="Default">
        <name>neighbourAddressTypes</name>
        <full_name>neighbourAddressTypes</full_name>
        <docblock line="179">
          <description><![CDATA[Get the CDP neighbours' address type indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>An indication of the type of address contained in the corresponding instance of cdpCacheAddress</p>
</blockquote>]]></long-description>
          <tag line="179" name="param" description="If true, return the string representation via self::$VTP_VLAN_TYPES" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="179" name="return" description="The CDP neighbours' address type indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="213" package="Default">
        <name>neighbourAddresses</name>
        <full_name>neighbourAddresses</full_name>
        <docblock line="198">
          <description><![CDATA[Get the device's CDP neighbour addresses indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The (first) network-layer address of the device
  as reported in the Address TLV of the most recently received
  CDP message.  For example, if the corresponding instance of
  cacheAddressType had the value 'ip(1)', then this object
  would be an IPv4-address.  If the neighbor device is
  SNMP-manageable, it is supposed to generate its CDP messages
  such that this address is one at which it will receive SNMP
  messages. Use cdpCtAddressTable to extract the remaining
  addresses from the Address TLV received most recently."</p>
</blockquote>]]></long-description>
          <tag line="198" name="return" description="The device's CDP neighbour addresses indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="235" package="Default">
        <name>neighbourVersions</name>
        <full_name>neighbourVersions</full_name>
        <docblock line="226">
          <description><![CDATA[Get the device's CDP neighbour version indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The Version string as reported in the most recent CDP
  message.  The zero-length string indicates no Version
  field (TLV) was reported in the most recent CDP message."</p>
</blockquote>]]></long-description>
          <tag line="226" name="return" description="The device's CDP neighbour version indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="250" package="Default">
        <name>neighbourId</name>
        <full_name>neighbourId</full_name>
        <docblock line="241">
          <description><![CDATA[Get the device's CDP neighbours (by their CDP ID) indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The Device-ID string as reported in the most recent CDP
  message.  The zero-length string indicates no Device-ID
  field (TLV) was reported in the most recent CDP message."</p>
</blockquote>]]></long-description>
          <tag line="241" name="return" description="The device's CDP neighbours (by their CDP ID) indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="280" package="Default">
        <name>neighbourPort</name>
        <full_name>neighbourPort</full_name>
        <docblock line="255">
          <description><![CDATA[Get the device's CDP neighbours connected port description indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<p>E.g. a sample call may return:</p>

<pre><code>Array
(
    [10101] =&gt; GigabitEthernet0/1
    [10102] =&gt; FastEthernet0/2
    [10103] =&gt; GigabitEthernet1/0/24
    [10105] =&gt; GigabitEthernet1/0/2
)
</code></pre>

<p>meaning, for example, that our local port with ID <code>10101</code> is connected to port <code>GigabitEthernet0/1</code> on the neighbour
connected to that local port. You can discover the neighbour ID via <code>neighbourId()</code>.</p>

<blockquote>
  <p>The Port-ID string as reported in the most recent CDP
  message.  This will typically be the value of the ifName
  object (e.g., 'Ethernet0').  The zero-length string
  indicates no Port-ID field (TLV) was reported in the
  most recent CDP message.</p>
</blockquote>]]></long-description>
          <tag line="255" name="see" description="\OSS_SNMP\SNMP\MIBS\Cisco\CDP::neighbourId()" refers="\OSS_SNMP\SNMP\MIBS\Cisco\CDP::neighbourId()"/>
          <tag line="255" name="return" description="The device's CDP neighbours connected port *description* indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="294" package="Default">
        <name>neighbourPlatforms</name>
        <full_name>neighbourPlatforms</full_name>
        <docblock line="285">
          <description><![CDATA[Get the device's CDP neighbour platforms indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The Device's Hardware Platform as reported in the most recent CDP
  message. The zero-length string indicates that no Platform field
  (TLV) was reported in the most recent CDP message.</p>
</blockquote>]]></long-description>
          <tag line="285" name="return" description="The device's CDP neighbour platforms indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="374" package="Default">
        <name>neighbourCapability</name>
        <full_name>neighbourCapability</full_name>
        <docblock line="359">
          <description><![CDATA[Get the device's CDP neighbour capabilities (as a decimal integer) indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The Device's Functional Capabilities as reported in the most
  recent CDP message.  For latest set of specific values, see
  the latest version of the CDP specification. The zero-length
  string indicates no Capabilities field (TLV) was reported in
  the most recent CDP message."</p>
</blockquote>]]></long-description>
          <tag line="359" name="see" description="\OSS_SNMP\MIBS\Cisco\REFERENCE" refers="\OSS_SNMP\MIBS\Cisco\REFERENCE"/>
          <tag line="359" name="see" description="\OSS_SNMP\MIBS\Cisco\http://www.cisco.com/univercd/cc/td/doc/product/lan/trsrb/frames.htm#xtocid12" refers="\OSS_SNMP\MIBS\Cisco\http://www.cisco.com/univercd/cc/td/doc/product/lan/trsrb/frames.htm#xtocid12"/>
          <tag line="359" name="see" description="\OSS_SNMP\MIBS\Cisco\http://wiki.wireshark.org/CDP" refers="\OSS_SNMP\MIBS\Cisco\http://wiki.wireshark.org/CDP"/>
          <tag line="359" name="return" description="The device's CDP neighbour capabilities (as a decimal integer) indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="396" package="Default">
        <name>neighbourHasCapability</name>
        <full_name>neighbourHasCapability</full_name>
        <docblock line="384">
          <description><![CDATA[Query if a given neighbour (by connected port ID) has the given capability]]></description>
          <long-description><![CDATA[<p>Example:</p>

<pre><code>if( $host-&gt;useCisco_CDP()-&gt;neighbourHasCapability( $portId, \OSS_SNMP\SNMP\MIBS\Cisco\CDP::CDP_CACHE_NEIGHBOUR_CAPABILITY_SWITCH )
     echo "Host is a switch!!";
</code></pre>]]></long-description>
          <tag line="384" name="param" description="The CDP neighbour by connected local port ID" type="int" variable="$portId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="384" name="param" description="The capability to query for (defined by self::CDP_CACHE_NEIGHBOUR_CAPABILITY_XXX constants)" type="int" variable="$capability">
            <type by_reference="false">int</type>
          </tag>
          <tag line="384" name="return" description="True if the neighbour has the given capability" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="396">
          <name>$portId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="396">
          <name>$capability</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="425" package="Default">
        <name>neighbourCapabilities</name>
        <full_name>neighbourCapabilities</full_name>
        <docblock line="404">
          <description><![CDATA[Get an array of individual capabilities of a given neighbour (by connected port ID)]]></description>
          <long-description><![CDATA[<p>Example:</p>

<pre><code>print_r( $host-&gt;useCisco_CDP()-&gt;neighbourCapabilities( 10111 ) )

    [0] =&gt; 8         // self::CDP_CACHE_NEIGHBOUR_CAPABILITY_SWITCH
    [1] =&gt; 32        // self::CDP_CACHE_NEIGHBOUR_CAPABILITY_IGMP_CAPABLE

print_r( $host-&gt;useCisco_CDP()-&gt;neighbourCapabilities( 10111, true ) )

    [0] =&gt; "Switch"              // self::CDP_CACHE_NEIGHBOUR_CAPABILITY_SWITCH
    [1] =&gt; "IGMP Capable"        // self::CDP_CACHE_NEIGHBOUR_CAPABILITY_IGMP_CAPABLE
</code></pre>]]></long-description>
          <tag line="404" name="param" description="The CDP neighbour by connected local port ID" type="int" variable="$portId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="404" name="param" description="Set to true to return descriptions rather than integers" type="int" variable="$translate">
            <type by_reference="false">int</type>
          </tag>
          <tag line="404" name="return" description="Individual capabilities of a given neighbour" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="425">
          <name>$portId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="425">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="456" package="Default">
        <name>neighbourVTPMgmtDomain</name>
        <full_name>neighbourVTPMgmtDomain</full_name>
        <docblock line="444">
          <description><![CDATA[Get the device's CDP neighbours' VTP management domain indexed by the current device's port ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The VTP Management Domain for the remote device's interface,
  as reported in the most recently received CDP message. This
  object is not instantiated if no VTP Management Domain field
  (TLV) was reported in the most recently received CDP message.</p>
</blockquote>]]></long-description>
          <tag line="444" name="see" description="\OSS_SNMP\MIBS\Cisco\REFERENCE" refers="\OSS_SNMP\MIBS\Cisco\REFERENCE"/>
          <tag line="444" name="return" description="The device's CDP neighbours' VTP management domain indexed by the current device's port ID" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="472" package="Default">
        <name>neighbourNativeVLAN</name>
        <full_name>neighbourNativeVLAN</full_name>
        <docblock line="462">
          <description><![CDATA[Get the remote device's interface's native VLAN (indexed by local portId)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>The remote device's interface's native VLAN, as reported in the
  most recent CDP message.  The value 0 indicates
  no native VLAN field (TLV) was reported in the most
  recent CDP message.</p>
</blockquote>]]></long-description>
          <tag line="462" name="return" description="The remote device's interface's native VLAN (indexed by local portId)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="522" package="Default">
        <name>neighbourDuplexMode</name>
        <full_name>neighbourDuplexMode</full_name>
        <docblock line="511">
          <description><![CDATA[Get the remote device's interface's duplex mode (indexed by local portId)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>he remote device's interface's duplex mode, as reported in the
  most recent CDP message.  The value unknown(1) indicates
  no duplex mode field (TLV) was reported in the most
  recent CDP message."</p>
</blockquote>]]></long-description>
          <tag line="511" name="param" description="If true, return the string representation via self::$VTP_VLAN_TYPES" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="511" name="return" description="The remote device's interface's duplex mode (indexed by local portId)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="522">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="544" package="Default">
        <name>neighbourLastChange</name>
        <full_name>neighbourLastChange</full_name>
        <docblock line="533">
          <description><![CDATA[Get the remote device's last change time (indexed by local portId)]]></description>
          <long-description><![CDATA[<blockquote>
  <p>Indicates the time when this cache entry was last changed.
  This object is initialised to the current time when the entry
  gets created and updated to the current time whenever the value
  of any (other) object instance in the corresponding row is
  modified."</p>
</blockquote>]]></long-description>
          <tag line="533" name="return" description="The remote device's last change time(indexed by local portId)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="608" package="Default">
        <name>neighbours</name>
        <full_name>neighbours</full_name>
        <docblock line="551">
          <description><![CDATA[CDP utility function to get all CDP neighbours and their connected ports.]]></description>
          <long-description><![CDATA[<p>Returns an array of neighbours indexed by the neighbour CDP ID with a lot of details.</p>

<p>For example, here's a sample return for a switch with two neighbours where one neighbour
is connected with a LAG / PortChannel and <code>$inverse</code> was set to true.</p>

<pre><code>array(2) {
    ["cr-sw07.example.ie"] =&gt; array(1) {
        [0] =&gt; array(7) {
            ["localPortId"] =&gt; int(10103)
            ["localPortName"] =&gt; string(7) "Gi1/0/3"
            ["localPort"] =&gt; string(20) "GigabitEthernet1/0/3"
            ["isLAG"] =&gt; bool(false)
            ["remotePort"] =&gt; string(21) "GigabitEthernet1/0/24"
            ["remotePortId"] =&gt; int(10124)
            ["remotePortName"] =&gt; string(8) "Gi1/0/24"
        }
    }
    ["cr-sw01.example.ie"] =&gt; array(2) {
        [0] =&gt; array(11) {
            ["localPortId"] =&gt; int(10111)
            ["localPortName"] =&gt; string(8) "Gi1/0/11"
                ["localPort"] =&gt; string(21) "GigabitEthernet1/0/11"
            ["isLAG"] =&gt; bool(true)
            ["lagPortId"] =&gt; int(5048)
            ["lagPortName"] =&gt; string(4) "Po48"
            ["remotePort"] =&gt; string(21) "GigabitEthernet1/0/11"
            ["remotePortId"] =&gt; int(10111)
            ["remotePortName"] =&gt; string(8) "Gi1/0/11"
            ["remoteLagPortId"] =&gt; int(5048)
            ["remoteLagPortName"] =&gt; string(4) "Po48"
        }
        [1] =&gt; array(11) {
            ["localPortId"] =&gt; int(10112)
            ["localPortName"] =&gt; string(8) "Gi1/0/12"
            ["localPort"] =&gt; string(21) "GigabitEthernet1/0/12"
            ["isLAG"] =&gt; bool(true)
            ["lagPortId"] =&gt; int(5048)
            ["lagPortName"] =&gt; string(4) "Po48"
            ["remotePort"] =&gt; string(21) "GigabitEthernet1/0/12"
            ["remotePortId"] =&gt; int(10112)
            ["remotePortName"] =&gt; string(8) "Gi1/0/12"
            ["remoteLagPortId"] =&gt; int(5048)
            ["remoteLagPortName"] =&gt; string(4) "Po48"
        }
    }
</code></pre>]]></long-description>
          <tag line="551" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourId()" refers="\OSS_SNMP\MIBS\Cisco\neighbourId()"/>
          <tag line="551" name="see" description="\OSS_SNMP\SNMP\MIBS\Interface::descriptions()" refers="\OSS_SNMP\SNMP\MIBS\Interface::descriptions()"/>
          <tag line="551" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbourPort()" refers="\OSS_SNMP\MIBS\Cisco\neighbourPort()"/>
          <tag line="551" name="param" description="If true, all remoteXXX params will be discovered (only remotePort is returned otherwise)" type="boolean" variable="$inverse">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="551" name="param" description="If using $inverse, pass an array of CDP IDs of neighbours that should not be 'inverse' discovered." type="array" variable="$skipHostIds">
            <type by_reference="false">array</type>
          </tag>
          <tag line="551" name="return" description="CDP neighbours and their connected ports" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="608">
          <name>$inverse</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="608">
          <name>$skipHostIds</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="703" package="Default">
        <name>crawl</name>
        <full_name>crawl</full_name>
        <docblock line="691">
          <description><![CDATA[Recursivily crawls all CDP neighbours to build up a flat array of all devices
indexed by the CDP device id.]]></description>
          <long-description><![CDATA[<p>Array form is same as that returned by neighbours()</p>]]></long-description>
          <tag line="691" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbours()" refers="\OSS_SNMP\MIBS\Cisco\neighbours()"/>
          <tag line="691" name="param" description="Unless you're doing something funky, just pass an empty array. This is where the result will be found." type="array" variable="$devices">
            <type by_reference="false">array</type>
          </tag>
          <tag line="691" name="param" description="CDP device ID of next host to crawl. On first pass, set to null - used internally when recursing" type="string" variable="$device">
            <type by_reference="false">string</type>
          </tag>
          <tag line="691" name="param" description="An array of CDP device IDs to *ignore*. I.e. to not include in recursive crawling" type="array" variable="$ignore">
            <type by_reference="false">array</type>
          </tag>
          <tag line="691" name="return" description="The resultant array of all crawled devices (same as that passed in the @param $devices parameter)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="703">
          <name>$devices</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
        <argument line="703">
          <name>$device</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="703">
          <name>$ignore</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="778" package="Default">
        <name>linkTopology</name>
        <full_name>linkTopology</full_name>
        <docblock line="743">
          <description><![CDATA[Find the layer 2 topology as an array with no link mentioned more than once.]]></description>
          <long-description><![CDATA[<p>Huh? This function:</p>

<ul>
<li>takes the result of crawl() (or calls crawl()) to get the CDP topology;</li>
<li>foreach device, builds an array of device to device links;</li>
<li>SO LONG as that link has already not been accounted for in the other direction.</li>
</ul>

<p>I.e. if a link is found A -> B, then the same B -> A link will not be included.</p>

<p>The primary differences to the return value of this and crawl() are:</p>

<ul>
<li>links only appear once (unidirectional) rather than twice (bidirectional)</li>
<li><p>the links are indexed by the localPortName rather than an integer index:</p>

<p>[cr-sw04.degkcp.example.ie] => Array
(
     [cd-sw02.degkcp.example.ie] => Array
     (
         [GigabitEthernet1/0/3] => Array
         (
             [remotePort] => FastEthernet0/1
             [isLAG]      => false
             ........
     )
)</p></li>
</ul>

<p>All port information is copied over from the supplied / called <code>crawl()</code> array</p>]]></long-description>
          <tag line="743" name="see" description="\OSS_SNMP\MIBS\Cisco\crawl()" refers="\OSS_SNMP\MIBS\Cisco\crawl()"/>
          <tag line="743" name="param" description="The result of crawl() (if null, this function performs a crawl())" type="array" variable="$devices">
            <type by_reference="false">array</type>
          </tag>
          <tag line="743" name="return" description="L2 topology as described above." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="778">
          <name>$devices</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="876" package="Default">
        <name>collapseLAGs</name>
        <full_name>collapseLAGs</full_name>
        <docblock line="812">
          <description><![CDATA[Utility function to process the output from neighbours() and remove individual trunk ports leaving only
single LAG links.]]></description>
          <long-description><![CDATA[<p>For example, here's a sample return for a switch with a neighbour
connected with a LAG / PortChannel:</p>

<pre><code>array(2) {
["cr-sw01.example.ie"] =&gt; array(2) {
    [0] =&gt; array(11) {
        ["localPortId"] =&gt; int(10111)
        ["localPortName"] =&gt; string(8) "Gi1/0/11"
        ["localPort"] =&gt; string(21) "GigabitEthernet1/0/11"
        ["isLAG"] =&gt; bool(true)
        ["lagPortId"] =&gt; int(5048)
        ["lagPortName"] =&gt; string(4) "Po48"
        ["remotePort"] =&gt; string(21) "GigabitEthernet1/0/11"
        ["remotePortId"] =&gt; int(10111)
        ["remotePortName"] =&gt; string(8) "Gi1/0/11"
        ["remoteLagPortId"] =&gt; int(5048)
        ["remoteLagPortName"] =&gt; string(4) "Po48"
    }
    [1] =&gt; array(11) {
        ["localPortId"] =&gt; int(10112)
        ["localPortName"] =&gt; string(8) "Gi1/0/12"
        ["localPort"] =&gt; string(21) "GigabitEthernet1/0/12"
        ["isLAG"] =&gt; bool(true)
        ["lagPortId"] =&gt; int(5048)
        ["lagPortName"] =&gt; string(4) "Po48"
        ["remotePort"] =&gt; string(21) "GigabitEthernet1/0/12"
        ["remotePortId"] =&gt; int(10112)
        ["remotePortName"] =&gt; string(8) "Gi1/0/12"
        ["remoteLagPortId"] =&gt; int(5048)
        ["remoteLagPortName"] =&gt; string(4) "Po48"
    }
}
...
}
</code></pre>

<p>The result of this function would be:</p>

<pre><code>array(2) {
["cr-sw01.example.ie"] =&gt; array(1) {
    [0] =&gt; array(11) {
        ["localPortId"] =&gt; int(5048)
        ["localPortName"] =&gt; string(8) "Po48"
        ["localPort"] =&gt; string(21) "Po48"
        ["isLAG"] =&gt; bool(true)
        ["lagPortId"] =&gt; int(5048)
        ["lagPortName"] =&gt; string(4) "Po48"
        ["remotePort"] =&gt; string(21) "Po48"
        ["remotePortId"] =&gt; int(5048)
        ["remotePortName"] =&gt; string(8) "Po48"
        ["remoteLagPortId"] =&gt; int(5048)
        ["remoteLagPortName"] =&gt; string(4) "Po48"
    }
}
...
}
</code></pre>]]></long-description>
          <tag line="812" name="see" description="\OSS_SNMP\MIBS\Cisco\neighbours()" refers="\OSS_SNMP\MIBS\Cisco\neighbours()"/>
          <tag line="812" name="param" description="The result of a call to neighbours()" type="array" variable="$neighbours">
            <type by_reference="false">array</type>
          </tag>
          <tag line="812" name="return" description="Processed CDP neighbours with LAG ports collapsed" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="876">
          <name>$neighbours</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="914" package="Default">
        <name>collapseDevicesLAGs</name>
        <full_name>collapseDevicesLAGs</full_name>
        <docblock line="904">
          <description><![CDATA[An extension of `collapseLAGs()` to work with `crawl()` and `linkTopology()`.]]></description>
          <long-description><![CDATA[<p>Rather than taking the input from <code>neighbours()</code>, it takes input from <code>crawl()</code> or <code>linkTopology()</code>
and processes all neighbours.</p>]]></long-description>
          <tag line="904" name="see" description="\OSS_SNMP\MIBS\Cisco\collapseLAGs()" refers="\OSS_SNMP\MIBS\Cisco\collapseLAGs()"/>
          <tag line="904" name="param" description="The result of a call to crawl() or linkTopology()" type="array" variable="$devices">
            <type by_reference="false">array</type>
          </tag>
          <tag line="904" name="return" description="Processed CDP neighbours with LAG ports collapsed" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="914">
          <name>$devices</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Cisco/CDP.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Cisco/MST.php" hash="db83c15d1de741b398a8b093bbd72466" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Cisco" line="44" package="Default">
      <extends>\OSS_SNMP\MIBS\Cisco</extends>
      <name>MST</name>
      <full_name>\OSS_SNMP\MIBS\Cisco\MST</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Cisco devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012 - 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="47" package="Default">
        <name>OID_STP_X_MST_MAX_INSTANCE_NUMBER</name>
        <full_name>OID_STP_X_MST_MAX_INSTANCE_NUMBER</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.11.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="48" package="Default">
        <name>OID_STP_X_MST_REGION_NAME</name>
        <full_name>OID_STP_X_MST_REGION_NAME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.11.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="49" package="Default">
        <name>OID_STP_X_MST_REGION_REVISION</name>
        <full_name>OID_STP_X_MST_REGION_REVISION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.11.3.0']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="64" package="Default">
        <name>maxInstanceNumber</name>
        <full_name>maxInstanceNumber</full_name>
        <docblock line="52">
          <description><![CDATA[Returns the maximum MST instance number]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The maximum MST (Multiple Spanning Tree) instance id,
  that can be supported by the device for Cisco proprietary
  implementation of the MST Protocol.</p>
  
  <p>This object is deprecated and replaced by stpxSMSTMaxInstanceID."</p>
</blockquote>]]></long-description>
          <tag line="52" name="deprecated" description="Use \OSS_SNMP\MIBS\Cisco\SMST::maxInstanceID()"/>
          <tag line="52" name="return" description="The maximum MST instance number" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="74" package="Default">
        <name>regionName</name>
        <full_name>regionName</full_name>
        <docblock line="69">
          <description><![CDATA[Returns the operational MST region name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="return" description="The operational MST region name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="85" package="Default">
        <name>regionRevision</name>
        <full_name>regionRevision</full_name>
        <docblock line="79">
          <description><![CDATA[Returns the operational MST region revision.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="deprecated" description="Use \OSS_SNMP\MIBS\Cisco\SMST::regionRevision()"/>
          <tag line="79" name="return" description="The operational MST region revision" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="116" package="Default">
        <name>portRoles</name>
        <full_name>portRoles</full_name>
        <docblock line="91">
          <description><![CDATA[Get the device's MST port roles (by given instance id)]]></description>
          <long-description><![CDATA[<p>Only ports participating in MST for the given instance id are returned.</p>

<blockquote>
  <p>"An entry containing the port role information for the RSTP
  protocol on a port for a particular Spanning Tree instance."</p>
</blockquote>

<p>The original OIDs for this are deprecated:</p>

<blockquote>
  <p>stpxMSTPortRoleTable - 1.3.6.1.4.1.9.9.82.1.11.12</p>
  
  <p>"A table containing a list of the bridge ports for a
  particular MST instance. This table is only instantiated
  when the stpxSpanningTreeType is mst(4).</p>
  
  <p>This table is deprecated and replaced with
  stpxRSTPPortRoleTable."</p>
</blockquote>]]></long-description>
          <tag line="91" name="see" description="\OSS_SNMP\MIBS\Cisco\RSTP::portRoles()" refers="\OSS_SNMP\MIBS\Cisco\RSTP::portRoles()"/>
          <tag line="91" name="param" description="The MST instance ID to query port roles for" type="int" variable="$iid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="91" name="param" description="If true, return the string representation via RSTP::$STP_X_RSTP_PORT_ROLES" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="91" name="return" description="The device's MST port roles (by given instance id)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$iid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="116">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Cisco/MST.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Cisco/VTP.php" hash="de454a7d795291d4db3021e117955137" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Cisco" line="44" package="Default">
      <extends>\OSS_SNMP\MIBS\Cisco</extends>
      <name>VTP</name>
      <full_name>\OSS_SNMP\MIBS\Cisco\VTP</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Cisco devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="48" package="Default">
        <name>OID_VTP_VLAN_STATUS</name>
        <full_name>OID_VTP_VLAN_STATUS</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.46.1.3.1.1.2.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="49" package="Default">
        <name>OID_VTP_VLAN_TYPE</name>
        <full_name>OID_VTP_VLAN_TYPE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.46.1.3.1.1.3.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="50" package="Default">
        <name>OID_VTP_VLAN_NAME</name>
        <full_name>OID_VTP_VLAN_NAME</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.46.1.3.1.1.4.1']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="53" package="Default">
        <name>OID_STP_X_RSTP_PORT_ROLE</name>
        <full_name>OID_STP_X_RSTP_PORT_ROLE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.12.2.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="60" package="Default">
        <name>VTP_VLAN_STATE_OPERATIONAL</name>
        <full_name>VTP_VLAN_STATE_OPERATIONAL</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="56">
          <description><![CDATA[Constant for possible value of VTP VLAN status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanStates()" refers="\OSS_SNMP\MIBS\Cisco\vlanStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="66" package="Default">
        <name>VTP_VLAN_STATE_SUSPENDED</name>
        <full_name>VTP_VLAN_STATE_SUSPENDED</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="62">
          <description><![CDATA[Constant for possible value of VTP VLAN status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanStates()" refers="\OSS_SNMP\MIBS\Cisco\vlanStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="72" package="Default">
        <name>VTP_VLAN_STATE_MTU_TOO_BIG_FOR_DEVICE</name>
        <full_name>VTP_VLAN_STATE_MTU_TOO_BIG_FOR_DEVICE</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="68">
          <description><![CDATA[Constant for possible value of VTP VLAN status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanStates()" refers="\OSS_SNMP\MIBS\Cisco\vlanStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="78" package="Default">
        <name>VTP_VLAN_STATE_MTU_TOO_BIG_FOR_TRUNK</name>
        <full_name>VTP_VLAN_STATE_MTU_TOO_BIG_FOR_TRUNK</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="74">
          <description><![CDATA[Constant for possible value of VTP VLAN status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanStates()" refers="\OSS_SNMP\MIBS\Cisco\vlanStates()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="119" package="Default">
        <name>VTP_VLAN_TYPE_ETHERNET</name>
        <full_name>VTP_VLAN_TYPE_ETHERNET</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="115">
          <description><![CDATA[Constant for possible value of VTP VLAN type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="125" package="Default">
        <name>VTP_VLAN_TYPE_FDDI</name>
        <full_name>VTP_VLAN_TYPE_FDDI</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="121">
          <description><![CDATA[Constant for possible value of VTP VLAN type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="121" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="131" package="Default">
        <name>VTP_VLAN_TYPE_TOKEN_RING</name>
        <full_name>VTP_VLAN_TYPE_TOKEN_RING</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="127">
          <description><![CDATA[Constant for possible value of VTP VLAN type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="137" package="Default">
        <name>VTP_VLAN_TYPE_FDDI_NET</name>
        <full_name>VTP_VLAN_TYPE_FDDI_NET</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="133">
          <description><![CDATA[Constant for possible value of VTP VLAN type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="143" package="Default">
        <name>VTP_VLAN_TYPE_TR_NET</name>
        <full_name>VTP_VLAN_TYPE_TR_NET</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="139">
          <description><![CDATA[Constant for possible value of VTP VLAN type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="149" package="Default">
        <name>VTP_VLAN_TYPE_DEPRECATED</name>
        <full_name>VTP_VLAN_TYPE_DEPRECATED</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="145">
          <description><![CDATA[Constant for possible value of VTP VLAN type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="86" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$VTP_VLAN_STATES</name>
        <default><![CDATA[array(self::VTP_VLAN_STATE_OPERATIONAL => 'operational', self::VTP_VLAN_STATE_SUSPENDED => 'suspended', self::VTP_VLAN_STATE_MTU_TOO_BIG_FOR_DEVICE => 'mtuTooBigForDevice', self::VTP_VLAN_STATE_MTU_TOO_BIG_FOR_TRUNK => 'mtuTooBigForTrunk')]]></default>
        <docblock line="80">
          <description><![CDATA[Text representation of VTP VLAN status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanStates()" refers="\OSS_SNMP\MIBS\Cisco\vlanStates()"/>
          <tag line="80" name="var" description="Text representations of VTP VLAN status." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="157" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$VTP_VLAN_TYPES</name>
        <default><![CDATA[array(self::VTP_VLAN_TYPE_ETHERNET => 'ethernet', self::VTP_VLAN_TYPE_FDDI => 'fddi', self::VTP_VLAN_TYPE_TOKEN_RING => 'tokenRing', self::VTP_VLAN_TYPE_FDDI_NET => 'fddiNet', self::VTP_VLAN_TYPE_TR_NET => 'trNet', self::VTP_VLAN_TYPE_DEPRECATED => 'deprecated')]]></default>
        <docblock line="151">
          <description><![CDATA[Text representation of VTP VLAN types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="see" description="\OSS_SNMP\MIBS\Cisco\vlanTypes()" refers="\OSS_SNMP\MIBS\Cisco\vlanTypes()"/>
          <tag line="151" name="var" description="Text representations of VTP VLAN types." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="102" package="Default">
        <name>vlanStates</name>
        <full_name>vlanStates</full_name>
        <docblock line="93">
          <description><![CDATA[Get the device's VTP VLAN States (indexed by VLAN ID)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="see" description="\OSS_SNMP\MIBS\Cisco\$VTP_VLAN_STATES" refers="\OSS_SNMP\MIBS\Cisco\$VTP_VLAN_STATES"/>
          <tag line="93" name="see" description="\OSS_SNMP\MIBS\Cisco\VTP_VLAN_STATE_OPERATIONAL" refers="\OSS_SNMP\MIBS\Cisco\VTP_VLAN_STATE_OPERATIONAL"/>
          <tag line="93" name="param" description="If true, return the string representation via self::$VTP_VLAN_TYPES" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="return" description="The device's VTP VLAN States (indexed by VLAN ID)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="175" package="Default">
        <name>vlanTypes</name>
        <full_name>vlanTypes</full_name>
        <docblock line="166">
          <description><![CDATA[Get the device's VTP VLAN Types (indexed by VLAN ID)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="166" name="see" description="\OSS_SNMP\MIBS\Cisco\$VTP_VLAN_TYPES" refers="\OSS_SNMP\MIBS\Cisco\$VTP_VLAN_TYPES"/>
          <tag line="166" name="see" description="\OSS_SNMP\MIBS\Cisco\VTP_VLAN_TYPE_ETHERNET" refers="\OSS_SNMP\MIBS\Cisco\VTP_VLAN_TYPE_ETHERNET"/>
          <tag line="166" name="param" description="If true, return the string representation via self::$VTP_VLAN_TYPES" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="166" name="return" description="The device's VTP VLAN types (indexed by VLAN ID)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="190" package="Default">
        <name>vlanNames</name>
        <full_name>vlanNames</full_name>
        <docblock line="185">
          <description><![CDATA[Get the device's VTP VLAN names (indexed by VLAN ID)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="return" description="The device's VTP VLAN names (indexed by VLAN ID)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Cisco/VTP.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Cisco/RSTP.php" hash="90fb6571fdbf9e08b8b5767cfb6482de" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Cisco" line="44" package="Default">
      <extends>\OSS_SNMP\MIBS\Cisco</extends>
      <name>RSTP</name>
      <full_name>\OSS_SNMP\MIBS\Cisco\RSTP</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Cisco devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="48" package="Default">
        <name>OID_STP_X_RSTP_PORT_ROLE</name>
        <full_name>OID_STP_X_RSTP_PORT_ROLE</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.12.2.1.3']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="55" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_DISABLED</name>
        <full_name>STP_X_RSTP_PORT_ROLE_DISABLED</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="51">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="61" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_ROOT</name>
        <full_name>STP_X_RSTP_PORT_ROLE_ROOT</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="57">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="67" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_DESIGNATED</name>
        <full_name>STP_X_RSTP_PORT_ROLE_DESIGNATED</full_name>
        <value><![CDATA[3]]></value>
        <docblock line="63">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="73" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_ALTERNATE</name>
        <full_name>STP_X_RSTP_PORT_ROLE_ALTERNATE</full_name>
        <value><![CDATA[4]]></value>
        <docblock line="69">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="79" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_BACKUP</name>
        <full_name>STP_X_RSTP_PORT_ROLE_BACKUP</full_name>
        <value><![CDATA[5]]></value>
        <docblock line="75">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="85" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_BOUNDARY</name>
        <full_name>STP_X_RSTP_PORT_ROLE_BOUNDARY</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="81">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="91" package="Default">
        <name>STP_X_RSTP_PORT_ROLE_MASTER</name>
        <full_name>STP_X_RSTP_PORT_ROLE_MASTER</full_name>
        <value><![CDATA[6]]></value>
        <docblock line="87">
          <description><![CDATA[Constant for possible value of STP extensions RSTP Port Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="99" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$STP_X_RSTP_PORT_ROLES</name>
        <default><![CDATA[array(self::STP_X_RSTP_PORT_ROLE_DISABLED => 'disabled', self::STP_X_RSTP_PORT_ROLE_ROOT => 'root', self::STP_X_RSTP_PORT_ROLE_DESIGNATED => 'designated', self::STP_X_RSTP_PORT_ROLE_ALTERNATE => 'alternate', self::STP_X_RSTP_PORT_ROLE_BACKUP => 'backUp', self::STP_X_RSTP_PORT_ROLE_BOUNDARY => 'boundary', self::STP_X_RSTP_PORT_ROLE_MASTER => 'master')]]></default>
        <docblock line="93">
          <description><![CDATA[Text representation of STP extensions RSTP Port Roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="see" description="\OSS_SNMP\MIBS\Cisco\rstpPortRole()" refers="\OSS_SNMP\MIBS\Cisco\rstpPortRole()"/>
          <tag line="93" name="var" description="Text representations of STP extensions RSTP Port Role." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="113" namespace="OSS_SNMP\MIBS\Cisco" package="Default">
        <name>$STP_X_RSTP_PASSING_PORT_ROLES</name>
        <default><![CDATA[array(self::STP_X_RSTP_PORT_ROLE_ROOT => 'root', self::STP_X_RSTP_PORT_ROLE_DESIGNATED => 'designated')]]></default>
        <docblock line="109">
          <description><![CDATA[Array of port states that indicate traffic is/can pass]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="var" description="of port states that indicate traffic is/can pass" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="142" package="Default">
        <name>portRoles</name>
        <full_name>portRoles</full_name>
        <docblock line="118">
          <description><![CDATA[Get the device's RSTP port roles (by given vlan id)]]></description>
          <long-description><![CDATA[<p>Only ports participating in RSTP for the given VLAN id are returned.</p>

<p>This function will also convert STP port IDs to the device proper port IDs.
E.g. sample output:</p>

<p>Array
(
   [10101] => 3
   [10103] => 3
   [10105] => 3
   [5048] => 2
)</p>]]></long-description>
          <tag line="118" name="see" description="\OSS_SNMP\MIBS\Cisco\$STP_X_RSTP_PORT_ROLES" refers="\OSS_SNMP\MIBS\Cisco\$STP_X_RSTP_PORT_ROLES"/>
          <tag line="118" name="see" description="\OSS_SNMP\MIBS\Cisco\STP_X_RSTP_PORT_ROLE_ROOT" refers="\OSS_SNMP\MIBS\Cisco\STP_X_RSTP_PORT_ROLE_ROOT"/>
          <tag line="118" name="param" description="The RSTP VLAN ID to query port roles for" type="int" variable="$vid">
            <type by_reference="false">int</type>
          </tag>
          <tag line="118" name="param" description="If true, return the string representation via self::$STP_X_RSTP_PORT_ROLES" type="boolean" variable="$translate">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="118" name="return" description="The device's RSTP port roles (by given vlan id)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$vid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="142">
          <name>$translate</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="157">Find a better way to translate these?</todo>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Cisco/RSTP.php</error>
    </parse_markers>
  </file>
  <file path="MIBS/Cisco/SMST.php" hash="8500be58581deaac08f6c8b14a0fcd09" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP\MIBS\Cisco" line="44" package="Default">
      <extends>\OSS_SNMP\MIBS\Cisco</extends>
      <name>SMST</name>
      <full_name>\OSS_SNMP\MIBS\Cisco\SMST</full_name>
      <docblock line="38">
        <description><![CDATA[A class for performing SNMP V2 queries on Cisco devices]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012 - 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="47" package="Default">
        <name>OID_STP_X_SMST_MAX_INSTANCES</name>
        <full_name>OID_STP_X_SMST_MAX_INSTANCES</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.14.1.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="48" package="Default">
        <name>OID_STP_X_SMST_MAX_INSTANCE_ID</name>
        <full_name>OID_STP_X_SMST_MAX_INSTANCE_ID</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.14.2.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="49" package="Default">
        <name>OID_STP_X_SMST_REGION_REVISION</name>
        <full_name>OID_STP_X_SMST_REGION_REVISION</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.14.3.0']]></value>
      </constant>
      <constant namespace="OSS_SNMP\MIBS\Cisco" line="51" package="Default">
        <name>OID_STP_X_SMST_REMAINING_HOP_COUNT</name>
        <full_name>OID_STP_X_SMST_REMAINING_HOP_COUNT</full_name>
        <value><![CDATA['.1.3.6.1.4.1.9.9.82.1.14.5.1.4']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="62" package="Default">
        <name>maxInstances</name>
        <full_name>maxInstances</full_name>
        <docblock line="54">
          <description><![CDATA[Returns the maximum number of MST instances]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The maximum number of MST instances
  that can be supported by the device for IEEE MST"</p>
</blockquote>]]></long-description>
          <tag line="54" name="return" description="The maximum number of MST instances" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="75" package="Default">
        <name>maxInstanceId</name>
        <full_name>maxInstanceId</full_name>
        <docblock line="67">
          <description><![CDATA[Returns the maximum MST instance ID]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The maximum MST (Multiple Spanning Tree) instance id,
  that can be supported by the device for IEEE MST"</p>
</blockquote>]]></long-description>
          <tag line="67" name="return" description="The maximum MST instance ID" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="85" package="Default">
        <name>regionRevision</name>
        <full_name>regionRevision</full_name>
        <docblock line="80">
          <description><![CDATA[Returns the operational SMST region revision.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="return" description="The operational SMST region revision" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="103" package="Default">
        <name>remainingHopCount</name>
        <full_name>remainingHopCount</full_name>
        <docblock line="91">
          <description><![CDATA[Returns the remaining hop count for all MST instances]]></description>
          <long-description><![CDATA[<blockquote>
  <p>"The remaining hop count for this MST instance. If this object
  value is not applicable on an MST instance, then the value
  retrieved for this object for that MST instance will be -1.</p>
  
  <p>This object is only instantiated when the object value of
  stpxSpanningTreeType is mst(4)."</p>
</blockquote>]]></long-description>
          <tag line="91" name="return" description="The remaining hop count for all MST instances" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP\MIBS\Cisco" line="119" package="Default">
        <name>instances</name>
        <full_name>instances</full_name>
        <docblock line="108">
          <description><![CDATA[Returns an array of running MST instances.]]></description>
          <long-description><![CDATA[<p>This is a hack on the remainingHopCount() as the MIB of this
is empty on my test box (.1.3.6.1.4.1.9.9.82.1.14.5.1.1)</p>

<p>We name the instances as well based on the region name / use specified string.</p>]]></long-description>
          <tag line="108" name="param" description="If null, then instances are named using the MST region name. Else this is the root of the name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="return" description="The running MST instances" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$name</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIBS/Cisco/SMST.php</error>
    </parse_markers>
  </file>
  <file path="Cache.php" hash="7ff45107dca47e5732b52161b9104323" package="Default">
    <class final="true" abstract="true" namespace="OSS_SNMP" line="48" package="Default">
      <extends/>
      <name>Cache</name>
      <full_name>\OSS_SNMP\Cache</full_name>
      <docblock line="39">
        <description><![CDATA[An abstract cache for storing results of SNMP queries .]]></description>
        <long-description><![CDATA[<p>See the implementation in \OSS_SNMP\Cache\Basic for proper examples and documentation.</p>]]></long-description>
        <tag line="39" name="see" description="\OSS_SNMP\Cache\Basic" refers="\OSS_SNMP\Cache\Basic"/>
        <tag line="39" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="39" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OSS_SNMP" line="51" package="Default">
        <name>save</name>
        <full_name>save</full_name>
        <argument line="51">
          <name>$varName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$varValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OSS_SNMP" line="52" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="52">
          <name>$varName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OSS_SNMP" line="53" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <argument line="53">
          <name>$varName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="OSS_SNMP" line="54" package="Default">
        <name>clearAll</name>
        <full_name>clearAll</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Cache.php</error>
      <error line="51" code="50010">No DocBlock was found for method save()</error>
      <error line="52" code="50010">No DocBlock was found for method load()</error>
      <error line="53" code="50010">No DocBlock was found for method clear()</error>
      <error line="54" code="50010">No DocBlock was found for method clearAll()</error>
    </parse_markers>
  </file>
  <file path="Platform.php" hash="86481512ec32de37c3fa74e4a8651b7a" package="Default">
    <include line="115" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="OSS_SNMP" line="45" package="Default">
      <extends/>
      <name>Platform</name>
      <full_name>\OSS_SNMP\Platform</full_name>
      <docblock line="39">
        <description><![CDATA[A class for parsing device / host / platform details]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="39" name="copyright" description="Copyright (c) 2012 - 2013, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="39" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="52" namespace="OSS_SNMP" package="Default">
        <name>$_vendor</name>
        <default><![CDATA['Unknown']]></default>
        <docblock line="47">
          <description><![CDATA[The platform vendor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="The platform vendor" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" namespace="OSS_SNMP" package="Default">
        <name>$_model</name>
        <default><![CDATA['Unknown']]></default>
        <docblock line="54">
          <description><![CDATA[The platform model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="The platform model" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" namespace="OSS_SNMP" package="Default">
        <name>$_os</name>
        <default><![CDATA['Unknown']]></default>
        <docblock line="61">
          <description><![CDATA[The platform operating system]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="var" description="The platform operating system" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" namespace="OSS_SNMP" package="Default">
        <name>$_osver</name>
        <default><![CDATA['Unknown']]></default>
        <docblock line="68">
          <description><![CDATA[The platform operating system version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="The platform operating system version" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="80" namespace="OSS_SNMP" package="Default">
        <name>$_osdate</name>
        <default><![CDATA[null]]></default>
        <docblock line="75">
          <description><![CDATA[The platform operating system (compile) date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="var" description="The platform operating system (compile) date" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="87" namespace="OSS_SNMP" package="Default">
        <name>$_snmpHost</name>
        <default><![CDATA[]]></default>
        <docblock line="82">
          <description><![CDATA[The \OSS_SNMP\SNMP object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="var" description="The \OSS_SNMP\SNMP object" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="96" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="90">
          <description><![CDATA[The constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="The SNMP Host object" type="\OSS_SNMP\SNMP" variable="$snmpHost">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
          <tag line="90" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$snmpHost</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="107" package="Default">
        <name>parse</name>
        <full_name>parse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="124" package="Default">
        <name>setSNMPHost</name>
        <full_name>setSNMPHost</full_name>
        <docblock line="118">
          <description><![CDATA[Set the SNMPT Host]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="The SNMP Host object" type="\OSS_SNMP\SNMP" variable="$s">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
          <tag line="118" name="return" description="For fluent interfaces" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$s</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="135" package="Default">
        <name>getSNMPHost</name>
        <full_name>getSNMPHost</full_name>
        <docblock line="130">
          <description><![CDATA[Get the SNMPHost object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="The SNMP object" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="146" package="Default">
        <name>setVendor</name>
        <full_name>setVendor</full_name>
        <docblock line="140">
          <description><![CDATA[Set vendor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="140" name="return" description="For fluent interfaces" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$s</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="158" package="Default">
        <name>setModel</name>
        <full_name>setModel</full_name>
        <docblock line="152">
          <description><![CDATA[Set model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="152" name="return" description="For fluent interfaces" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$s</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="170" package="Default">
        <name>setOs</name>
        <full_name>setOs</full_name>
        <docblock line="164">
          <description><![CDATA[Set operating system]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="164" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="164" name="return" description="For fluent interfaces" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$s</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="182" package="Default">
        <name>setOsVersion</name>
        <full_name>setOsVersion</full_name>
        <docblock line="176">
          <description><![CDATA[Set OS version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="return" description="For fluent interfaces" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$s</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="194" package="Default">
        <name>setOsDate</name>
        <full_name>setOsDate</full_name>
        <docblock line="188">
          <description><![CDATA[Set OS date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="188" name="param" description="" type="string" variable="$s">
            <type by_reference="false">string</type>
          </tag>
          <tag line="188" name="return" description="For fluent interfaces" type="\OSS_SNMP\Platform">
            <type by_reference="false">\OSS_SNMP\Platform</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$s</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="206" package="Default">
        <name>getVendor</name>
        <full_name>getVendor</full_name>
        <docblock line="201">
          <description><![CDATA[Get vendor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="216" package="Default">
        <name>getModel</name>
        <full_name>getModel</full_name>
        <docblock line="211">
          <description><![CDATA[Get model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="211" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="226" package="Default">
        <name>getOs</name>
        <full_name>getOs</full_name>
        <docblock line="221">
          <description><![CDATA[Get operating system]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="236" package="Default">
        <name>getOsVersion</name>
        <full_name>getOsVersion</full_name>
        <docblock line="231">
          <description><![CDATA[Get OS version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="246" package="Default">
        <name>getOsDate</name>
        <full_name>getOsDate</full_name>
        <docblock line="241">
          <description><![CDATA[Get OS date]]></description>
          <long-description><![CDATA[<p>return \DateTime</p>]]></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Platform.php</error>
      <error line="107" code="50010">No DocBlock was found for method parse()</error>
    </parse_markers>
  </file>
  <file path="Timer.php" hash="20817f81c5aab10d63d45db8c8284783" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP" line="44" package="Default">
      <extends/>
      <name>Timer</name>
      <full_name>\OSS_SNMP\Timer</full_name>
      <docblock line="38">
        <description><![CDATA[A class for timing PHP scripts]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="47" namespace="OSS_SNMP" package="Default">
        <name>$_start</name>
        <default><![CDATA[null]]></default>
        <docblock line="46">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="type" description="double The start time"/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="50" namespace="OSS_SNMP" package="Default">
        <name>$_time</name>
        <default><![CDATA[null]]></default>
        <docblock line="49">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="The elapsed time" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OSS_SNMP" line="52" package="Default">
        <name>start</name>
        <full_name>start</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OSS_SNMP" line="57" package="Default">
        <name>end</name>
        <full_name>end</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OSS_SNMP" line="62" package="Default">
        <name>time</name>
        <full_name>time</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Timer.php</error>
      <critical line="46" code="50019">No short description for property $_start</critical>
      <error line="52" code="50010">No DocBlock was found for method start()</error>
      <error line="57" code="50010">No DocBlock was found for method end()</error>
      <error line="62" code="50010">No DocBlock was found for method time()</error>
    </parse_markers>
  </file>
  <file path="SNMP.php" hash="9bc1c74da846b9070adee3d5a1baa2bd" package="Default">
    <include line="43" type="Require" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="OSS_SNMP" line="54" package="Default">
      <extends/>
      <name>SNMP</name>
      <full_name>\OSS_SNMP\SNMP</full_name>
      <docblock line="48">
        <description><![CDATA[A class for performing SNMP V2 queries and processing the results.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="48" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="48" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <constant namespace="OSS_SNMP" line="117" package="Default">
        <name>OID_OUTPUT_FULL</name>
        <full_name>OID_OUTPUT_FULL</full_name>
        <value><![CDATA[SNMP_OID_OUTPUT_FULL]]></value>
        <docblock line="113">
          <description><![CDATA[SNMP output constants to mirror those of PHP]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="var" description="output constants to mirror those of PHP" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP" line="123" package="Default">
        <name>OID_OUTPUT_NUMERIC</name>
        <full_name>OID_OUTPUT_NUMERIC</full_name>
        <value><![CDATA[SNMP_OID_OUTPUT_NUMERIC]]></value>
        <docblock line="119">
          <description><![CDATA[SNMP output constants to mirror those of PHP]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="119" name="var" description="output constants to mirror those of PHP" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP" line="130" package="Default">
        <name>SNMP_TRUTHVALUE_TRUE</name>
        <full_name>SNMP_TRUTHVALUE_TRUE</full_name>
        <value><![CDATA[1]]></value>
        <docblock line="126">
          <description><![CDATA[Definition of an SNMP return type 'TruthValue']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="var" description="of an SNMP return type 'TruthValue'" type="\OSS_SNMP\Definition">
            <type by_reference="false">\OSS_SNMP\Definition</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="OSS_SNMP" line="136" package="Default">
        <name>SNMP_TRUTHVALUE_FALSE</name>
        <full_name>SNMP_TRUTHVALUE_FALSE</full_name>
        <value><![CDATA[2]]></value>
        <docblock line="132">
          <description><![CDATA[Definition of an SNMP return type 'TruthValue']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="var" description="of an SNMP return type 'TruthValue'" type="\OSS_SNMP\Definition">
            <type by_reference="false">\OSS_SNMP\Definition</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="61" namespace="OSS_SNMP" package="Default">
        <name>$_community</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[The SNMP community to use when polling SNMP services.]]></description>
          <long-description><![CDATA[<p>Defaults to 'public' by the constructor.</p>]]></long-description>
          <tag line="56" name="var" description="The SNMP community to use when polling SNMP services. Defaults to 'public' by the constructor." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" namespace="OSS_SNMP" package="Default">
        <name>$_host</name>
        <default><![CDATA[]]></default>
        <docblock line="63">
          <description><![CDATA[The SNMP host to query.]]></description>
          <long-description><![CDATA[<p>Defaults to '127.0.0.1'</p>]]></long-description>
          <tag line="63" name="var" description="The SNMP host to query. Defaults to '127.0.0.1' by the constructor." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" namespace="OSS_SNMP" package="Default">
        <name>$_timeout</name>
        <default><![CDATA[1000000]]></default>
        <docblock line="69">
          <description><![CDATA[The SNMP query timeout value (microseconds).]]></description>
          <long-description><![CDATA[<p>Default: 1000000</p>]]></long-description>
          <tag line="69" name="var" description="The SNMP query timeout value (microseconds). Default: 1000000" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" namespace="OSS_SNMP" package="Default">
        <name>$_retry</name>
        <default><![CDATA[5]]></default>
        <docblock line="75">
          <description><![CDATA[The SNMP query retry count.]]></description>
          <long-description><![CDATA[<p>Default: 5</p>]]></long-description>
          <tag line="75" name="var" description="The SNMP query retry count. Default: 5" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="86" namespace="OSS_SNMP" package="Default">
        <name>$_lastResult</name>
        <default><![CDATA[null]]></default>
        <docblock line="82">
          <description><![CDATA[A variable to hold the last unaltered result of an SNMP query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="var" description="The last unaltered result of an SNMP query" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="92" namespace="OSS_SNMP" package="Default">
        <name>$_platform</name>
        <default><![CDATA[null]]></default>
        <docblock line="88">
          <description><![CDATA[A variable to hold the platform object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="var" description="The platform object" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="98" namespace="OSS_SNMP" package="Default">
        <name>$_cache</name>
        <default><![CDATA[null]]></default>
        <docblock line="94">
          <description><![CDATA[The cache object to use as the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="var" description="The cache object to use" type="\OSS_SNMP\Cache">
            <type by_reference="false">\OSS_SNMP\Cache</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="111" namespace="OSS_SNMP" package="Default">
        <name>$_disableCache</name>
        <default><![CDATA[false]]></default>
        <docblock line="100">
          <description><![CDATA[Set to true to disable local cache lookup and force SNMP queries]]></description>
          <long-description><![CDATA[<p>Results are still stored. If you need to force a SNMP query, you can:</p>

<p>$snmp = new OSS_SNMP( ... )'
...
$snmp->disableCache();
$snmp->get( ... );
$snmp->enableCache();</p>]]></long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="142" namespace="OSS_SNMP" package="Default">
        <name>$SNMP_TRUTHVALUES</name>
        <default><![CDATA[array(self::SNMP_TRUTHVALUE_TRUE => true, self::SNMP_TRUTHVALUE_FALSE => false)]]></default>
        <docblock line="138">
          <description><![CDATA[PHP equivalents of SNMP return type TruthValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="var" description="PHP equivalents of SNMP return type TruthValue" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="425" namespace="OSS_SNMP" package="Default">
        <name>$HEX_STRING_WORDS_AS_ARRAY</name>
        <default><![CDATA[array('0' => array(false, false, false, false), '1' => array(false, false, false, true), '2' => array(false, false, true, false), '3' => array(false, false, true, true), '4' => array(false, true, false, false), '5' => array(false, true, false, true), '6' => array(false, true, true, false), '7' => array(false, true, true, true), '8' => array(true, false, false, false), '9' => array(true, false, false, true), 'a' => array(true, false, true, false), 'b' => array(true, false, true, true), 'c' => array(true, true, false, false), 'd' => array(true, true, false, true), 'e' => array(true, true, true, false), 'f' => array(true, true, true, true))]]></default>
        <docblock line="418">
          <description><![CDATA[An array of arrays where each array element
represents true / false values for a given
hex digit.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="418" name="see" description="\OSS_SNMP\ppHexStringFlags()" refers="\OSS_SNMP\ppHexStringFlags()"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="154" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="147">
          <description><![CDATA[The constructor.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="The target host for SNMP queries." type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="param" description="The community to use for SNMP queries." type="string" variable="$community">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\OSS_SNMP">
            <type by_reference="false">\OSS_SNMP\OSS_SNMP</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$host</name>
          <default><![CDATA['127.0.0.1']]></default>
          <type/>
        </argument>
        <argument line="154">
          <name>$community</name>
          <default><![CDATA['public']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="168" package="Default">
        <name>realWalk</name>
        <full_name>realWalk</full_name>
        <docblock line="162">
          <description><![CDATA[Proxy to the snmp2_real_walk command]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="The OID to walk" type="string" variable="$oid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="return" description="The results of the walk" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$oid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="181" package="Default">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="174">
          <description><![CDATA[Get a single SNMP value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="174" name="throws" description="On *any* SNMP error, warnings are supressed and a generic exception is thrown" type="\OSS_SNMP\Exception">
            <type by_reference="false">\OSS_SNMP\Exception</type>
          </tag>
          <tag line="174" name="param" description="The OID to get" type="string" variable="$oid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="174" name="return" description="The resultant value" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$oid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="220" package="Default">
        <name>walk1d</name>
        <full_name>walk1d</full_name>
        <docblock line="194">
          <description><![CDATA[Get indexed SNMP values (first degree)]]></description>
          <long-description><![CDATA[<p>Walks the SNMP tree returning an array of key => value pairs.</p>

<p>This is a first degree walk and it will throw an exception if there is more that one degree of values.</p>

<p>I.e. the following query with sample results:</p>

<p>walk1d( '.1.0.8802.1.1.2.1.3.7.1.4' )</p>

<pre><code>  .1.0.8802.1.1.2.1.3.7.1.4.1 = STRING: "GigabitEthernet1/0/1"
  .1.0.8802.1.1.2.1.3.7.1.4.2 = STRING: "GigabitEthernet1/0/2"
  .1.0.8802.1.1.2.1.3.7.1.4.3 = STRING: "GigabitEthernet1/0/3"
  .....
</code></pre>

<p>would yield an array:</p>

<pre><code> 1 =&gt; GigabitEthernet1/0/1
 2 =&gt; GigabitEthernet1/0/2
 3 =&gt; GigabitEthernet1/0/3
</code></pre>]]></long-description>
          <tag line="194" name="param" description="The OID to walk" type="string" variable="$oid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="return" description="The resultant values" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="194" name="throws" description="On *any* SNMP error, warnings are supressed and a generic exception is thrown" type="\OSS_SNMPException">
            <type by_reference="false">\OSS_SNMPException</type>
          </tag>
        </docblock>
        <argument line="220">
          <name>$oid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="269" package="Default">
        <name>subOidWalk</name>
        <full_name>subOidWalk</full_name>
        <docblock line="246">
          <description><![CDATA[Get indexed SNMP values where the array key is the given position of the OID]]></description>
          <long-description><![CDATA[<p>I.e. the following query with sample results:</p>

<p>subOidWalk( '.1.3.6.1.4.1.9.9.23.1.2.1.1.9', 15 )</p>

<pre><code>  .1.3.6.1.4.1.9.9.23.1.2.1.1.9.10101.5 = Hex-STRING: 00 00 00 01
  .1.3.6.1.4.1.9.9.23.1.2.1.1.9.10105.2 = Hex-STRING: 00 00 00 01
  .1.3.6.1.4.1.9.9.23.1.2.1.1.9.10108.4 = Hex-STRING: 00 00 00 01
</code></pre>

<p>would yield an array:</p>

<pre><code> 10101 =&gt; Hex-STRING: 00 00 00 01
 10105 =&gt; Hex-STRING: 00 00 00 01
 10108 =&gt; Hex-STRING: 00 00 00 01
</code></pre>]]></long-description>
          <tag line="246" name="throws" description="On *any* SNMP error, warnings are supressed and a generic exception is thrown" type="\OSS_SNMP\Exception">
            <type by_reference="false">\OSS_SNMP\Exception</type>
          </tag>
          <tag line="246" name="param" description="The OID to walk" type="string" variable="$oid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="246" name="param" description="The position of the OID to use as the key" type="int" variable="$position">
            <type by_reference="false">int</type>
          </tag>
          <tag line="246" name="return" description="The resultant values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$oid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="269">
          <name>$position</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="313" package="Default">
        <name>walkIPv4</name>
        <full_name>walkIPv4</full_name>
        <docblock line="293">
          <description><![CDATA[Get indexed SNMP values where they are indexed by IPv4 addresses]]></description>
          <long-description><![CDATA[<p>I.e. the following query with sample results:</p>

<p>subOidWalk( '.1.3.6.1.2.1.15.3.1.1. )</p>

<pre><code>  .1.3.6.1.2.1.15.3.1.1.10.20.30.4 = IpAddress: 192.168.10.10
  ...
</code></pre>

<p>would yield an array:</p>

<pre><code> [10.20.30.4] =&gt; "192.168.10.10"
 ....
</code></pre>]]></long-description>
          <tag line="293" name="throws" description="On *any* SNMP error, warnings are supressed and a generic exception is thrown" type="\OSS_SNMP\Exception">
            <type by_reference="false">\OSS_SNMP\Exception</type>
          </tag>
          <tag line="293" name="param" description="The OID to walk" type="string" variable="$oid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="293" name="return" description="The resultant values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="313">
          <name>$oid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="348" package="Default">
        <name>parseSnmpValue</name>
        <full_name>parseSnmpValue</full_name>
        <docblock line="339">
          <description><![CDATA[Parse the result of an SNMP query into a PHP type]]></description>
          <long-description><![CDATA[<p>For example, [STRING: "blah"] is parsed to a PHP string containing: blah</p>]]></long-description>
          <tag line="339" name="param" description="The value to parse" type="string" variable="$v">
            <type by_reference="false">string</type>
          </tag>
          <tag line="339" name="return" description="The parsed value" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="339" name="throws" description="" type="\OSS_SNMP\Exception">
            <type by_reference="false">\OSS_SNMP\Exception</type>
          </tag>
        </docblock>
        <argument line="348">
          <name>$v</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OSS_SNMP" line="406" package="Default">
        <name>ppTruthValue</name>
        <full_name>ppTruthValue</full_name>
        <docblock line="400">
          <description><![CDATA[Utility function to convert TruthValue SNMP responses to true / false]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="400" name="param" description="The TruthValue ( 1 =&gt; true, 2 =&gt; false) to convert" type="integer" variable="$value">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="400" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="406">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OSS_SNMP" line="461" package="Default">
        <name>ppHexStringFlags</name>
        <full_name>ppHexStringFlags</full_name>
        <docblock line="444">
          <description><![CDATA[Takes a HEX-String of true / false - on / off - set / unset flags
and converts it to an indexed (from 1) array of true / false values.]]></description>
          <long-description><![CDATA[<p>For example, passing it <code>500040</code> will result in an array:</p>

<pre><code>[
    [1]  =&gt; false, [2]  =&gt; true,  [3] =&gt; false, [4]  =&gt; true,
    [5]  =&gt; false, [6]  =&gt; false, [7] =&gt; false, [8]  =&gt; false,
    ...
    [17] =&gt; false, [18] =&gt; true, [19] =&gt; false, [20] =&gt; false,
    [21] =&gt; false, [22] =&gt; true, [23] =&gt; false, [24] =&gt; false
]
</code></pre>]]></long-description>
          <tag line="444" name="param" description="The hex string to parse" type="string" variable="$str">
            <type by_reference="false">string</type>
          </tag>
          <tag line="444" name="return" description="The array of true / false flags indexed from 1" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="461">
          <name>$str</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="OSS_SNMP" line="487" package="Default">
        <name>translate</name>
        <full_name>translate</full_name>
        <docblock line="475">
          <description><![CDATA[Utility function to translate one value(s) to another via an associated array]]></description>
          <long-description><![CDATA[<p>I.e. all elements '$value' will be replaced with $translator( $value ) where
$translator is an associated array.</p>

<p>Huh? Just read the code below!</p>]]></long-description>
          <tag line="475" name="param" description="A scalar or array or values to translate" type="mixed" variable="$values">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="475" name="param" description="An associated array to use to translate the values" type="array" variable="$translator">
            <type by_reference="false">array</type>
          </tag>
          <tag line="475" name="return" description="The translated scalar or array" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="487">
          <name>$values</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="487">
          <name>$translator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="516" package="Default">
        <name>setOidOutputFormat</name>
        <full_name>setOidOutputFormat</full_name>
        <docblock line="508">
          <description><![CDATA[Sets the output format for SNMP queries.]]></description>
          <long-description><![CDATA[<p>Should be one of the class OID_OUTPUT_* constants</p>]]></long-description>
          <tag line="508" name="param" description="The fomat to use" type="int" variable="$f">
            <type by_reference="false">int</type>
          </tag>
          <tag line="508" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
        <argument line="516">
          <name>$f</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="529" package="Default">
        <name>setHost</name>
        <full_name>setHost</full_name>
        <docblock line="523">
          <description><![CDATA[Sets the target host for SNMP queries.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="523" name="param" description="The target host for SNMP queries." type="string" variable="$h">
            <type by_reference="false">string</type>
          </tag>
          <tag line="523" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
        <argument line="529">
          <name>$h</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="546" package="Default">
        <name>getHost</name>
        <full_name>getHost</full_name>
        <docblock line="541">
          <description><![CDATA[Returns the target host as currently configured for SNMP queries]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="541" name="return" description="The target host as currently configured for SNMP queries" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="557" package="Default">
        <name>setCommunity</name>
        <full_name>setCommunity</full_name>
        <docblock line="551">
          <description><![CDATA[Sets the community string to use for SNMP queries.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="551" name="param" description="The community to use for SNMP queries." type="string" variable="$c">
            <type by_reference="false">string</type>
          </tag>
          <tag line="551" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\OSS_SNMP">
            <type by_reference="false">\OSS_SNMP\OSS_SNMP</type>
          </tag>
        </docblock>
        <argument line="557">
          <name>$c</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="568" package="Default">
        <name>getCommunity</name>
        <full_name>getCommunity</full_name>
        <docblock line="563">
          <description><![CDATA[Returns the community string currently in use.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="563" name="return" description="The community string currently in use." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="579" package="Default">
        <name>setTimeout</name>
        <full_name>setTimeout</full_name>
        <docblock line="573">
          <description><![CDATA[Sets the timeout to use for SNMP queries (microseconds).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="573" name="param" description="The timeout to use for SNMP queries (microseconds)." type="int" variable="$t">
            <type by_reference="false">int</type>
          </tag>
          <tag line="573" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\OSS_SNMP">
            <type by_reference="false">\OSS_SNMP\OSS_SNMP</type>
          </tag>
        </docblock>
        <argument line="579">
          <name>$t</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="590" package="Default">
        <name>getTimeout</name>
        <full_name>getTimeout</full_name>
        <docblock line="585">
          <description><![CDATA[Returns the SNMP query timeout (microseconds).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="585" name="return" description="The the SNMP query timeout (microseconds)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="601" package="Default">
        <name>setRetry</name>
        <full_name>setRetry</full_name>
        <docblock line="595">
          <description><![CDATA[Sets the SNMP query retry count.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="595" name="param" description="The SNMP query retry count" type="int" variable="$r">
            <type by_reference="false">int</type>
          </tag>
          <tag line="595" name="return" description="An instance of $this (for fluent interfaces)" type="\OSS_SNMP\OSS_SNMP">
            <type by_reference="false">\OSS_SNMP\OSS_SNMP</type>
          </tag>
        </docblock>
        <argument line="601">
          <name>$r</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="612" package="Default">
        <name>getRetry</name>
        <full_name>getRetry</full_name>
        <docblock line="607">
          <description><![CDATA[Returns the SNMP query retry count]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="607" name="return" description="The SNMP query retry count" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="622" package="Default">
        <name>getLastResult</name>
        <full_name>getLastResult</full_name>
        <docblock line="617">
          <description><![CDATA[Returns the unaltered original last SNMP result]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="617" name="return" description="The unaltered original last SNMP result" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="632" package="Default">
        <name>getResultCache</name>
        <full_name>getResultCache</full_name>
        <docblock line="627">
          <description><![CDATA[Returns the internal result cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="627" name="return" description="The internal result cache" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="643" package="Default">
        <name>disableCache</name>
        <full_name>disableCache</full_name>
        <docblock line="638">
          <description><![CDATA[Disable lookups of the local cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="638" name="return" description="An instance of this for fluent interfaces" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="655" package="Default">
        <name>enableCache</name>
        <full_name>enableCache</full_name>
        <docblock line="650">
          <description><![CDATA[Enable lookups of the local cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="650" name="return" description="An instance of this for fluent interfaces" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="666" package="Default">
        <name>cache</name>
        <full_name>cache</full_name>
        <docblock line="661">
          <description><![CDATA[Query whether we are using the cache or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="661" name="return" description="True of the local lookup cache is enabled. Otherwise false." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="677" package="Default">
        <name>setCache</name>
        <full_name>setCache</full_name>
        <docblock line="671">
          <description><![CDATA[Set the cache to use]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="671" name="param" description="The cache to use" type="\OSS_SNMP\Cache" variable="$c">
            <type by_reference="false">\OSS_SNMP\Cache</type>
          </tag>
          <tag line="671" name="return" description="For fluent interfaces" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
        <argument line="677">
          <name>$c</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="693" package="Default">
        <name>getCache</name>
        <full_name>getCache</full_name>
        <docblock line="683">
          <description><![CDATA[Get the cache in use (or create a Cache\Basic instance]]></description>
          <long-description><![CDATA[<p>We kind of mandate the use of a cache as the code is written with a cache in mind.
You are free to disable it via disableCache() but your machines may be hammered!</p>

<p>We would suggest disableCache() / enableCache() used in pairs only when really needed.</p>]]></long-description>
          <tag line="683" name="return" description="The cache object" type="\OSS_SNMP\Cache">
            <type by_reference="false">\OSS_SNMP\Cache</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="709" package="Default">
        <name>__call</name>
        <full_name>__call</full_name>
        <docblock line="702">
          <description><![CDATA[Magic method for generic function calls]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="702" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="702" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="702" name="throws" description="" type="\OSS_SNMP\Exception">
            <type by_reference="false">\OSS_SNMP\Exception</type>
          </tag>
        </docblock>
        <argument line="709">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="709">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="731" package="Default">
        <name>useExtension</name>
        <full_name>useExtension</full_name>
        <docblock line="718">
          <description><![CDATA[This is the MIB Extension magic]]></description>
          <long-description><![CDATA[<p>Calling $this->useXXX_YYY_ZZZ()->fn() will instantiate
an extension MIB class is the given name and this $this SNMP
instance and then call fn().</p>

<p>See the examples for more information.</p>]]></long-description>
          <tag line="718" name="param" description="The extension class to use" type="string" variable="$mib">
            <type by_reference="false">string</type>
          </tag>
          <tag line="718" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="718" name="return" description="" type="\OSS_SNMP\MIBS">
            <type by_reference="false">\OSS_SNMP\MIBS</type>
          </tag>
        </docblock>
        <argument line="731">
          <name>$mib</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="731">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="740" package="Default">
        <name>getPlatform</name>
        <full_name>getPlatform</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file SNMP.php</error>
      <error line="740" code="50010">No DocBlock was found for method getPlatform()</error>
    </parse_markers>
  </file>
  <file path="MIB.php" hash="f138c2361d3dab2d1913836c2c0935f9" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP" line="44" package="Default">
      <extends/>
      <name>MIB</name>
      <full_name>\OSS_SNMP\MIB</full_name>
      <docblock line="38">
        <description><![CDATA[Parent class for all "MIB" extensions.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="38" name="copyright" description="Copyright (c) 2012, Open Source Solutions Limited, Dublin, Ireland"/>
        <tag line="38" name="author" description="Barry O'Donovan &lt;barry@opensolutions.ie&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="49" namespace="OSS_SNMP" package="Default">
        <name>$_snmp</name>
        <default><![CDATA[null]]></default>
        <docblock line="46">
          <description><![CDATA[Instance for the SNMP object]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="58" package="Default">
        <name>setSNMP</name>
        <full_name>setSNMP</full_name>
        <docblock line="52">
          <description><![CDATA[Set the SNMP instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="the SNMP instance" type="\OSS_SNMP\SNMP" variable="$snmp">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
          <tag line="52" name="return" description="An instance of this class for fluent interfaces" type="\OSS_SNMP\MIB">
            <type by_reference="false">\OSS_SNMP\MIB</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$snmp</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="OSS_SNMP" line="68" package="Default">
        <name>getSNMP</name>
        <full_name>getSNMP</full_name>
        <docblock line="63">
          <description><![CDATA[Get the SNMP instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="Instance of the SNMP object" type="\OSS_SNMP\SNMP">
            <type by_reference="false">\OSS_SNMP\SNMP</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file MIB.php</error>
    </parse_markers>
  </file>
  <file path="Platforms/vendor_extreme.php" hash="6a6293e6f69c3b8a1b4eff2ec5c1a8cf" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Platforms/vendor_extreme.php</error>
    </parse_markers>
  </file>
  <file path="Platforms/vendor_netgear.php" hash="0acc1f50f82ce41f467f34db0303fa61" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Platforms/vendor_netgear.php</error>
    </parse_markers>
  </file>
  <file path="Platforms/vendor_brocade.php" hash="457397bcc04bb237e1cb918dcc84a462" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Platforms/vendor_brocade.php</error>
    </parse_markers>
  </file>
  <file path="Platforms/vendor_mrv.php" hash="b04e0d8ccba27e3557f7001a1c7d0098" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Platforms/vendor_mrv.php</error>
    </parse_markers>
  </file>
  <file path="Exception.php" hash="3a04488c534e50e0581202fc64f04114" package="Default">
    <class final="false" abstract="false" namespace="OSS_SNMP" line="43" package="Default">
      <extends>\Exception</extends>
      <name>Exception</name>
      <full_name>\OSS_SNMP\Exception</full_name>
      <docblock line="40">
        <description><![CDATA[OSS_SNMP\Exception class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Exception.php</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="OSS_SNMP" full_name="OSS_SNMP">
    <namespace name="Cache" full_name="OSS_SNMP\Cache"/>
    <namespace name="MIBS" full_name="OSS_SNMP\MIBS">
      <namespace name="Asterisk" full_name="OSS_SNMP\MIBS\Asterisk"/>
      <namespace name="Cisco" full_name="OSS_SNMP\MIBS\Cisco"/>
      <namespace name="Extreme" full_name="OSS_SNMP\MIBS\Extreme"/>
      <namespace name="MRV" full_name="OSS_SNMP\MIBS\MRV"/>
    </namespace>
  </namespace>
  <marker count="1">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="2"/>
</project>
